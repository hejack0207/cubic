!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!D	M,module	/modules/
!_TAG_KIND_DESCRIPTION!D	T,template	/templates/
!_TAG_KIND_DESCRIPTION!D	V,version	/version statements/
!_TAG_KIND_DESCRIPTION!D	X,mixin	/mixins/
!_TAG_KIND_DESCRIPTION!D	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!D	c,class	/classes/
!_TAG_KIND_DESCRIPTION!D	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!D	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!D	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!D	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!D	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!D	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!D	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!D	u,union	/union names/
!_TAG_KIND_DESCRIPTION!D	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!D	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/f/codes/c/opengl/cubic/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(VERBOSE).SILENT	Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	cmake-build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
$(VERBOSE)MAKESILENT	cmake-build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	Makefile	/^% : %,v$/;"	t
%	Makefile	/^% : RCS\/%$/;"	t
%	Makefile	/^% : RCS\/%,v$/;"	t
%	Makefile	/^% : SCCS\/s.%$/;"	t
%	Makefile	/^% : s.%$/;"	t
%	cmake-build/Makefile	/^% : %,v$/;"	t
%	cmake-build/Makefile	/^% : RCS\/%$/;"	t
%	cmake-build/Makefile	/^% : RCS\/%,v$/;"	t
%	cmake-build/Makefile	/^% : SCCS\/s.%$/;"	t
%	cmake-build/Makefile	/^% : s.%$/;"	t
0	cmake-build/compile_commands.json	/^{$/;"	o
0	compile_commands.json	/^{$/;"	o
1	cmake-build/compile_commands.json	/^{$/;"	o
1	compile_commands.json	/^{$/;"	o
2	cmake-build/compile_commands.json	/^{$/;"	o
2	compile_commands.json	/^{$/;"	o
3	cmake-build/compile_commands.json	/^{$/;"	o
3	compile_commands.json	/^{$/;"	o
4	cmake-build/compile_commands.json	/^{$/;"	o
4	compile_commands.json	/^{$/;"	o
5	cmake-build/compile_commands.json	/^{$/;"	o
5	compile_commands.json	/^{$/;"	o
6	cmake-build/compile_commands.json	/^{$/;"	o
6	compile_commands.json	/^{$/;"	o
7	cmake-build/compile_commands.json	/^{$/;"	o
7	compile_commands.json	/^{$/;"	o
8	cmake-build/compile_commands.json	/^{$/;"	o
8	compile_commands.json	/^{$/;"	o
APIENTRY	include/glad/glad.h	/^#define APIENTRY /;"	d
APIENTRY	include/glad/glad.h	/^#define APIENTRY$/;"	d
APIENTRY	include/imgui/imgui_impl_opengl3_loader.h	/^#define APIENTRY$/;"	d
APIENTRYP	include/glad/glad.h	/^#define APIENTRYP /;"	d
APIENTRYP	include/imgui/imgui_impl_opengl3_loader.h	/^#define APIENTRYP /;"	d
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARRAY_SIZE	include/imgui/imgui_impl_opengl3_loader.h	/^#define ARRAY_SIZE(/;"	d
AcceptDragDropPayload	imgui/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItem	imgui/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	include/imgui/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	include/imgui/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	include/imgui/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	include/imgui/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdHasBeenEditedBefore	include/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	include/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	include/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	include/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	include/imgui/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	include/imgui/imgui_internal.h	/^    int                     ActiveIdMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdNoClearOnFocusLoss	include/imgui/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	include/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	include/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	include/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	include/imgui/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating source: ImGuiInp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	include/imgui/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingAllKeyboardKeys	include/imgui/imgui_internal.h	/^    bool                    ActiveIdUsingAllKeyboardKeys;       \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	include/imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	include/imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ If you used this. Since (IM/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveTexture	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLACTIVETEXTUREPROC            ActiveTexture;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLACTIVETEXTUREPROC
Add	include/imgui/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	include/imgui/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	include/imgui/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCubic	imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	imgui/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	include/imgui/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	imgui/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	imgui/imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	imgui/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawListToDrawData	imgui/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	typeref:typename:void	file:
AddFocusEvent	imgui/imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	imgui/imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	imgui/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	imgui/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	imgui/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	imgui/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyAnalogEvent	imgui/imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	imgui/imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	imgui/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	imgui/imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	imgui/imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseSourceEvent	imgui/imgui.cpp	/^void ImGuiIO::AddMouseSourceEvent(ImGuiMouseSource source)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	imgui/imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	imgui/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	imgui/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	imgui/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	imgui/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	imgui/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	imgui/imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	imgui/imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	imgui/imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	imgui/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	include/imgui/imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AdvanceX	include/imgui/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AlignTextToFramePadding	imgui/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	include/imgui/imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
Alpha	include/imgui/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AnalogValue	include/imgui/imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AnalogValue	include/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AntiAliasedFill	include/imgui/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	include/imgui/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	include/imgui/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppAcceptingEvents	include/imgui/imgui.h	/^    bool        AppAcceptingEvents;                 \/\/ Only modify via SetAppAcceptingEvents()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocusLost	include/imgui/imgui.h	/^    bool        AppFocusLost;                       \/\/ Only modify via AddFocusEvent()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocused	include/imgui/imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventAppFocused
Appearing	include/imgui/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	include/imgui/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyWindowSettings	imgui/imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	include/imgui/imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	include/imgui/imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascent	include/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AspectRatio	imgui/imgui_demo.cpp	/^        static void AspectRatio(ImGuiSizeCallbackData* data)    { float aspect_ratio = *(float*)/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
AttachShader	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLATTACHSHADERPROC             AttachShader;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLATTACHSHADERPROC
AttribLocationProjMtx	imgui/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationProjMtx;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationTex	imgui/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationTex;       \/\/ Uniforms location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationVtxColor	imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxColor;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxPos	imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxPos;    \/\/ Vertex attributes location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxUV	imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxUV;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AutoFitChildAxises	include/imgui/imgui_internal.h	/^    ImS8                    AutoFitChildAxises;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesX	include/imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	include/imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	include/imgui/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	include/imgui/imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	include/imgui/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	imgui/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	imgui/imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
B	include/cubic.h	/^void Cubic::B() {$/;"	f	class:Cubic	typeref:typename:void
BLUE	shared.h	/^    #define BLUE /;"	d
BUB_U_	shared.h	/^    const Operation BUB_U_[] = {op_B,op_U,op_B_inv,op_U_inv};$/;"	v	typeref:typename:const Operation[]
B_U_BU	shared.h	/^    const Operation B_U_BU[] = {op_B_inv,op_U_inv,op_B,op_U};$/;"	v	typeref:typename:const Operation[]
B_inv	include/cubic.h	/^void Cubic::B_inv() {$/;"	f	class:Cubic	typeref:typename:void
BackendFlags	include/imgui/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	include/imgui/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	include/imgui/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	include/imgui/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	include/imgui/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	include/imgui/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendUsingLegacyKeyArrays	include/imgui/imgui.h	/^    ImS8        BackendUsingLegacyKeyArrays;        \/\/ -1: unknown, 0: using AddKeyEvent(), 1:/;"	m	struct:ImGuiIO	typeref:typename:ImS8
BackendUsingLegacyNavInputArray	include/imgui/imgui.h	/^    bool        BackendUsingLegacyNavInputArray;    \/\/ 0: using AddKeyAnalogEvent(), 1: writin/;"	m	struct:ImGuiIO	typeref:typename:bool
BackupActiveIdIsAlive	include/imgui/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	include/imgui/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	include/imgui/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	include/imgui/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	include/imgui/imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	include/imgui/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	include/imgui/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	include/imgui/imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	include/imgui/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	include/imgui/imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupFloat	include/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon90583b0f010a	typeref:typename:float[2]
BackupGroupOffset	include/imgui/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	include/imgui/imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	include/imgui/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	include/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon90583b0f010a	typeref:typename:int[2]
BackupLayout	include/imgui/imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupNavWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*        BackupNavWindow;\/\/ Set on OpenPopup(), a NavWindow that will be restor/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
BackupPrevLineTextBaseOffset	include/imgui/imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupValue	include/imgui/imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	include/imgui/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	include/imgui/imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
BasicSolver	include/basic_solver.h	/^BasicSolver::BasicSolver(){}$/;"	f	class:BasicSolver
BasicSolver	include/basic_solver.h	/^class BasicSolver : Solver$/;"	c
Begin	imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	imgui/imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	imgui/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_f/;"	f	class:ImGui	typeref:typename:bool
BeginChild	imgui/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags/;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	imgui/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGu/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	imgui/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginColumns	imgui/imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	imgui/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPopup	imgui/imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	imgui/imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	include/imgui/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	include/imgui/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginCountPreviousFrame	include/imgui/imgui_internal.h	/^    short                   BeginCountPreviousFrame;            \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	imgui/imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	imgui/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	imgui/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	imgui/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	imgui/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginListBox	imgui/imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuCount	include/imgui/imgui_internal.h	/^    int                     BeginMenuCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginOrder	include/imgui/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	include/imgui/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	include/imgui/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	imgui/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	imgui/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	imgui/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>BeginPopupStack;                    \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	imgui/imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	imgui/imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	imgui/imgui.cpp	/^bool ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipEx	imgui/imgui.cpp	/^bool ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginViewportSideBar	imgui/imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	include/imgui/imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	include/imgui/imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	include/imgui/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	include/imgui/imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	include/imgui/imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BindBuffer	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBINDBUFFERPROC               BindBuffer;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBINDBUFFERPROC
BindSampler	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBINDSAMPLERPROC              BindSampler;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBINDSAMPLERPROC
BindTexture	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBINDTEXTUREPROC              BindTexture;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBINDTEXTUREPROC
BindVertexArray	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBINDVERTEXARRAYPROC          BindVertexArray;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBINDVERTEXARRAYPROC
BlendEquation	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONPROC            BlendEquation;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBLENDEQUATIONPROC
BlendEquationSeparate	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONSEPARATEPROC    BlendEquationSeparate;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
BlendFuncSeparate	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDFUNCSEPARATEPROC        BlendFuncSeparate;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
BorderColorLight	include/imgui/imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	include/imgui/imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	include/imgui/imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	include/imgui/imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BringWindowToDisplayBack	imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	imgui/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	imgui/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	include/imgui/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	include/imgui/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	include/imgui/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	include/imgui/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	include/imgui/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	include/imgui/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	include/imgui/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	include/imgui/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufferData	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERDATAPROC               BufferData;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBUFFERDATAPROC
BufferSubData	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERSUBDATAPROC            BufferSubData;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLBUFFERSUBDATAPROC
Build	imgui/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	imgui/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	imgui/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	imgui/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkOffsetMax	include/imgui/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMax;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkOffsetMin	include/imgui/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMin;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	imgui/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	imgui/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	imgui/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	imgui/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
Button	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
ButtonBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	imgui/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	include/imgui/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CMAKE_AR	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_BINARY_DIR	cmake-build/Makefile	/^CMAKE_BINARY_DIR = \/f\/codes\/c\/opengl\/cubic\/cmake-build$/;"	m
CMAKE_C11_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C11_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C17_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C17_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C23_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C23_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C90_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C90_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_C99_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cmake-build/Makefile	/^CMAKE_COMMAND = \/home\/he\/.local\/lib\/python3.9\/site-packages\/cmake\/data\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_GNUCC	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCC	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_CROSSCOMPILING	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	cmake-build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX11_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX14_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX17_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_ABI_COMPILED	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_BYTE_ORDER	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_BYTE_ORDER	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER_ABI	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_ABI	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar-11")$/;"	v
CMAKE_CXX_COMPILER_AR	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_ARG1	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ARG1	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-11")$/;"	v
CMAKE_CXX_COMPILER_RANLIB	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_VERSION	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "11.3.0")$/;"	v
CMAKE_CXX_COMPILER_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "9.3.1")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WORKS	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/11;\/usr\/include\/x86_64-linux/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/9;\/usr\/include\/c++\/9\/x86_6/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/11;\/usr\/lib\/x86_6/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-redhat-linux\/9;\/usr\/lib64;\//;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm)$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v
CMAKE_C_ABI_COMPILED	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_ABI_COMPILED	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_BYTE_ORDER	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_BYTE_ORDER	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v
CMAKE_C_COMPILER	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v
CMAKE_C_COMPILER_ABI	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_ABI	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar-11")$/;"	v
CMAKE_C_COMPILER_AR	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_ARG1	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ARG1	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_C_COMPILER_ID	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_ID_RUN	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LOADED	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_LOADED	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-11")$/;"	v
CMAKE_C_COMPILER_RANLIB	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_VERSION	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "11.3.0")$/;"	v
CMAKE_C_COMPILER_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "9.3.1")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WORKS	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILER_WRAPPER	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_COMPILE_FEATURES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/11\/include;\/usr\//;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-redhat-linux\/9\/include;\/usr/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/11;\/usr\/lib\/x86_64-/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-redhat-linux\/9;\/usr\/lib64;\/li/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LINKER_PREFERENCE	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_LINKER_PREFERENCE	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIMULATE_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	CMakeFiles/Cubic_.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	cmake-build/CMakeFiles/cubic.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	cmake-build/CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_GENERATOR	CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_GENERATOR	cmake-build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	CMakeFiles/Cubic_.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	cmake-build/CMakeFiles/cubic.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	cmake-build/CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_LANGUAGES	CMakeFiles/Cubic_.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	cmake-build/CMakeFiles/cubic.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	cmake-build/CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_DEPEND_INFO_FILES	cmake-build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_FORCE_UNIX_PATHS	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	cmake-build/CMakeFiles/cubic.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	cmake-build/CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	CMakeFiles/Cubic_.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	cmake-build/CMakeFiles/cubic.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	cmake-build/CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-6.2.6-76060206-generic")$/;"	v
CMAKE_HOST_SYSTEM	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.0.9-301.fc30.x86_64")$/;"	v
CMAKE_HOST_SYSTEM_NAME	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_NAME	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "6.2.6-76060206-generic")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.0.9-301.fc30.x86_64")$/;"	v
CMAKE_INSTALL_COMPONENT	cmake-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	cmake-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_COMPONENT	cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	cmake-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_CONFIG_NAME	cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	cmake-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_PREFIX	cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	cmake-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LINKER	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_MAKEFILE_DEPENDS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_DEPENDS	cmake-build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	cmake-build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	cmake-build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MT	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	cmake-build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_OBJDUMP	cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_RANLIB	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/tee\/Desktop\/Projects\/c++\/cubic")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/f\/codes\/c\/opengl\/cubic\/cmake-build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/tee\/Desktop\/Projects\/c++\/cubic")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	cmake-build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/f\/codes\/c\/opengl\/cubic")$/;"	v
CMAKE_SIZEOF_VOID_P	CMakeFiles/3.22.1/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	CMakeFiles/3.22.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	cmake-build/CMakeFiles/3.26.3/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	cmake-build/CMakeFiles/3.26.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/tee\/Desktop\/Projects\/c++\/cubic$/;"	m
CMAKE_SOURCE_DIR	cmake-build/Makefile	/^CMAKE_SOURCE_DIR = \/f\/codes\/c\/opengl\/cubic$/;"	m
CMAKE_SYSTEM	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-6.2.6-76060206-generic")$/;"	v
CMAKE_SYSTEM	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.0.9-301.fc30.x86_64")$/;"	v
CMAKE_SYSTEM_LOADED	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_LOADED	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_NAME	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_PROCESSOR	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	CMakeFiles/3.22.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "6.2.6-76060206-generic")$/;"	v
CMAKE_SYSTEM_VERSION	cmake-build/CMakeFiles/3.26.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.0.9-301.fc30.x86_64")$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	CMakeFiles/Cubic_.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	CMakeFiles/main.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
COLOR_EQUAL	shared.h	/^    #define COLOR_EQUAL(/;"	d
COLUMNS_HIT_RECT_HALF_WIDTH	imgui/imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
COMPILER_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CT_Button	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CUBE_H	include/cube.h	/^#define CUBE_H$/;"	d
CUBIC_BASIC_SOLVER_H_	include/basic_solver.h	/^#define CUBIC_BASIC_SOLVER_H_$/;"	d
CUBIC_H_	include/cubic.h	/^#define CUBIC_H_$/;"	d
CUBIC_UTILS_H_	cubic_utils.h	/^#define CUBIC_UTILS_H_$/;"	d
CXX_STD	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CXX_STD	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_VERSION	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
C_VERSION	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
CalcCustomRectUV	imgui/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcFontSize	include/imgui/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *Ctx; float scale = g.FontBaseSize */;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	imgui/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcListClipping	imgui/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, /;"	f	class:ImGui	typeref:typename:void
CalcMaxPopupHeightFromItemCount	imgui/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	imgui/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	imgui/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcRoutingScore	imgui/imgui.cpp	/^static int CalcRoutingScore(ImGuiWindow* location, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	typeref:typename:int	file:
CalcScrollEdgeSnap	imgui/imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	imgui/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	imgui/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	imgui/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	imgui/imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowNextAutoFitSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	imgui/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapNextLineStartA	imgui/imgui_draw.cpp	/^static inline const char* CalcWordWrapNextLineStartA(const char* text, const char* text_end)$/;"	f	typeref:typename:const char *	file:
CalcWordWrapPositionA	imgui/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	include/imgui/imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	include/imgui/imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	imgui/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	imgui/imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	include/imgui/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
CallbacksChainForAllWindows	imgui/imgui_impl_glfw.cpp	/^    bool                    CallbacksChainForAllWindows;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
CannotSkipItemsQueue	include/imgui/imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
Capacity	include/imgui/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	include/imgui/imgui.h	/^    static inline void  CaptureKeyboardFromApp(bool want_capture_keyboard = true)           { Se/;"	f	namespace:ImGui	typeref:typename:void
CaptureMouseFromApp	include/imgui/imgui.h	/^    static inline void  CaptureMouseFromApp(bool want_capture_mouse = true)                 { Se/;"	f	namespace:ImGui	typeref:typename:void
CellPadding	include/imgui/imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CellPaddingX	include/imgui/imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders$/;"	m	struct:ImGuiTable	typeref:typename:float
CellPaddingY	include/imgui/imgui_internal.h	/^    float                       CellPaddingY;$/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	include/imgui/imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	include/imgui/imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
ChannelsCount	imgui/imgui_tables.cpp	/^        int             ChannelsCount;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	imgui/imgui_tables.cpp	/^        ImBitArrayPtr   ChannelsMask;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArrayPtr	file:
ChannelsMerge	include/imgui/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	include/imgui/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	include/imgui/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
Char	include/imgui/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
CheckProgram	imgui/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	imgui/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
Checkbox	imgui/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	include/imgui/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildCount	imgui/imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildId	include/imgui/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	imgui/imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildRounding	include/imgui/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	imgui/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	include/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	include/imgui/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	include/imgui/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleTessellationMaxError	include/imgui/imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
ClampWindowPos	imgui/imgui.cpp	/^static inline void ClampWindowPos(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
Clear	imgui/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	imgui/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	include/imgui/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	include/imgui/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	include/imgui/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	include/imgui/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	include/imgui/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	include/imgui/imgui.h	/^    void Clear()    { memset(this, 0, sizeof(*this)); }     \/\/ The ImDrawList are owned by ImG/;"	f	struct:ImDrawData	typeref:typename:void
Clear	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARPROC                    Clear;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLCLEARPROC
Clear	include/imgui/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	include/imgui/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	include/imgui/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -/;"	f	struct:ImGuiKeyRoutingTable	typeref:typename:void
Clear	include/imgui/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].r/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
Clear	include/imgui/imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; DistBox = DistCente/;"	f	struct:ImGuiNavItemData	typeref:typename:void
ClearActiveID	imgui/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	include/imgui/imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	include/imgui/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	include/imgui/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	include/imgui/imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearColor	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARCOLORPROC               ClearColor;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLCLEARCOLORPROC
ClearDragDrop	imgui/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearFlags	include/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; } \/\/ Also cleared manua/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	include/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	include/imgui/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	include/imgui/imgui_internal.h	/^    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }$/;"	f	struct:ImGuiInputTextDeactivatedState	typeref:typename:void
ClearFreeMemory	include/imgui/imgui_internal.h	/^    void ClearFreeMemory()          { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].c/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
ClearIniSettings	imgui/imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	imgui/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	imgui/imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearLog	imgui/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	imgui/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	include/imgui/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearSelection	include/imgui/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	include/imgui/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearWindowSettings	imgui/imgui.cpp	/^void ImGui::ClearWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:void
ClientApi	imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi           ClientApi;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GlfwClientApi	file:
ClipRect	imgui/imgui_tables.cpp	/^        ImRect          ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRect	include/imgui/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	include/imgui/imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipRect	include/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	include/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	include/imgui/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRectFullscreen	include/imgui/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	include/imgui/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	include/imgui/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	include/imgui/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardUserData	include/imgui/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
ClipperTempData	include/imgui/imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	include/imgui/imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	imgui/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	imgui/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	imgui/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	imgui/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	imgui/imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	imgui/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	include/imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	include/imgui/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList /;"	m	struct:ImDrawData	typeref:typename:ImDrawList **
CmdListsCount	include/imgui/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	include/imgui/imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
Col	imgui/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
Col	include/imgui/imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	imgui/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
Collapsed	include/imgui/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	include/imgui/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	include/imgui/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	include/imgui/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	imgui/imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	imgui/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	include/imgui/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	imgui/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	imgui/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	imgui/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	imgui/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditCurrentID	include/imgui/imgui_internal.h	/^    ImGuiID                 ColorEditCurrentID;                 \/\/ Set temporarily while insid/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditOptions	include/imgui/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	imgui/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreH	imgui/imgui_widgets.cpp	/^static void ColorEditRestoreH(const float* col, float* H)$/;"	f	typeref:typename:void	file:
ColorEditRestoreHS	imgui/imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorEditSavedColor	include/imgui/imgui_internal.h	/^    ImU32                   ColorEditSavedColor;                \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditSavedHue	include/imgui/imgui_internal.h	/^    float                   ColorEditSavedHue;                  \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditSavedID	include/imgui/imgui_internal.h	/^    ImGuiID                 ColorEditSavedID;                   \/\/ ID we are saving\/restoring/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditSavedSat	include/imgui/imgui_internal.h	/^    float                   ColorEditSavedSat;                  \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorPicker3	imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	imgui/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	include/imgui/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorStack;                         \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	imgui/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colored	include/imgui/imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colors	include/imgui/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Column	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
ColumnIndex	include/imgui/imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	include/imgui/imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
Columns	imgui/imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
Columns	include/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	include/imgui/imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
ColumnsAutoFitWidth	include/imgui/imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	include/imgui/imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	include/imgui/imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsMinSpacing	include/imgui/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsNames	include/imgui/imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	include/imgui/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	include/imgui/imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	include/imgui/imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	include/imgui/imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
Commands	imgui/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CompareWithContextState	imgui/imgui.cpp	/^void ImGuiStackSizes::CompareWithContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
CompareWithSortSpecs	imgui/imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anone28545ff0111::MyItem	typeref:typename:int IMGUI_CDECL	file:
CompileShader	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLCOMPILESHADERPROC            CompileShader;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLCOMPILESHADERPROC
ConfigData	include/imgui/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	include/imgui/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	include/imgui/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDebugBeginReturnValueLoop	include/imgui/imgui.h	/^    bool        ConfigDebugBeginReturnValueLoop; \/\/ = false         \/\/ Some calls to Begin()/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugBeginReturnValueOnce	include/imgui/imgui.h	/^    bool        ConfigDebugBeginReturnValueOnce; \/\/ = false         \/\/ First-time calls to B/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDragClickToInputText	include/imgui/imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	include/imgui/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	include/imgui/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTextEnterKeepActive	include/imgui/imgui.h	/^    bool        ConfigInputTextEnterKeepActive; \/\/ = false          \/\/ [BETA] Pressing Enter/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	include/imgui/imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	include/imgui/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	include/imgui/imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigNavWindowingKeyNext	include/imgui/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyNext;          \/\/ = ImGuiMod_Ctrl | ImGuiKey_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigNavWindowingKeyPrev	include/imgui/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyPrev;          \/\/ = ImGuiMod_Ctrl | ImGuiMod_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigWindowsMoveFromTitleBarOnly	include/imgui/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	include/imgui/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	include/imgui/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	include/imgui/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	include/imgui/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	include/imgui/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContentMaxXFrozen	include/imgui/imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	include/imgui/imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	include/imgui/imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	include/imgui/imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	include/imgui/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	include/imgui/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	include/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	include/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	include/imgui/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	include/imgui/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextPopupColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ConvertShortcutMod	include/imgui/imgui_internal.h	/^    inline ImGuiKeyChord    ConvertShortcutMod(ImGuiKeyChord key_chord)                 { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyChord
ConvertSingleModFlagToKey	include/imgui/imgui_internal.h	/^    inline ImGuiKey         ConvertSingleModFlagToKey(ImGuiContext* ctx, ImGuiKey key)$/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
CopyToClipboardLastTime	include/imgui/imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	include/imgui/imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiStackTool	typeref:typename:bool
CornerPosN	imgui/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	include/imgui/imgui_internal.h	/^    ImU32           Count;      \/\/ 1+$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Count	include/imgui/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CountGrep	include/imgui/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
Create	include/imgui/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	imgui/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	imgui/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateProgram	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLCREATEPROGRAMPROC            CreateProgram;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLCREATEPROGRAMPROC
CreateShader	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLCREATESHADERPROC             CreateShader;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLCREATESHADERPROC
Ctx	include/imgui/imgui.h	/^    ImGuiContext*       Ctx;            \/\/ Parent UI context$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiContext *
Ctx	include/imgui/imgui.h	/^    ImGuiContext*   Ctx;                \/\/ Parent UI context$/;"	m	struct:ImGuiListClipper	typeref:typename:ImGuiContext *
Ctx	include/imgui/imgui.h	/^    ImGuiContext* Ctx;                              \/\/ Parent UI context (needs to be set expl/;"	m	struct:ImGuiIO	typeref:typename:ImGuiContext *
Ctx	include/imgui/imgui_internal.h	/^    ImGuiContext*           Ctx;                                \/\/ Parent UI context (needs to/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiContext *
Ctx	include/imgui/imgui_internal.h	/^    ImGuiContext*           Ctx;                    \/\/ parent UI context (needs to be set expl/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiContext *
Cube	include/cube.h	/^Cube::Cube(std::vector<std::vector<float>> _colors) {$/;"	f	class:Cube
Cube	include/cube.h	/^class Cube$/;"	c
Cubic	CMakeLists.txt	/^project(Cubic)$/;"	p
Cubic	include/cubic.h	/^Cubic::Cubic() {$/;"	f	class:Cubic
Cubic	include/cubic.h	/^class Cubic$/;"	c
Cubic	readme.md	/^# Cubic$/;"	c
CurLenA	include/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	include/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	include/imgui/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	include/imgui/imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	include/imgui/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	include/imgui/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	include/imgui/imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	include/imgui/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	include/imgui/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	include/imgui/imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	include/imgui/imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentFocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID                 CurrentFocusScopeId;                \/\/ == g.FocusScopeStack.back()$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
CurrentItemFlags	include/imgui/imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                   \/\/ == g.ItemFlagsStack.back()$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentRow	include/imgui/imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentSize	include/imgui/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	include/imgui/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	include/imgui/imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	include/imgui/imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	include/imgui/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	include/imgui/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	include/imgui/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	include/imgui/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	include/imgui/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	include/imgui/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	include/imgui/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	include/imgui/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	include/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	include/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	include/imgui/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	include/imgui/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	imgui/imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRects	include/imgui/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
D	include/cubic.h	/^void Cubic::D() {$/;"	f	class:Cubic	typeref:typename:void
DC	include/imgui/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEBUG_LOCATE_ITEM_COLOR	imgui/imgui.cpp	/^static const ImU32 DEBUG_LOCATE_ITEM_COLOR = IM_COL32(0, 255, 0, 255);  \/\/ Green$/;"	v	typeref:typename:const ImU32	file:
DEC	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEC	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DO_OP	include/basic_solver.h	/^#define DO_OP(/;"	d
DO_OPS	include/basic_solver.h	/^#define DO_OPS(/;"	d
DRAGDROP_HOLD_TO_OPEN_TIMER	imgui/imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	imgui/imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
D_inv	include/cubic.h	/^void Cubic::D_inv() {$/;"	f	class:Cubic	typeref:typename:void
Data	include/imgui/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	include/imgui/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	include/imgui/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	include/imgui/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Can fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeTempStorage	typeref:typename:ImU8[8]
Data	include/imgui/imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataEnd	include/imgui/imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataFrameCount	include/imgui/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	include/imgui/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	include/imgui/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataType	include/imgui/imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	imgui/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	imgui/imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	imgui/imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	imgui/imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	imgui/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	imgui/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	imgui/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugBeginReturnValueCullDepth	include/imgui/imgui_internal.h	/^    ImS8                    DebugBeginReturnValueCullDepth;     \/\/ Cycle between 0..9 then wra/;"	m	struct:ImGuiContext	typeref:typename:ImS8
DebugCheckVersionAndDataLayout	imgui/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawItemRect	include/imgui/imgui_internal.h	/^    inline void             DebugDrawItemRect(ImU32 col = IM_COL32(255,0,0,255))    { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugHookIdInfo	imgui/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	imgui/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	include/imgui/imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerActive	include/imgui/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	include/imgui/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerMouseButton	include/imgui/imgui_internal.h	/^    ImU8                    DebugItemPickerMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateFrames	include/imgui/imgui_internal.h	/^    ImU8                    DebugLocateFrames;                  \/\/ For DebugLocateItemOnHover(/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateId	include/imgui/imgui_internal.h	/^    ImGuiID                 DebugLocateId;                      \/\/ Storage for DebugLocateItem/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLocateItem	imgui/imgui.cpp	/^void ImGui::DebugLocateItem(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemOnHover	imgui/imgui.cpp	/^void ImGui::DebugLocateItemOnHover(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemResolveWithLastItem	imgui/imgui.cpp	/^void ImGui::DebugLocateItemResolveWithLastItem()$/;"	f	class:ImGui	typeref:typename:void
DebugLog	imgui/imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLog	imgui/imgui.cpp	/^void ImGui::DebugLog(const char*, ...) {}$/;"	f	class:ImGui	typeref:typename:void
DebugLogBuf	include/imgui/imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogClipperAutoDisableFrames	include/imgui/imgui_internal.h	/^    ImU8                    DebugLogClipperAutoDisableFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLogFlags	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogIndex	include/imgui/imgui_internal.h	/^    ImGuiTextIndex          DebugLogIndex;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextIndex
DebugLogV	imgui/imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugLogV	imgui/imgui.cpp	/^void ImGui::DebugLogV(const char*, va_list) {}$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	include/imgui/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	imgui/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	imgui/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	imgui/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	imgui/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	imgui/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, const ImDrawList* draw_list, const char* labe/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	imgui/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	imgui/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	imgui/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	imgui/imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	imgui/imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	imgui/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	imgui/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	imgui/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	imgui/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	imgui/imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	imgui/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	imgui/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	imgui/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	imgui/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	imgui/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	imgui/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugPrintInputEvent	imgui/imgui.cpp	/^static void DebugPrintInputEvent(const char* prefix, const ImGuiInputEvent* e)$/;"	f	typeref:typename:void	file:
DebugRenderKeyboardPreview	imgui/imgui.cpp	/^void ImGui::DebugRenderKeyboardPreview(ImDrawList* draw_list)$/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	imgui/imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugStackTool	include/imgui/imgui_internal.h	/^    ImGuiStackTool          DebugStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStackTool
DebugStartItemPicker	include/imgui/imgui_internal.h	/^    inline void             DebugStartItemPicker()                                  { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugTextEncoding	imgui/imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
DecoInnerSizeX1	include/imgui/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoInnerSizeY1	include/imgui/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX1	include/imgui/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX2	include/imgui/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY1	include/imgui/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY2	include/imgui/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
Decode85	imgui/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	imgui/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteBuffers	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEBUFFERSPROC            DeleteBuffers;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDELETEBUFFERSPROC
DeleteChars	imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
DeleteProgram	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEPROGRAMPROC            DeleteProgram;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDELETEPROGRAMPROC
DeleteShader	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDELETESHADERPROC             DeleteShader;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDELETESHADERPROC
DeleteTextures	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDELETETEXTURESPROC           DeleteTextures;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDELETETEXTURESPROC
DeleteVertexArrays	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEVERTEXARRAYSPROC       DeleteVertexArrays;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
Delivery	include/imgui/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	include/imgui/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Desc	include/imgui/imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
Descent	include/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DesiredSize	include/imgui/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	imgui/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DetachShader	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDETACHSHADERPROC             DetachShader;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDETACHSHADERPROC
DimBgRatio	include/imgui/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	imgui/imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	include/imgui/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
Disable	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEPROC                  Disable;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDISABLEPROC
DisableInputsFrames	include/imgui/imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisableVertexAttribArray	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
DisabledAlpha	include/imgui/imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisabledAlphaBackup	include/imgui/imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledStackSize	include/imgui/imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
DisplayContents	imgui/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	imgui/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayEnd	include/imgui/imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	include/imgui/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayNode	imgui/imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	include/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayPos	include/imgui/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplayRect	include/imgui/imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle (only if ImGuiItemStatusF/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DisplaySafeAreaPadding	include/imgui/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	include/imgui/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	include/imgui/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	include/imgui/imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	include/imgui/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	include/imgui/imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	include/imgui/imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	include/imgui/imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	imgui/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	imgui/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	imgui/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	imgui/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	imgui/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	include/imgui/imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
Down	include/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DownDuration	include/imgui/imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	include/imgui/imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DragBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	imgui/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	include/imgui/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	include/imgui/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	include/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	include/imgui/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	include/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	include/imgui/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	include/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	include/imgui/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	include/imgui/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	include/imgui/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	include/imgui/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	include/imgui/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	include/imgui/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	include/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	include/imgui/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetId	include/imgui/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	include/imgui/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	include/imgui/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	include/imgui/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	imgui/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	imgui/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	include/imgui/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	imgui/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
DrawChannelCurrent	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	include/imgui/imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawDataBuilder	include/imgui/imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	include/imgui/imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawElements	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSPROC             DrawElements;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDRAWELEMENTSPROC
DrawElementsBaseVertex	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSBASEVERTEXPROC   DrawElementsBaseVertex;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
DrawList	include/imgui/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	include/imgui/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	include/imgui/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawLists	include/imgui/imgui_internal.h	/^    ImDrawList*         DrawLists[2];           \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
DrawListsLastFrame	include/imgui/imgui_internal.h	/^    int                 DrawListsLastFrame[2];  \/\/ Last frame number the background (0) and fo/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
DrawSplitter	include/imgui/imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	include/imgui/imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DstFont	include/imgui/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	imgui/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	imgui/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	include/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
EQUALS	Makefile	/^EQUALS = =$/;"	m
EQUALS	cmake-build/Makefile	/^EQUALS = =$/;"	m
EditTableColumnsFlags	imgui/imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	imgui/imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	include/imgui/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ElemCount	include/imgui/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
ElementsHandle	imgui/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
EllipsisChar	include/imgui/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = '...'\/'.'\/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	include/imgui/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EllipsisCharCount	include/imgui/imgui.h	/^    short                       EllipsisCharCount;  \/\/ 1     \/\/ out \/\/ 1 or 3$/;"	m	struct:ImFont	typeref:typename:short
EllipsisCharStep	include/imgui/imgui.h	/^    float                       EllipsisCharStep;   \/\/ 4     \/\/ out               \/\/ Step /;"	m	struct:ImFont	typeref:typename:float
EllipsisWidth	include/imgui/imgui.h	/^    float                       EllipsisWidth;      \/\/ 4     \/\/ out               \/\/ Width$/;"	m	struct:ImFont	typeref:typename:float
EmitItem	include/imgui/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	imgui/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	include/imgui/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
Enable	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEPROC                   Enable;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLENABLEPROC
EnableVertexAttribArray	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEVERTEXATTRIBARRAYPROC  EnableVertexAttribArray;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
Enabled	imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
EnabledMaskByDisplayOrder	include/imgui/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
EnabledMaskByIndex	include/imgui/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
End	imgui/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	imgui/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	imgui/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	imgui/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui	typeref:typename:void
EndColumns	imgui/imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	imgui/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	imgui/imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	imgui/imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	imgui/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	imgui/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	imgui/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	imgui/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	imgui/imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	imgui/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	imgui/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	imgui/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndOffset	include/imgui/imgui_internal.h	/^    int             EndOffset = 0;                          \/\/ Because we don't own text buffe/;"	m	struct:ImGuiTextIndex	typeref:typename:int
EndPopup	imgui/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	imgui/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	imgui/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	imgui/imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	imgui/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
Entries	include/imgui/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   Entries;$/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EntriesNext	include/imgui/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   EntriesNext;                    \/\/ Double-buffer to avoid /;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EnumDesc	imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCheckEndFrameRecover	imgui/imgui.cpp	/^void    ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	imgui/imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndWindowRecover	imgui/imgui.cpp	/^void    ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckNewFrameSanityChecks	imgui/imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckUsingSetCursorPosToExtendParentBoundaries	imgui/imgui.cpp	/^void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()$/;"	f	class:ImGui	typeref:typename:void
EventChar	include/imgui/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	include/imgui/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventId	include/imgui/imgui_internal.h	/^    ImU32                           EventId;        \/\/ Unique, sequential increasing integer t/;"	m	struct:ImGuiInputEvent	typeref:typename:ImU32
EventKey	include/imgui/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	imgui/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	imgui/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	imgui/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	imgui/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	imgui/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	imgui/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	imgui/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	include/imgui/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	include/imgui/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
F	include/cubic.h	/^void Cubic::F() {$/;"	f	class:Cubic	typeref:typename:void
FMADD_LANE	include/glm/simd/neon.h	/^#	define FMADD_LANE(/;"	d
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	imgui/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	imgui/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
F_inv	include/cubic.h	/^void Cubic::F_inv() {$/;"	f	class:Cubic	typeref:typename:void
FallbackAdvanceX	include/imgui/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	include/imgui/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	include/imgui/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Filter	imgui/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	imgui/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterImGuiLetters	imgui/imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	include/imgui/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWheelingWindow	imgui/imgui.cpp	/^static ImGuiWindow* FindBestWheelingWindow(const ImVec2& wheel)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindBestWindowPosForPopup	imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	imgui/imgui.cpp	/^static ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
FindBottomMostVisibleWindowWithinBeginStack	imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	imgui/imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindGlyph	imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	imgui/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindLatestInputEvent	imgui/imgui.cpp	/^static ImGuiInputEvent* FindLatestInputEvent(ImGuiContext* ctx, ImGuiInputEventType type, int ar/;"	f	typeref:typename:ImGuiInputEvent *	file:
FindOrCreateColumns	imgui/imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindRenderedTextEnd	imgui/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	imgui/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	imgui/imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	imgui/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	imgui/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettingsByID	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindWindowSettingsByWindow	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FixRectCornerFlags	imgui/imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
Flags	include/imgui/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	include/imgui/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	include/imgui/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	include/imgui/imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags. may be used /;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;                  \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	include/imgui/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenIntoSingleLayer	imgui/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder	typeref:typename:void
Floor	include/imgui/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_FLOOR(Min.x); Min.y = IM_FLOOR(/;"	f	struct:ImRect	typeref:typename:void
Flush	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLFLUSHPROC                    Flush;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLFLUSHPROC
FocusOrder	include/imgui/imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID                     FocusScopeId;   \/\/ Set by SetNextItemMultiSelectData() (!= 0 s/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       FocusScopeStack;                    \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
FocusTopMostWindowUnderOne	imgui/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	imgui/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
FocusableItemRegister	include/imgui/imgui_internal.h	/^    inline bool     FocusableItemRegister(ImGuiWindow* window, ImGuiID id)              { IM_ASS/;"	f	namespace:ImGui	typeref:typename:bool
FocusableItemUnregister	include/imgui/imgui_internal.h	/^    inline void     FocusableItemUnregister(ImGuiWindow* window)                        { IM_ASS/;"	f	namespace:ImGui	typeref:typename:void
Focused	include/imgui/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	include/imgui/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	include/imgui/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	include/imgui/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
FontAllowUserScaling	include/imgui/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	include/imgui/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	include/imgui/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilderFlags	include/imgui/imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	include/imgui/imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	include/imgui/imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontBuilder_Build	include/imgui/imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontData	include/imgui/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	include/imgui/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	include/imgui/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	include/imgui/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	include/imgui/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	imgui/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontNo	include/imgui/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	include/imgui/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	include/imgui/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	include/imgui/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	include/imgui/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontTexture	imgui/imgui_impl_opengl3.cpp	/^    GLuint          FontTexture;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
FontWindowScale	include/imgui/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	include/imgui/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	include/imgui/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForceDisplayRangeByIndices	imgui/imgui.cpp	/^void ImGuiListClipper::ForceDisplayRangeByIndices(int item_min, int item_max)$/;"	f	class:ImGuiListClipper	typeref:typename:void
FrameBorderSize	include/imgui/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameCount	include/imgui/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountEnded	include/imgui/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	include/imgui/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramePadding	include/imgui/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	include/imgui/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FrameRounding	include/imgui/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FramebufferScale	include/imgui/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	include/imgui/imgui.h	/^    float       Framerate;                          \/\/ Estimate of application framerate (roll/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	include/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrame[60];           \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[60]
FramerateSecPerFrameAccum	include/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	include/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	include/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
FreeIdx	include/imgui/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	include/imgui/imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	include/imgui/imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	imgui/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	imgui/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	imgui/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	imgui/imgui_demo.cpp	/^        struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_st/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	imgui/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	imgui/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	imgui/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GENTYPE	include/glm/detail/qualifier.hpp	/^		static const genTypeEnum GENTYPE = GENTYPE_MAT;$/;"	m	struct:glm::detail::genTypeTrait	typeref:typename:const genTypeEnum
GENTYPE	include/glm/detail/type_quat.inl	/^		static const genTypeEnum GENTYPE = GENTYPE_QUAT;$/;"	m	struct:glm::detail::genTypeTrait	typeref:typename:const genTypeEnum	file:
GENTYPE_MAT	include/glm/detail/qualifier.hpp	/^		GENTYPE_MAT,$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_QUAT	include/glm/detail/qualifier.hpp	/^		GENTYPE_QUAT$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_VEC	include/glm/detail/qualifier.hpp	/^		GENTYPE_VEC,$/;"	e	enum:glm::detail::genTypeEnum
GImAllocatorAllocFunc	imgui/imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	imgui/imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	imgui/imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	imgui/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	imgui/imgui_demo.cpp	/^ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	imgui/imgui_demo.cpp	/^void*                               GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GKeyNames	imgui/imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GL3WGetProcAddressProc	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GL3WglProc (*GL3WGetProcAddressProc)(const char *proc);$/;"	t	typeref:typename:GL3WglProc (*)(const char * proc)
GL3WProcs	include/imgui/imgui_impl_opengl3_loader.h	/^union GL3WProcs {$/;"	u
GL3W_API	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL3W_API$/;"	d
GL3W_ERROR_INIT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_INIT /;"	d
GL3W_ERROR_LIBRARY_OPEN	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_LIBRARY_OPEN /;"	d
GL3W_ERROR_OPENGL_VERSION	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_OPENGL_VERSION /;"	d
GL3W_OK	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL3W_OK /;"	d
GL3WglGetProcAddr	include/imgui/imgui_impl_opengl3_loader.h	/^typedef PROC(__stdcall* GL3WglGetProcAddr)(LPCSTR);$/;"	t	typeref:typename:PROC (__stdcall *)(LPCSTR)
GL3WglProc	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (*GL3WglProc)(void);$/;"	t	typeref:typename:void (*)(void)
GLAD_GL_VERSION_1_0	glad.c	/^int GLAD_GL_VERSION_1_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_0	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_0;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_1_1	glad.c	/^int GLAD_GL_VERSION_1_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_1	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_1;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_1_2	glad.c	/^int GLAD_GL_VERSION_1_2 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_2	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_2;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_1_3	glad.c	/^int GLAD_GL_VERSION_1_3 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_3	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_3;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_1_4	glad.c	/^int GLAD_GL_VERSION_1_4 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_4	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_4;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_1_5	glad.c	/^int GLAD_GL_VERSION_1_5 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_5	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_1_5;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_2_0	glad.c	/^int GLAD_GL_VERSION_2_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_2_0	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_0;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_2_1	glad.c	/^int GLAD_GL_VERSION_2_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_2_1	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_2_1;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_3_0	glad.c	/^int GLAD_GL_VERSION_3_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_0	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_0;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_3_1	glad.c	/^int GLAD_GL_VERSION_3_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_1	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_1;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_3_2	glad.c	/^int GLAD_GL_VERSION_3_2 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_2	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_2;$/;"	v	typeref:typename:GLAPI int
GLAD_GL_VERSION_3_3	glad.c	/^int GLAD_GL_VERSION_3_3 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_3	include/glad/glad.h	/^GLAPI int GLAD_GL_VERSION_3_3;$/;"	v	typeref:typename:GLAPI int
GLADloadproc	include/glad/glad.h	/^typedef void* (* GLADloadproc)(const char *name);$/;"	t	typeref:typename:void * (*)(const char * name)
GLAPI	include/glad/glad.h	/^#     define GLAPI /;"	d
GLAPI	include/glad/glad.h	/^#   define GLAPI /;"	d
GLAPI	include/glad/glad.h	/^#  define GLAPI /;"	d
GLAPI	include/imgui/imgui_impl_opengl3_loader.h	/^#define GLAPI /;"	d
GLAPIENTRY	include/glad/glad.h	/^#define GLAPIENTRY /;"	d
GLDEBUGPROC	include/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsize/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCAMD	include/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length/;"	t	typeref:typename:void (APIENTRY *)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar * message,void * userParam)
GLDEBUGPROCARB	include/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsi/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCARB	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLs/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCKHR	include/glad/glad.h	/^typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsi/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLFW_EXPOSE_NATIVE_COCOA	imgui/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	d	file:
GLFW_EXPOSE_NATIVE_WIN32	imgui/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_HAS_GAMEPAD_API	imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GAMEPAD_API /;"	d	file:
GLFW_HAS_GETERROR	imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETERROR /;"	d	file:
GLFW_HAS_GETKEYNAME	imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETKEYNAME /;"	d	file:
GLFW_HAS_NEW_CURSORS	imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_NEW_CURSORS /;"	d	file:
GLFW_VERSION_COMBINED	imgui/imgui_impl_glfw.cpp	/^#define GLFW_VERSION_COMBINED /;"	d	file:
GLM_ALIGNED_TYPEDEF	include/glm/detail/setup.hpp	/^#	define GLM_ALIGNED_TYPEDEF(/;"	d
GLM_ARCH	include/glm/simd/platform.h	/^#		define GLM_ARCH (GLM_ARCH_/;"	d
GLM_ARCH	include/glm/simd/platform.h	/^#		define GLM_ARCH (GLM_ARCH_ARM | GLM_ARCH_/;"	d
GLM_ARCH	include/glm/simd/platform.h	/^#	define GLM_ARCH (GLM_ARCH_/;"	d
GLM_ARCH	include/glm/simd/platform.h	/^#	define GLM_ARCH GLM_ARCH_/;"	d
GLM_ARCH_ARM	include/glm/simd/platform.h	/^#define GLM_ARCH_ARM		(GLM_ARCH_ARM_/;"	d
GLM_ARCH_ARMV8	include/glm/simd/platform.h	/^#define GLM_ARCH_ARMV8		(GLM_ARCH_NEON_BIT | GLM_ARCH_SIMD_BIT | GLM_ARCH_ARM | GLM_ARCH_ARMV8_/;"	d
GLM_ARCH_ARMV8_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_ARMV8_BIT /;"	d
GLM_ARCH_ARM_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_ARM_BIT	/;"	d
GLM_ARCH_AVX	include/glm/simd/platform.h	/^#define GLM_ARCH_AVX		(GLM_ARCH_AVX_/;"	d
GLM_ARCH_AVX2	include/glm/simd/platform.h	/^#define GLM_ARCH_AVX2		(GLM_ARCH_AVX2_/;"	d
GLM_ARCH_AVX2_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_AVX2_BIT	/;"	d
GLM_ARCH_AVX_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_AVX_BIT	/;"	d
GLM_ARCH_MIPS	include/glm/simd/platform.h	/^#define GLM_ARCH_MIPS		(GLM_ARCH_MIPS_/;"	d
GLM_ARCH_MIPS_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_MIPS_BIT	/;"	d
GLM_ARCH_NEON	include/glm/simd/platform.h	/^#define GLM_ARCH_NEON		(GLM_ARCH_NEON_/;"	d
GLM_ARCH_NEON_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_NEON_BIT	/;"	d
GLM_ARCH_PPC	include/glm/simd/platform.h	/^#define GLM_ARCH_PPC		(GLM_ARCH_PPC_/;"	d
GLM_ARCH_PPC_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_PPC_BIT	/;"	d
GLM_ARCH_SIMD_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SIMD_BIT	/;"	d
GLM_ARCH_SSE	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE		(GLM_ARCH_SSE_/;"	d
GLM_ARCH_SSE2	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE2		(GLM_ARCH_SSE2_/;"	d
GLM_ARCH_SSE2_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE2_BIT	/;"	d
GLM_ARCH_SSE3	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE3		(GLM_ARCH_SSE3_/;"	d
GLM_ARCH_SSE3_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE3_BIT	/;"	d
GLM_ARCH_SSE41	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE41		(GLM_ARCH_SSE41_/;"	d
GLM_ARCH_SSE41_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE41_BIT	/;"	d
GLM_ARCH_SSE42	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE42		(GLM_ARCH_SSE42_/;"	d
GLM_ARCH_SSE42_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE42_BIT	/;"	d
GLM_ARCH_SSE_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSE_BIT	/;"	d
GLM_ARCH_SSSE3	include/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3		(GLM_ARCH_SSSE3_/;"	d
GLM_ARCH_SSSE3_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3_BIT	/;"	d
GLM_ARCH_UNKNOWN	include/glm/simd/platform.h	/^#define GLM_ARCH_UNKNOWN	/;"	d
GLM_ARCH_X86	include/glm/simd/platform.h	/^#define GLM_ARCH_X86		(GLM_ARCH_X86_/;"	d
GLM_ARCH_X86_BIT	include/glm/simd/platform.h	/^#define GLM_ARCH_X86_BIT	/;"	d
GLM_CLIP_CONTROL_LH_BIT	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_BIT	/;"	d
GLM_CLIP_CONTROL_LH_NO	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_NO /;"	d
GLM_CLIP_CONTROL_LH_ZO	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_ZO /;"	d
GLM_CLIP_CONTROL_NO_BIT	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_NO_BIT	/;"	d
GLM_CLIP_CONTROL_RH_BIT	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_BIT	/;"	d
GLM_CLIP_CONTROL_RH_NO	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_NO /;"	d
GLM_CLIP_CONTROL_RH_ZO	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_ZO /;"	d
GLM_CLIP_CONTROL_ZO_BIT	include/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_ZO_BIT	/;"	d
GLM_COMPILER	include/glm/simd/platform.h	/^#			define GLM_COMPILER GLM_COMPILER_/;"	d
GLM_COMPILER	include/glm/simd/platform.h	/^#		define GLM_COMPILER GLM_COMPILER_/;"	d
GLM_COMPILER	include/glm/simd/platform.h	/^#	define GLM_COMPILER GLM_COMPILER_/;"	d
GLM_COMPILER_CLANG	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG	/;"	d
GLM_COMPILER_CLANG34	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG34	/;"	d
GLM_COMPILER_CLANG35	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG35	/;"	d
GLM_COMPILER_CLANG36	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG36	/;"	d
GLM_COMPILER_CLANG37	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG37	/;"	d
GLM_COMPILER_CLANG38	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG38	/;"	d
GLM_COMPILER_CLANG39	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG39	/;"	d
GLM_COMPILER_CLANG40	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG40	/;"	d
GLM_COMPILER_CLANG41	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG41	/;"	d
GLM_COMPILER_CLANG42	include/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG42	/;"	d
GLM_COMPILER_CUDA	include/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA	/;"	d
GLM_COMPILER_CUDA75	include/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA75	/;"	d
GLM_COMPILER_CUDA80	include/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA80	/;"	d
GLM_COMPILER_CUDA90	include/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA90	/;"	d
GLM_COMPILER_GCC	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC	/;"	d
GLM_COMPILER_GCC46	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC46	/;"	d
GLM_COMPILER_GCC47	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC47	/;"	d
GLM_COMPILER_GCC48	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC48	/;"	d
GLM_COMPILER_GCC49	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC49	/;"	d
GLM_COMPILER_GCC5	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC5	/;"	d
GLM_COMPILER_GCC6	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC6	/;"	d
GLM_COMPILER_GCC7	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC7	/;"	d
GLM_COMPILER_GCC8	include/glm/simd/platform.h	/^#define GLM_COMPILER_GCC8	/;"	d
GLM_COMPILER_INTEL	include/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL	/;"	d
GLM_COMPILER_INTEL14	include/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL14	/;"	d
GLM_COMPILER_INTEL15	include/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL15	/;"	d
GLM_COMPILER_INTEL16	include/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL16	/;"	d
GLM_COMPILER_INTEL17	include/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL17	/;"	d
GLM_COMPILER_SYCL	include/glm/simd/platform.h	/^#define GLM_COMPILER_SYCL	/;"	d
GLM_COMPILER_UNKNOWN	include/glm/simd/platform.h	/^#define GLM_COMPILER_UNKNOWN	/;"	d
GLM_COMPILER_VC	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC	/;"	d
GLM_COMPILER_VC12	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC12	/;"	d
GLM_COMPILER_VC14	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC14	/;"	d
GLM_COMPILER_VC15	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15	/;"	d
GLM_COMPILER_VC15_3	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_3	/;"	d
GLM_COMPILER_VC15_5	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_5	/;"	d
GLM_COMPILER_VC15_6	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_6	/;"	d
GLM_COMPILER_VC15_7	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_7	/;"	d
GLM_COMPILER_VC15_8	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_8	/;"	d
GLM_COMPILER_VC15_9	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_9	/;"	d
GLM_COMPILER_VC16	include/glm/simd/platform.h	/^#define GLM_COMPILER_VC16	/;"	d
GLM_CONFIG_ALIGNED_GENTYPES	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ALIGNED_GENTYPES /;"	d
GLM_CONFIG_ANONYMOUS_STRUCT	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ANONYMOUS_STRUCT /;"	d
GLM_CONFIG_CLIP_CONTROL	include/glm/detail/setup.hpp	/^#		define GLM_CONFIG_CLIP_CONTROL /;"	d
GLM_CONFIG_CONSTEXP	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CONSTEXP /;"	d
GLM_CONFIG_CTOR_INIT	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CTOR_INIT /;"	d
GLM_CONFIG_DEFAULTED_FUNCTIONS	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_DEFAULTED_FUNCTIONS /;"	d
GLM_CONFIG_LENGTH_TYPE	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_LENGTH_TYPE	/;"	d
GLM_CONFIG_NULLPTR	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_NULLPTR /;"	d
GLM_CONFIG_PRECISION_BOOL	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_BOOL	/;"	d
GLM_CONFIG_PRECISION_DOUBLE	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_DOUBLE	/;"	d
GLM_CONFIG_PRECISION_FLOAT	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_FLOAT	/;"	d
GLM_CONFIG_PRECISION_INT	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_INT	/;"	d
GLM_CONFIG_PRECISION_UINT	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_UINT	/;"	d
GLM_CONFIG_SIMD	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SIMD /;"	d
GLM_CONFIG_SWIZZLE	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SWIZZLE /;"	d
GLM_CONFIG_UNRESTRICTED_GENTYPE	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_UNRESTRICTED_GENTYPE /;"	d
GLM_CONFIG_XYZW_ONLY	include/glm/detail/setup.hpp	/^#	define GLM_CONFIG_XYZW_ONLY /;"	d
GLM_CONSTEXPR	include/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR /;"	d
GLM_CONSTEXPR	include/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR$/;"	d
GLM_COUNTOF	include/glm/detail/setup.hpp	/^#	define GLM_COUNTOF(/;"	d
GLM_CTOR_INITIALISATION	include/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALISATION	/;"	d
GLM_CTOR_INITIALIZER_LIST	include/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALIZER_LIST	/;"	d
GLM_CTOR_INIT_DISABLE	include/glm/detail/setup.hpp	/^#define GLM_CTOR_INIT_DISABLE	/;"	d
GLM_CUDA_FUNC_DECL	include/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL /;"	d
GLM_CUDA_FUNC_DECL	include/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL$/;"	d
GLM_CUDA_FUNC_DEF	include/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF /;"	d
GLM_CUDA_FUNC_DEF	include/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF$/;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_ACCESS_CONTROL_SFINAE$/;"	d
GLM_CXX11_ALIAS_TEMPLATE	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIAS_TEMPLATE$/;"	d
GLM_CXX11_ALIGNAS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIGNAS$/;"	d
GLM_CXX11_ATTRIBUTES	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_ATTRIBUTES$/;"	d
GLM_CXX11_AUTO_TYPE	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_AUTO_TYPE$/;"	d
GLM_CXX11_CONSTEXPR	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_CONSTEXPR$/;"	d
GLM_CXX11_DECLTYPE	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_DECLTYPE$/;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULTED_FUNCTIONS$/;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS$/;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELEGATING_CONSTRUCTORS$/;"	d
GLM_CXX11_DELETED_FUNCTIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELETED_FUNCTIONS$/;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_EXPLICIT_CONVERSIONS$/;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_GENERALIZED_INITIALIZERS$/;"	d
GLM_CXX11_IMPLICIT_MOVES	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_IMPLICIT_MOVES$/;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_INHERITING_CONSTRUCTORS$/;"	d
GLM_CXX11_INLINE_NAMESPACES	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_INLINE_NAMESPACES$/;"	d
GLM_CXX11_LAMBDAS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_LAMBDAS$/;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS$/;"	d
GLM_CXX11_NOEXCEPT	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_NOEXCEPT$/;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_NONSTATIC_MEMBER_INIT$/;"	d
GLM_CXX11_NULLPTR	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_NULLPTR$/;"	d
GLM_CXX11_OVERRIDE_CONTROL	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_OVERRIDE_CONTROL$/;"	d
GLM_CXX11_RANGE_FOR	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_RANGE_FOR$/;"	d
GLM_CXX11_RAW_STRING_LITERALS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_RAW_STRING_LITERALS$/;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS$/;"	d
GLM_CXX11_RVALUE_REFERENCES	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_RVALUE_REFERENCES$/;"	d
GLM_CXX11_STATIC_ASSERT	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STATIC_ASSERT	include/glm/detail/_features.hpp	/^#	define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STRONG_ENUMS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_STRONG_ENUMS$/;"	d
GLM_CXX11_TRAILING_RETURN	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_TRAILING_RETURN$/;"	d
GLM_CXX11_UNICODE_LITERALS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNICODE_LITERALS$/;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNRESTRICTED_UNIONS$/;"	d
GLM_CXX11_USER_LITERALS	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_USER_LITERALS$/;"	d
GLM_CXX11_VARIADIC_TEMPLATES	include/glm/detail/_features.hpp	/^#		define GLM_CXX11_VARIADIC_TEMPLATES$/;"	d
GLM_CXX98_EXCEPTIONS	include/glm/detail/_features.hpp	/^#		define GLM_CXX98_EXCEPTIONS$/;"	d
GLM_CXX98_RTTI	include/glm/detail/_features.hpp	/^#		define GLM_CXX98_RTTI$/;"	d
GLM_DEFAULT	include/glm/detail/setup.hpp	/^#	define GLM_DEFAULT /;"	d
GLM_DEFAULT	include/glm/detail/setup.hpp	/^#	define GLM_DEFAULT$/;"	d
GLM_DEPRECATED	include/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED /;"	d
GLM_DEPRECATED	include/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED$/;"	d
GLM_DISABLE	include/glm/detail/setup.hpp	/^#define GLM_DISABLE	/;"	d
GLM_ENABLE	include/glm/detail/setup.hpp	/^#define GLM_ENABLE	/;"	d
GLM_ENABLE_EXPERIMENTAL	include/glm/detail/glm.cpp	/^#define GLM_ENABLE_EXPERIMENTAL$/;"	d	file:
GLM_EXPLICIT	include/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT /;"	d
GLM_EXPLICIT	include/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT$/;"	d
GLM_EXTRACT_WORDS	include/glm/ext/scalar_ulp.inl	/^#define GLM_EXTRACT_WORDS(/;"	d	file:
GLM_FORCE_ALIGNED_GENTYPES	include/glm/detail/setup.hpp	/^#	define GLM_FORCE_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_DEFAULT_ALIGNED_GENTYPES	include/glm/detail/setup.hpp	/^#	define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_INTRINSICS	include/glm/simd/platform.h	/^#	define GLM_FORCE_INTRINSICS$/;"	d
GLM_FORCE_SWIZZLE	include/glm/detail/setup.hpp	/^#	define GLM_FORCE_SWIZZLE$/;"	d
GLM_FUNC_DECL	include/glm/detail/setup.hpp	/^#define GLM_FUNC_DECL /;"	d
GLM_FUNC_QUALIFIER	include/glm/detail/setup.hpp	/^#define GLM_FUNC_QUALIFIER /;"	d
GLM_GET_FLOAT_WORD	include/glm/ext/scalar_ulp.inl	/^#define GLM_GET_FLOAT_WORD(/;"	d	file:
GLM_HAS_ALIGNOF	include/glm/detail/setup.hpp	/^#	define GLM_HAS_ALIGNOF /;"	d
GLM_HAS_ASSIGNABLE	include/glm/detail/setup.hpp	/^#	define GLM_HAS_ASSIGNABLE /;"	d
GLM_HAS_BITSCAN_WINDOWS	include/glm/detail/setup.hpp	/^#	define GLM_HAS_BITSCAN_WINDOWS /;"	d
GLM_HAS_CONSTEXPR	include/glm/detail/setup.hpp	/^#	define GLM_HAS_CONSTEXPR /;"	d
GLM_HAS_CXX11_STL	include/glm/detail/setup.hpp	/^#		define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_CXX11_STL	include/glm/detail/setup.hpp	/^#	define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	include/glm/detail/setup.hpp	/^#	define GLM_HAS_DEFAULTED_FUNCTIONS /;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	include/glm/detail/setup.hpp	/^#	define GLM_HAS_EXPLICIT_CONVERSION_OPERATORS /;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	include/glm/detail/setup.hpp	/^#	define GLM_HAS_EXTENDED_INTEGER_TYPE /;"	d
GLM_HAS_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^#		define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^#	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^# 		define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^# 	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_INITIALIZER_LISTS	include/glm/detail/setup.hpp	/^#	define GLM_HAS_INITIALIZER_LISTS /;"	d
GLM_HAS_MAKE_SIGNED	include/glm/detail/setup.hpp	/^#	define GLM_HAS_MAKE_SIGNED /;"	d
GLM_HAS_OPENMP	include/glm/detail/setup.hpp	/^#			define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	include/glm/detail/setup.hpp	/^#		define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	include/glm/detail/setup.hpp	/^#	define GLM_HAS_OPENMP /;"	d
GLM_HAS_RANGE_FOR	include/glm/detail/setup.hpp	/^#	define GLM_HAS_RANGE_FOR /;"	d
GLM_HAS_RVALUE_REFERENCES	include/glm/detail/setup.hpp	/^#	define GLM_HAS_RVALUE_REFERENCES /;"	d
GLM_HAS_STATIC_ASSERT	include/glm/detail/setup.hpp	/^#	define GLM_HAS_STATIC_ASSERT /;"	d
GLM_HAS_TEMPLATE_ALIASES	include/glm/detail/setup.hpp	/^#	define GLM_HAS_TEMPLATE_ALIASES /;"	d
GLM_HAS_TRIVIAL_QUERIES	include/glm/detail/setup.hpp	/^#define GLM_HAS_TRIVIAL_QUERIES /;"	d
GLM_HAS_UNRESTRICTED_UNIONS	include/glm/detail/setup.hpp	/^#	define GLM_HAS_UNRESTRICTED_UNIONS /;"	d
GLM_HIGHP	include/glm/detail/setup.hpp	/^#define GLM_HIGHP	/;"	d
GLM_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^#	define GLM_IF_CONSTEXPR /;"	d
GLM_IF_CONSTEXPR	include/glm/detail/setup.hpp	/^# 	define GLM_IF_CONSTEXPR /;"	d
GLM_IMPLEMENT_SCAL_MULT	include/glm/gtx/scalar_multiplication.hpp	/^#define GLM_IMPLEMENT_SCAL_MULT(/;"	d
GLM_INLINE	include/glm/detail/setup.hpp	/^#		define GLM_INLINE /;"	d
GLM_INLINE	include/glm/detail/setup.hpp	/^#	define GLM_INLINE /;"	d
GLM_INSERT_WORDS	include/glm/ext/scalar_ulp.inl	/^#define GLM_INSERT_WORDS(/;"	d	file:
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (0 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX0X | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX11 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX14 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX17 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX2A | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#		define GLM_LANG (GLM_LANG_CXX98 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX03 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX11 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX14 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX17 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX2A | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG (GLM_LANG_CXX98 | GLM_LANG_/;"	d
GLM_LANG	include/glm/detail/setup.hpp	/^#	define GLM_LANG /;"	d
GLM_LANG_CXX03	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03			(GLM_LANG_CXX98 | GLM_LANG_CXX03_/;"	d
GLM_LANG_CXX03_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03_FLAG	/;"	d
GLM_LANG_CXX0X	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X			(GLM_LANG_CXX03 | GLM_LANG_CXX0X_/;"	d
GLM_LANG_CXX0X_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X_FLAG	/;"	d
GLM_LANG_CXX11	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11			(GLM_LANG_CXX0X | GLM_LANG_CXX11_/;"	d
GLM_LANG_CXX11_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11_FLAG	/;"	d
GLM_LANG_CXX14	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14			(GLM_LANG_CXX11 | GLM_LANG_CXX14_/;"	d
GLM_LANG_CXX14_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14_FLAG	/;"	d
GLM_LANG_CXX17	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17			(GLM_LANG_CXX14 | GLM_LANG_CXX17_/;"	d
GLM_LANG_CXX17_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17_FLAG	/;"	d
GLM_LANG_CXX2A	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX2A			(GLM_LANG_CXX17 | GLM_LANG_CXX2A_/;"	d
GLM_LANG_CXX2A_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX2A_FLAG	/;"	d
GLM_LANG_CXX98	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98			GLM_LANG_CXX98_/;"	d
GLM_LANG_CXX98_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98_FLAG	/;"	d
GLM_LANG_CXXGNU	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU			GLM_LANG_CXXGNU_/;"	d
GLM_LANG_CXXGNU_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU_FLAG	/;"	d
GLM_LANG_CXXMS	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS			GLM_LANG_CXXMS_/;"	d
GLM_LANG_CXXMS_FLAG	include/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS_FLAG	/;"	d
GLM_LANG_EXT	include/glm/detail/setup.hpp	/^#	define GLM_LANG_EXT /;"	d
GLM_LANG_PLATFORM	include/glm/detail/setup.hpp	/^#				define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	include/glm/detail/setup.hpp	/^#			define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	include/glm/detail/setup.hpp	/^#		define GLM_LANG_PLATFORM /;"	d
GLM_LANG_STL11_FORCED	include/glm/detail/setup.hpp	/^#	define GLM_LANG_STL11_FORCED$/;"	d
GLM_LENGTH_INT	include/glm/detail/setup.hpp	/^#define GLM_LENGTH_INT	/;"	d
GLM_LENGTH_SIZE_T	include/glm/detail/setup.hpp	/^#define GLM_LENGTH_SIZE_T	/;"	d
GLM_LOWP	include/glm/detail/setup.hpp	/^#define GLM_LOWP	/;"	d
GLM_MEDIUMP	include/glm/detail/setup.hpp	/^#define GLM_MEDIUMP	/;"	d
GLM_MESSAGES	include/glm/detail/setup.hpp	/^#	define GLM_MESSAGES /;"	d
GLM_MESSAGE_DISPLAYED	include/glm/detail/setup.hpp	/^#	define GLM_MESSAGE_DISPLAYED$/;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	include/glm/ext.hpp	/^#	define GLM_MESSAGE_EXT_INCLUDED_DISPLAYED$/;"	d
GLM_MODEL	include/glm/detail/setup.hpp	/^#	define GLM_MODEL	GLM_MODEL_/;"	d
GLM_MODEL_32	include/glm/simd/platform.h	/^#define GLM_MODEL_32	/;"	d
GLM_MODEL_64	include/glm/simd/platform.h	/^#define GLM_MODEL_64	/;"	d
GLM_MUTABLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_MUTABLE$/;"	d
GLM_NEVER_INLINE	include/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE /;"	d
GLM_NEVER_INLINE	include/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE$/;"	d
GLM_NEVER_INLINE	include/glm/detail/setup.hpp	/^#	define GLM_NEVER_INLINE$/;"	d
GLM_NULLPTR	include/glm/detail/setup.hpp	/^#	define GLM_NULLPTR /;"	d
GLM_PLATFORM	include/glm/simd/platform.h	/^#	define GLM_PLATFORM GLM_PLATFORM_/;"	d
GLM_PLATFORM_ANDROID	include/glm/simd/platform.h	/^#define GLM_PLATFORM_ANDROID	/;"	d
GLM_PLATFORM_APPLE	include/glm/simd/platform.h	/^#define GLM_PLATFORM_APPLE	/;"	d
GLM_PLATFORM_CHROME_NACL	include/glm/simd/platform.h	/^#define GLM_PLATFORM_CHROME_NACL	/;"	d
GLM_PLATFORM_CYGWIN	include/glm/simd/platform.h	/^#define GLM_PLATFORM_CYGWIN	/;"	d
GLM_PLATFORM_LINUX	include/glm/simd/platform.h	/^#define GLM_PLATFORM_LINUX	/;"	d
GLM_PLATFORM_QNXNTO	include/glm/simd/platform.h	/^#define GLM_PLATFORM_QNXNTO	/;"	d
GLM_PLATFORM_UNIX	include/glm/simd/platform.h	/^#define GLM_PLATFORM_UNIX	/;"	d
GLM_PLATFORM_UNKNOWN	include/glm/simd/platform.h	/^#define GLM_PLATFORM_UNKNOWN	/;"	d
GLM_PLATFORM_WINCE	include/glm/simd/platform.h	/^#define GLM_PLATFORM_WINCE	/;"	d
GLM_PLATFORM_WINDOWS	include/glm/simd/platform.h	/^#define GLM_PLATFORM_WINDOWS	/;"	d
GLM_SETUP_INCLUDED	include/glm/detail/setup.hpp	/^#define GLM_SETUP_INCLUDED	/;"	d
GLM_SET_FLOAT_WORD	include/glm/ext/scalar_ulp.inl	/^#define GLM_SET_FLOAT_WORD(/;"	d	file:
GLM_SILENT_WARNINGS	include/glm/detail/setup.hpp	/^#	define GLM_SILENT_WARNINGS /;"	d
GLM_STATIC_ASSERT	include/glm/detail/setup.hpp	/^#	define GLM_STATIC_ASSERT(/;"	d
GLM_STR	include/glm/detail/setup.hpp	/^#		define GLM_STR(x) GLM_STR_/;"	d
GLM_STR_HELPER	include/glm/detail/setup.hpp	/^#		define GLM_STR_HELPER(/;"	d
GLM_SWIZZLE2_2_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_2_MEMBERS(/;"	d
GLM_SWIZZLE2_3_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_3_MEMBERS(/;"	d
GLM_SWIZZLE2_4_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_4_MEMBERS(/;"	d
GLM_SWIZZLE3_2_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_2_MEMBERS(/;"	d
GLM_SWIZZLE3_3_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_3_MEMBERS(/;"	d
GLM_SWIZZLE3_4_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_4_MEMBERS(/;"	d
GLM_SWIZZLE4_2_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_2_MEMBERS(/;"	d
GLM_SWIZZLE4_3_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_3_MEMBERS(/;"	d
GLM_SWIZZLE4_4_MEMBERS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_4_MEMBERS(/;"	d
GLM_SWIZZLE_DISABLED	include/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_DISABLED	/;"	d
GLM_SWIZZLE_FUNCTION	include/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_FUNCTION	/;"	d
GLM_SWIZZLE_FUNCTION_1_ARGS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_1_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	include/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_OPERATOR	include/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_OPERATOR	/;"	d
GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_SWIZZLE_TEMPLATE1	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE1 /;"	d
GLM_SWIZZLE_TEMPLATE2	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE2 /;"	d
GLM_SWIZZLE_TYPE1	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE1 /;"	d
GLM_SWIZZLE_TYPE2	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE2 /;"	d
GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	include/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_VERSION	include/glm/detail/setup.hpp	/^#define GLM_VERSION	/;"	d
GLM_VERSION_MAJOR	include/glm/detail/setup.hpp	/^#define GLM_VERSION_MAJOR	/;"	d
GLM_VERSION_MESSAGE	include/glm/detail/setup.hpp	/^#define GLM_VERSION_MESSAGE	/;"	d
GLM_VERSION_MINOR	include/glm/detail/setup.hpp	/^#define GLM_VERSION_MINOR	/;"	d
GLM_VERSION_PATCH	include/glm/detail/setup.hpp	/^#define GLM_VERSION_PATCH	/;"	d
GLM_VERSION_REVISION	include/glm/detail/setup.hpp	/^#define GLM_VERSION_REVISION	/;"	d
GLVULKANPROCNV	include/glad/glad.h	/^typedef void (APIENTRY *GLVULKANPROCNV)(void);$/;"	t	typeref:typename:void (APIENTRY *)(void)
GLVULKANPROCNV	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLVULKANPROCNV)(void);$/;"	t	typeref:typename:void (APIENTRY *)(void)
GLVersion	glad.c	/^struct gladGLversionStruct GLVersion = { 0, 0 };$/;"	v	typeref:struct:gladGLversionStruct
GLVersion	include/glad/glad.h	/^GLAPI struct gladGLversionStruct GLVersion;$/;"	v	typeref:struct:gladGLversionStruct
GL_ACTIVE_ATTRIBUTES	include/glad/glad.h	/^#define GL_ACTIVE_ATTRIBUTES /;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	include/glad/glad.h	/^#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH /;"	d
GL_ACTIVE_TEXTURE	include/glad/glad.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ACTIVE_TEXTURE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ACTIVE_UNIFORMS	include/glad/glad.h	/^#define GL_ACTIVE_UNIFORMS /;"	d
GL_ACTIVE_UNIFORM_BLOCKS	include/glad/glad.h	/^#define GL_ACTIVE_UNIFORM_BLOCKS /;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	include/glad/glad.h	/^#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH /;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	include/glad/glad.h	/^#define GL_ACTIVE_UNIFORM_MAX_LENGTH /;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/glad/glad.h	/^#define GL_ALIASED_LINE_WIDTH_RANGE /;"	d
GL_ALPHA	include/glad/glad.h	/^#define GL_ALPHA /;"	d
GL_ALREADY_SIGNALED	include/glad/glad.h	/^#define GL_ALREADY_SIGNALED /;"	d
GL_ALWAYS	include/glad/glad.h	/^#define GL_ALWAYS /;"	d
GL_AND	include/glad/glad.h	/^#define GL_AND /;"	d
GL_AND_INVERTED	include/glad/glad.h	/^#define GL_AND_INVERTED /;"	d
GL_AND_REVERSE	include/glad/glad.h	/^#define GL_AND_REVERSE /;"	d
GL_ANY_SAMPLES_PASSED	include/glad/glad.h	/^#define GL_ANY_SAMPLES_PASSED /;"	d
GL_ARB_clip_control	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ARB_clip_control /;"	d
GL_ARRAY_BUFFER	include/glad/glad.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	include/glad/glad.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_ARRAY_BUFFER_BINDING	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_ATTACHED_SHADERS	include/glad/glad.h	/^#define GL_ATTACHED_SHADERS /;"	d
GL_BACK	include/glad/glad.h	/^#define GL_BACK /;"	d
GL_BACK_LEFT	include/glad/glad.h	/^#define GL_BACK_LEFT /;"	d
GL_BACK_RIGHT	include/glad/glad.h	/^#define GL_BACK_RIGHT /;"	d
GL_BGR	include/glad/glad.h	/^#define GL_BGR /;"	d
GL_BGRA	include/glad/glad.h	/^#define GL_BGRA /;"	d
GL_BGRA_INTEGER	include/glad/glad.h	/^#define GL_BGRA_INTEGER /;"	d
GL_BGR_INTEGER	include/glad/glad.h	/^#define GL_BGR_INTEGER /;"	d
GL_BLEND	include/glad/glad.h	/^#define GL_BLEND /;"	d
GL_BLEND	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND /;"	d
GL_BLEND_COLOR	include/glad/glad.h	/^#define GL_BLEND_COLOR /;"	d
GL_BLEND_DST	include/glad/glad.h	/^#define GL_BLEND_DST /;"	d
GL_BLEND_DST_ALPHA	include/glad/glad.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_ALPHA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	include/glad/glad.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_DST_RGB	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION	include/glad/glad.h	/^#define GL_BLEND_EQUATION /;"	d
GL_BLEND_EQUATION_ALPHA	include/glad/glad.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_ALPHA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	include/glad/glad.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_EQUATION_RGB	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC	include/glad/glad.h	/^#define GL_BLEND_SRC /;"	d
GL_BLEND_SRC_ALPHA	include/glad/glad.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_ALPHA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	include/glad/glad.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_BLEND_SRC_RGB	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_BLUE	include/glad/glad.h	/^#define GL_BLUE /;"	d
GL_BLUE_INTEGER	include/glad/glad.h	/^#define GL_BLUE_INTEGER /;"	d
GL_BOOL	include/glad/glad.h	/^#define GL_BOOL /;"	d
GL_BOOL_VEC2	include/glad/glad.h	/^#define GL_BOOL_VEC2 /;"	d
GL_BOOL_VEC3	include/glad/glad.h	/^#define GL_BOOL_VEC3 /;"	d
GL_BOOL_VEC4	include/glad/glad.h	/^#define GL_BOOL_VEC4 /;"	d
GL_BUFFER_ACCESS	include/glad/glad.h	/^#define GL_BUFFER_ACCESS /;"	d
GL_BUFFER_ACCESS_FLAGS	include/glad/glad.h	/^#define GL_BUFFER_ACCESS_FLAGS /;"	d
GL_BUFFER_MAPPED	include/glad/glad.h	/^#define GL_BUFFER_MAPPED /;"	d
GL_BUFFER_MAP_LENGTH	include/glad/glad.h	/^#define GL_BUFFER_MAP_LENGTH /;"	d
GL_BUFFER_MAP_OFFSET	include/glad/glad.h	/^#define GL_BUFFER_MAP_OFFSET /;"	d
GL_BUFFER_MAP_POINTER	include/glad/glad.h	/^#define GL_BUFFER_MAP_POINTER /;"	d
GL_BUFFER_SIZE	include/glad/glad.h	/^#define GL_BUFFER_SIZE /;"	d
GL_BUFFER_USAGE	include/glad/glad.h	/^#define GL_BUFFER_USAGE /;"	d
GL_BYTE	include/glad/glad.h	/^#define GL_BYTE /;"	d
GL_CALL	imgui/imgui_impl_opengl3.cpp	/^#define GL_CALL(/;"	d	file:
GL_CCW	include/glad/glad.h	/^#define GL_CCW /;"	d
GL_CLAMP_READ_COLOR	include/glad/glad.h	/^#define GL_CLAMP_READ_COLOR /;"	d
GL_CLAMP_TO_BORDER	include/glad/glad.h	/^#define GL_CLAMP_TO_BORDER /;"	d
GL_CLAMP_TO_EDGE	include/glad/glad.h	/^#define GL_CLAMP_TO_EDGE /;"	d
GL_CLEAR	include/glad/glad.h	/^#define GL_CLEAR /;"	d
GL_CLIP_DISTANCE0	include/glad/glad.h	/^#define GL_CLIP_DISTANCE0 /;"	d
GL_CLIP_DISTANCE1	include/glad/glad.h	/^#define GL_CLIP_DISTANCE1 /;"	d
GL_CLIP_DISTANCE2	include/glad/glad.h	/^#define GL_CLIP_DISTANCE2 /;"	d
GL_CLIP_DISTANCE3	include/glad/glad.h	/^#define GL_CLIP_DISTANCE3 /;"	d
GL_CLIP_DISTANCE4	include/glad/glad.h	/^#define GL_CLIP_DISTANCE4 /;"	d
GL_CLIP_DISTANCE5	include/glad/glad.h	/^#define GL_CLIP_DISTANCE5 /;"	d
GL_CLIP_DISTANCE6	include/glad/glad.h	/^#define GL_CLIP_DISTANCE6 /;"	d
GL_CLIP_DISTANCE7	include/glad/glad.h	/^#define GL_CLIP_DISTANCE7 /;"	d
GL_CLIP_ORIGIN	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_CLIP_ORIGIN /;"	d
GL_COLOR	include/glad/glad.h	/^#define GL_COLOR /;"	d
GL_COLOR_ATTACHMENT0	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT0 /;"	d
GL_COLOR_ATTACHMENT1	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT1 /;"	d
GL_COLOR_ATTACHMENT10	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT10 /;"	d
GL_COLOR_ATTACHMENT11	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT11 /;"	d
GL_COLOR_ATTACHMENT12	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT12 /;"	d
GL_COLOR_ATTACHMENT13	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT13 /;"	d
GL_COLOR_ATTACHMENT14	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT14 /;"	d
GL_COLOR_ATTACHMENT15	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT15 /;"	d
GL_COLOR_ATTACHMENT16	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT16 /;"	d
GL_COLOR_ATTACHMENT17	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT17 /;"	d
GL_COLOR_ATTACHMENT18	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT18 /;"	d
GL_COLOR_ATTACHMENT19	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT19 /;"	d
GL_COLOR_ATTACHMENT2	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT2 /;"	d
GL_COLOR_ATTACHMENT20	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT20 /;"	d
GL_COLOR_ATTACHMENT21	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT21 /;"	d
GL_COLOR_ATTACHMENT22	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT22 /;"	d
GL_COLOR_ATTACHMENT23	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT23 /;"	d
GL_COLOR_ATTACHMENT24	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT24 /;"	d
GL_COLOR_ATTACHMENT25	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT25 /;"	d
GL_COLOR_ATTACHMENT26	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT26 /;"	d
GL_COLOR_ATTACHMENT27	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT27 /;"	d
GL_COLOR_ATTACHMENT28	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT28 /;"	d
GL_COLOR_ATTACHMENT29	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT29 /;"	d
GL_COLOR_ATTACHMENT3	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT3 /;"	d
GL_COLOR_ATTACHMENT30	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT30 /;"	d
GL_COLOR_ATTACHMENT31	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT31 /;"	d
GL_COLOR_ATTACHMENT4	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT4 /;"	d
GL_COLOR_ATTACHMENT5	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT5 /;"	d
GL_COLOR_ATTACHMENT6	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT6 /;"	d
GL_COLOR_ATTACHMENT7	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT7 /;"	d
GL_COLOR_ATTACHMENT8	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT8 /;"	d
GL_COLOR_ATTACHMENT9	include/glad/glad.h	/^#define GL_COLOR_ATTACHMENT9 /;"	d
GL_COLOR_BUFFER_BIT	include/glad/glad.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COLOR_BUFFER_BIT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COLOR_CLEAR_VALUE	include/glad/glad.h	/^#define GL_COLOR_CLEAR_VALUE /;"	d
GL_COLOR_LOGIC_OP	include/glad/glad.h	/^#define GL_COLOR_LOGIC_OP /;"	d
GL_COLOR_WRITEMASK	include/glad/glad.h	/^#define GL_COLOR_WRITEMASK /;"	d
GL_COMPARE_REF_TO_TEXTURE	include/glad/glad.h	/^#define GL_COMPARE_REF_TO_TEXTURE /;"	d
GL_COMPILE_STATUS	include/glad/glad.h	/^#define GL_COMPILE_STATUS /;"	d
GL_COMPILE_STATUS	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_COMPILE_STATUS /;"	d
GL_COMPRESSED_RED	include/glad/glad.h	/^#define GL_COMPRESSED_RED /;"	d
GL_COMPRESSED_RED_RGTC1	include/glad/glad.h	/^#define GL_COMPRESSED_RED_RGTC1 /;"	d
GL_COMPRESSED_RG	include/glad/glad.h	/^#define GL_COMPRESSED_RG /;"	d
GL_COMPRESSED_RGB	include/glad/glad.h	/^#define GL_COMPRESSED_RGB /;"	d
GL_COMPRESSED_RGBA	include/glad/glad.h	/^#define GL_COMPRESSED_RGBA /;"	d
GL_COMPRESSED_RG_RGTC2	include/glad/glad.h	/^#define GL_COMPRESSED_RG_RGTC2 /;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	include/glad/glad.h	/^#define GL_COMPRESSED_SIGNED_RED_RGTC1 /;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	include/glad/glad.h	/^#define GL_COMPRESSED_SIGNED_RG_RGTC2 /;"	d
GL_COMPRESSED_SRGB	include/glad/glad.h	/^#define GL_COMPRESSED_SRGB /;"	d
GL_COMPRESSED_SRGB_ALPHA	include/glad/glad.h	/^#define GL_COMPRESSED_SRGB_ALPHA /;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/glad/glad.h	/^#define GL_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_CONDITION_SATISFIED	include/glad/glad.h	/^#define GL_CONDITION_SATISFIED /;"	d
GL_CONSTANT_ALPHA	include/glad/glad.h	/^#define GL_CONSTANT_ALPHA /;"	d
GL_CONSTANT_COLOR	include/glad/glad.h	/^#define GL_CONSTANT_COLOR /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	include/glad/glad.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_CORE_PROFILE_BIT	include/glad/glad.h	/^#define GL_CONTEXT_CORE_PROFILE_BIT /;"	d
GL_CONTEXT_FLAGS	include/glad/glad.h	/^#define GL_CONTEXT_FLAGS /;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	include/glad/glad.h	/^#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT /;"	d
GL_CONTEXT_PROFILE_MASK	include/glad/glad.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_COPY	include/glad/glad.h	/^#define GL_COPY /;"	d
GL_COPY_INVERTED	include/glad/glad.h	/^#define GL_COPY_INVERTED /;"	d
GL_COPY_READ_BUFFER	include/glad/glad.h	/^#define GL_COPY_READ_BUFFER /;"	d
GL_COPY_WRITE_BUFFER	include/glad/glad.h	/^#define GL_COPY_WRITE_BUFFER /;"	d
GL_CULL_FACE	include/glad/glad.h	/^#define GL_CULL_FACE /;"	d
GL_CULL_FACE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_CULL_FACE /;"	d
GL_CULL_FACE_MODE	include/glad/glad.h	/^#define GL_CULL_FACE_MODE /;"	d
GL_CURRENT_PROGRAM	include/glad/glad.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_CURRENT_PROGRAM	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_CURRENT_QUERY	include/glad/glad.h	/^#define GL_CURRENT_QUERY /;"	d
GL_CURRENT_VERTEX_ATTRIB	include/glad/glad.h	/^#define GL_CURRENT_VERTEX_ATTRIB /;"	d
GL_CW	include/glad/glad.h	/^#define GL_CW /;"	d
GL_DECR	include/glad/glad.h	/^#define GL_DECR /;"	d
GL_DECR_WRAP	include/glad/glad.h	/^#define GL_DECR_WRAP /;"	d
GL_DELETE_STATUS	include/glad/glad.h	/^#define GL_DELETE_STATUS /;"	d
GL_DEPTH	include/glad/glad.h	/^#define GL_DEPTH /;"	d
GL_DEPTH24_STENCIL8	include/glad/glad.h	/^#define GL_DEPTH24_STENCIL8 /;"	d
GL_DEPTH32F_STENCIL8	include/glad/glad.h	/^#define GL_DEPTH32F_STENCIL8 /;"	d
GL_DEPTH_ATTACHMENT	include/glad/glad.h	/^#define GL_DEPTH_ATTACHMENT /;"	d
GL_DEPTH_BUFFER_BIT	include/glad/glad.h	/^#define GL_DEPTH_BUFFER_BIT /;"	d
GL_DEPTH_CLAMP	include/glad/glad.h	/^#define GL_DEPTH_CLAMP /;"	d
GL_DEPTH_CLEAR_VALUE	include/glad/glad.h	/^#define GL_DEPTH_CLEAR_VALUE /;"	d
GL_DEPTH_COMPONENT	include/glad/glad.h	/^#define GL_DEPTH_COMPONENT /;"	d
GL_DEPTH_COMPONENT16	include/glad/glad.h	/^#define GL_DEPTH_COMPONENT16 /;"	d
GL_DEPTH_COMPONENT24	include/glad/glad.h	/^#define GL_DEPTH_COMPONENT24 /;"	d
GL_DEPTH_COMPONENT32	include/glad/glad.h	/^#define GL_DEPTH_COMPONENT32 /;"	d
GL_DEPTH_COMPONENT32F	include/glad/glad.h	/^#define GL_DEPTH_COMPONENT32F /;"	d
GL_DEPTH_FUNC	include/glad/glad.h	/^#define GL_DEPTH_FUNC /;"	d
GL_DEPTH_RANGE	include/glad/glad.h	/^#define GL_DEPTH_RANGE /;"	d
GL_DEPTH_STENCIL	include/glad/glad.h	/^#define GL_DEPTH_STENCIL /;"	d
GL_DEPTH_STENCIL_ATTACHMENT	include/glad/glad.h	/^#define GL_DEPTH_STENCIL_ATTACHMENT /;"	d
GL_DEPTH_TEST	include/glad/glad.h	/^#define GL_DEPTH_TEST /;"	d
GL_DEPTH_TEST	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_DEPTH_TEST /;"	d
GL_DEPTH_WRITEMASK	include/glad/glad.h	/^#define GL_DEPTH_WRITEMASK /;"	d
GL_DITHER	include/glad/glad.h	/^#define GL_DITHER /;"	d
GL_DONT_CARE	include/glad/glad.h	/^#define GL_DONT_CARE /;"	d
GL_DOUBLE	include/glad/glad.h	/^#define GL_DOUBLE /;"	d
GL_DOUBLEBUFFER	include/glad/glad.h	/^#define GL_DOUBLEBUFFER /;"	d
GL_DRAW_BUFFER	include/glad/glad.h	/^#define GL_DRAW_BUFFER /;"	d
GL_DRAW_BUFFER0	include/glad/glad.h	/^#define GL_DRAW_BUFFER0 /;"	d
GL_DRAW_BUFFER1	include/glad/glad.h	/^#define GL_DRAW_BUFFER1 /;"	d
GL_DRAW_BUFFER10	include/glad/glad.h	/^#define GL_DRAW_BUFFER10 /;"	d
GL_DRAW_BUFFER11	include/glad/glad.h	/^#define GL_DRAW_BUFFER11 /;"	d
GL_DRAW_BUFFER12	include/glad/glad.h	/^#define GL_DRAW_BUFFER12 /;"	d
GL_DRAW_BUFFER13	include/glad/glad.h	/^#define GL_DRAW_BUFFER13 /;"	d
GL_DRAW_BUFFER14	include/glad/glad.h	/^#define GL_DRAW_BUFFER14 /;"	d
GL_DRAW_BUFFER15	include/glad/glad.h	/^#define GL_DRAW_BUFFER15 /;"	d
GL_DRAW_BUFFER2	include/glad/glad.h	/^#define GL_DRAW_BUFFER2 /;"	d
GL_DRAW_BUFFER3	include/glad/glad.h	/^#define GL_DRAW_BUFFER3 /;"	d
GL_DRAW_BUFFER4	include/glad/glad.h	/^#define GL_DRAW_BUFFER4 /;"	d
GL_DRAW_BUFFER5	include/glad/glad.h	/^#define GL_DRAW_BUFFER5 /;"	d
GL_DRAW_BUFFER6	include/glad/glad.h	/^#define GL_DRAW_BUFFER6 /;"	d
GL_DRAW_BUFFER7	include/glad/glad.h	/^#define GL_DRAW_BUFFER7 /;"	d
GL_DRAW_BUFFER8	include/glad/glad.h	/^#define GL_DRAW_BUFFER8 /;"	d
GL_DRAW_BUFFER9	include/glad/glad.h	/^#define GL_DRAW_BUFFER9 /;"	d
GL_DRAW_FRAMEBUFFER	include/glad/glad.h	/^#define GL_DRAW_FRAMEBUFFER /;"	d
GL_DRAW_FRAMEBUFFER_BINDING	include/glad/glad.h	/^#define GL_DRAW_FRAMEBUFFER_BINDING /;"	d
GL_DST_ALPHA	include/glad/glad.h	/^#define GL_DST_ALPHA /;"	d
GL_DST_COLOR	include/glad/glad.h	/^#define GL_DST_COLOR /;"	d
GL_DYNAMIC_COPY	include/glad/glad.h	/^#define GL_DYNAMIC_COPY /;"	d
GL_DYNAMIC_DRAW	include/glad/glad.h	/^#define GL_DYNAMIC_DRAW /;"	d
GL_DYNAMIC_READ	include/glad/glad.h	/^#define GL_DYNAMIC_READ /;"	d
GL_ELEMENT_ARRAY_BUFFER	include/glad/glad.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/glad/glad.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EQUAL	include/glad/glad.h	/^#define GL_EQUAL /;"	d
GL_EQUIV	include/glad/glad.h	/^#define GL_EQUIV /;"	d
GL_EXTENSIONS	include/glad/glad.h	/^#define GL_EXTENSIONS /;"	d
GL_EXTENSIONS	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	include/glad/glad.h	/^#define GL_FALSE /;"	d
GL_FALSE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FALSE /;"	d
GL_FASTEST	include/glad/glad.h	/^#define GL_FASTEST /;"	d
GL_FILL	include/glad/glad.h	/^#define GL_FILL /;"	d
GL_FILL	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FILL /;"	d
GL_FIRST_VERTEX_CONVENTION	include/glad/glad.h	/^#define GL_FIRST_VERTEX_CONVENTION /;"	d
GL_FIXED_ONLY	include/glad/glad.h	/^#define GL_FIXED_ONLY /;"	d
GL_FLOAT	include/glad/glad.h	/^#define GL_FLOAT /;"	d
GL_FLOAT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FLOAT /;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	include/glad/glad.h	/^#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV /;"	d
GL_FLOAT_MAT2	include/glad/glad.h	/^#define GL_FLOAT_MAT2 /;"	d
GL_FLOAT_MAT2x3	include/glad/glad.h	/^#define GL_FLOAT_MAT2x3 /;"	d
GL_FLOAT_MAT2x4	include/glad/glad.h	/^#define GL_FLOAT_MAT2x4 /;"	d
GL_FLOAT_MAT3	include/glad/glad.h	/^#define GL_FLOAT_MAT3 /;"	d
GL_FLOAT_MAT3x2	include/glad/glad.h	/^#define GL_FLOAT_MAT3x2 /;"	d
GL_FLOAT_MAT3x4	include/glad/glad.h	/^#define GL_FLOAT_MAT3x4 /;"	d
GL_FLOAT_MAT4	include/glad/glad.h	/^#define GL_FLOAT_MAT4 /;"	d
GL_FLOAT_MAT4x2	include/glad/glad.h	/^#define GL_FLOAT_MAT4x2 /;"	d
GL_FLOAT_MAT4x3	include/glad/glad.h	/^#define GL_FLOAT_MAT4x3 /;"	d
GL_FLOAT_VEC2	include/glad/glad.h	/^#define GL_FLOAT_VEC2 /;"	d
GL_FLOAT_VEC3	include/glad/glad.h	/^#define GL_FLOAT_VEC3 /;"	d
GL_FLOAT_VEC4	include/glad/glad.h	/^#define GL_FLOAT_VEC4 /;"	d
GL_FRAGMENT_SHADER	include/glad/glad.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAGMENT_SHADER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	include/glad/glad.h	/^#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT /;"	d
GL_FRAMEBUFFER	include/glad/glad.h	/^#define GL_FRAMEBUFFER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	include/glad/glad.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL /;"	d
GL_FRAMEBUFFER_BINDING	include/glad/glad.h	/^#define GL_FRAMEBUFFER_BINDING /;"	d
GL_FRAMEBUFFER_COMPLETE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_COMPLETE /;"	d
GL_FRAMEBUFFER_DEFAULT	include/glad/glad.h	/^#define GL_FRAMEBUFFER_DEFAULT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER /;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE /;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	include/glad/glad.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER /;"	d
GL_FRAMEBUFFER_SRGB	include/glad/glad.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRAMEBUFFER_SRGB	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRAMEBUFFER_UNDEFINED	include/glad/glad.h	/^#define GL_FRAMEBUFFER_UNDEFINED /;"	d
GL_FRAMEBUFFER_UNSUPPORTED	include/glad/glad.h	/^#define GL_FRAMEBUFFER_UNSUPPORTED /;"	d
GL_FRONT	include/glad/glad.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	include/glad/glad.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FRONT_AND_BACK	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FRONT_FACE	include/glad/glad.h	/^#define GL_FRONT_FACE /;"	d
GL_FRONT_LEFT	include/glad/glad.h	/^#define GL_FRONT_LEFT /;"	d
GL_FRONT_RIGHT	include/glad/glad.h	/^#define GL_FRONT_RIGHT /;"	d
GL_FUNC_ADD	include/glad/glad.h	/^#define GL_FUNC_ADD /;"	d
GL_FUNC_ADD	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_FUNC_ADD /;"	d
GL_FUNC_REVERSE_SUBTRACT	include/glad/glad.h	/^#define GL_FUNC_REVERSE_SUBTRACT /;"	d
GL_FUNC_SUBTRACT	include/glad/glad.h	/^#define GL_FUNC_SUBTRACT /;"	d
GL_GEOMETRY_INPUT_TYPE	include/glad/glad.h	/^#define GL_GEOMETRY_INPUT_TYPE /;"	d
GL_GEOMETRY_OUTPUT_TYPE	include/glad/glad.h	/^#define GL_GEOMETRY_OUTPUT_TYPE /;"	d
GL_GEOMETRY_SHADER	include/glad/glad.h	/^#define GL_GEOMETRY_SHADER /;"	d
GL_GEOMETRY_VERTICES_OUT	include/glad/glad.h	/^#define GL_GEOMETRY_VERTICES_OUT /;"	d
GL_GEQUAL	include/glad/glad.h	/^#define GL_GEQUAL /;"	d
GL_GLEXT_PROTOTYPES	imgui/imgui_impl_opengl3.cpp	/^#define GL_GLEXT_PROTOTYPES$/;"	d	file:
GL_GREATER	include/glad/glad.h	/^#define GL_GREATER /;"	d
GL_GREEN	include/glad/glad.h	/^#define GL_GREEN /;"	d
GL_GREEN_INTEGER	include/glad/glad.h	/^#define GL_GREEN_INTEGER /;"	d
GL_HALF_FLOAT	include/glad/glad.h	/^#define GL_HALF_FLOAT /;"	d
GL_INCR	include/glad/glad.h	/^#define GL_INCR /;"	d
GL_INCR_WRAP	include/glad/glad.h	/^#define GL_INCR_WRAP /;"	d
GL_INFO_LOG_LENGTH	include/glad/glad.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_INFO_LOG_LENGTH	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_INT	include/glad/glad.h	/^#define GL_INT /;"	d
GL_INTERLEAVED_ATTRIBS	include/glad/glad.h	/^#define GL_INTERLEAVED_ATTRIBS /;"	d
GL_INT_2_10_10_10_REV	include/glad/glad.h	/^#define GL_INT_2_10_10_10_REV /;"	d
GL_INT_SAMPLER_1D	include/glad/glad.h	/^#define GL_INT_SAMPLER_1D /;"	d
GL_INT_SAMPLER_1D_ARRAY	include/glad/glad.h	/^#define GL_INT_SAMPLER_1D_ARRAY /;"	d
GL_INT_SAMPLER_2D	include/glad/glad.h	/^#define GL_INT_SAMPLER_2D /;"	d
GL_INT_SAMPLER_2D_ARRAY	include/glad/glad.h	/^#define GL_INT_SAMPLER_2D_ARRAY /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_INT_SAMPLER_2D_RECT	include/glad/glad.h	/^#define GL_INT_SAMPLER_2D_RECT /;"	d
GL_INT_SAMPLER_3D	include/glad/glad.h	/^#define GL_INT_SAMPLER_3D /;"	d
GL_INT_SAMPLER_BUFFER	include/glad/glad.h	/^#define GL_INT_SAMPLER_BUFFER /;"	d
GL_INT_SAMPLER_CUBE	include/glad/glad.h	/^#define GL_INT_SAMPLER_CUBE /;"	d
GL_INT_VEC2	include/glad/glad.h	/^#define GL_INT_VEC2 /;"	d
GL_INT_VEC3	include/glad/glad.h	/^#define GL_INT_VEC3 /;"	d
GL_INT_VEC4	include/glad/glad.h	/^#define GL_INT_VEC4 /;"	d
GL_INVALID_ENUM	include/glad/glad.h	/^#define GL_INVALID_ENUM /;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	include/glad/glad.h	/^#define GL_INVALID_FRAMEBUFFER_OPERATION /;"	d
GL_INVALID_INDEX	include/glad/glad.h	/^#define GL_INVALID_INDEX /;"	d
GL_INVALID_OPERATION	include/glad/glad.h	/^#define GL_INVALID_OPERATION /;"	d
GL_INVALID_VALUE	include/glad/glad.h	/^#define GL_INVALID_VALUE /;"	d
GL_INVERT	include/glad/glad.h	/^#define GL_INVERT /;"	d
GL_KEEP	include/glad/glad.h	/^#define GL_KEEP /;"	d
GL_LAST_VERTEX_CONVENTION	include/glad/glad.h	/^#define GL_LAST_VERTEX_CONVENTION /;"	d
GL_LEFT	include/glad/glad.h	/^#define GL_LEFT /;"	d
GL_LEQUAL	include/glad/glad.h	/^#define GL_LEQUAL /;"	d
GL_LESS	include/glad/glad.h	/^#define GL_LESS /;"	d
GL_LINE	include/glad/glad.h	/^#define GL_LINE /;"	d
GL_LINEAR	include/glad/glad.h	/^#define GL_LINEAR /;"	d
GL_LINEAR	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_LINEAR /;"	d
GL_LINEAR_MIPMAP_LINEAR	include/glad/glad.h	/^#define GL_LINEAR_MIPMAP_LINEAR /;"	d
GL_LINEAR_MIPMAP_NEAREST	include/glad/glad.h	/^#define GL_LINEAR_MIPMAP_NEAREST /;"	d
GL_LINES	include/glad/glad.h	/^#define GL_LINES /;"	d
GL_LINES_ADJACENCY	include/glad/glad.h	/^#define GL_LINES_ADJACENCY /;"	d
GL_LINE_LOOP	include/glad/glad.h	/^#define GL_LINE_LOOP /;"	d
GL_LINE_SMOOTH	include/glad/glad.h	/^#define GL_LINE_SMOOTH /;"	d
GL_LINE_SMOOTH_HINT	include/glad/glad.h	/^#define GL_LINE_SMOOTH_HINT /;"	d
GL_LINE_STRIP	include/glad/glad.h	/^#define GL_LINE_STRIP /;"	d
GL_LINE_STRIP_ADJACENCY	include/glad/glad.h	/^#define GL_LINE_STRIP_ADJACENCY /;"	d
GL_LINE_WIDTH	include/glad/glad.h	/^#define GL_LINE_WIDTH /;"	d
GL_LINE_WIDTH_GRANULARITY	include/glad/glad.h	/^#define GL_LINE_WIDTH_GRANULARITY /;"	d
GL_LINE_WIDTH_RANGE	include/glad/glad.h	/^#define GL_LINE_WIDTH_RANGE /;"	d
GL_LINK_STATUS	include/glad/glad.h	/^#define GL_LINK_STATUS /;"	d
GL_LINK_STATUS	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_LINK_STATUS /;"	d
GL_LOGIC_OP_MODE	include/glad/glad.h	/^#define GL_LOGIC_OP_MODE /;"	d
GL_LOWER_LEFT	include/glad/glad.h	/^#define GL_LOWER_LEFT /;"	d
GL_MAJOR_VERSION	include/glad/glad.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MAJOR_VERSION	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	include/glad/glad.h	/^#define GL_MAP_FLUSH_EXPLICIT_BIT /;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	include/glad/glad.h	/^#define GL_MAP_INVALIDATE_BUFFER_BIT /;"	d
GL_MAP_INVALIDATE_RANGE_BIT	include/glad/glad.h	/^#define GL_MAP_INVALIDATE_RANGE_BIT /;"	d
GL_MAP_READ_BIT	include/glad/glad.h	/^#define GL_MAP_READ_BIT /;"	d
GL_MAP_UNSYNCHRONIZED_BIT	include/glad/glad.h	/^#define GL_MAP_UNSYNCHRONIZED_BIT /;"	d
GL_MAP_WRITE_BIT	include/glad/glad.h	/^#define GL_MAP_WRITE_BIT /;"	d
GL_MAX	include/glad/glad.h	/^#define GL_MAX /;"	d
GL_MAX_3D_TEXTURE_SIZE	include/glad/glad.h	/^#define GL_MAX_3D_TEXTURE_SIZE /;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	include/glad/glad.h	/^#define GL_MAX_ARRAY_TEXTURE_LAYERS /;"	d
GL_MAX_CLIP_DISTANCES	include/glad/glad.h	/^#define GL_MAX_CLIP_DISTANCES /;"	d
GL_MAX_COLOR_ATTACHMENTS	include/glad/glad.h	/^#define GL_MAX_COLOR_ATTACHMENTS /;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	include/glad/glad.h	/^#define GL_MAX_COLOR_TEXTURE_SAMPLES /;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	include/glad/glad.h	/^#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	include/glad/glad.h	/^#define GL_MAX_COMBINED_UNIFORM_BLOCKS /;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	include/glad/glad.h	/^#define GL_MAX_CUBE_MAP_TEXTURE_SIZE /;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	include/glad/glad.h	/^#define GL_MAX_DEPTH_TEXTURE_SAMPLES /;"	d
GL_MAX_DRAW_BUFFERS	include/glad/glad.h	/^#define GL_MAX_DRAW_BUFFERS /;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	include/glad/glad.h	/^#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS /;"	d
GL_MAX_ELEMENTS_INDICES	include/glad/glad.h	/^#define GL_MAX_ELEMENTS_INDICES /;"	d
GL_MAX_ELEMENTS_VERTICES	include/glad/glad.h	/^#define GL_MAX_ELEMENTS_VERTICES /;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_FRAGMENT_INPUT_COMPONENTS /;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	include/glad/glad.h	/^#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS /;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_INPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_OUTPUT_VERTICES /;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS /;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_INTEGER_SAMPLES	include/glad/glad.h	/^#define GL_MAX_INTEGER_SAMPLES /;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	include/glad/glad.h	/^#define GL_MAX_PROGRAM_TEXEL_OFFSET /;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	include/glad/glad.h	/^#define GL_MAX_RECTANGLE_TEXTURE_SIZE /;"	d
GL_MAX_RENDERBUFFER_SIZE	include/glad/glad.h	/^#define GL_MAX_RENDERBUFFER_SIZE /;"	d
GL_MAX_SAMPLES	include/glad/glad.h	/^#define GL_MAX_SAMPLES /;"	d
GL_MAX_SAMPLE_MASK_WORDS	include/glad/glad.h	/^#define GL_MAX_SAMPLE_MASK_WORDS /;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	include/glad/glad.h	/^#define GL_MAX_SERVER_WAIT_TIMEOUT /;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	include/glad/glad.h	/^#define GL_MAX_TEXTURE_BUFFER_SIZE /;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	include/glad/glad.h	/^#define GL_MAX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TEXTURE_LOD_BIAS	include/glad/glad.h	/^#define GL_MAX_TEXTURE_LOD_BIAS /;"	d
GL_MAX_TEXTURE_SIZE	include/glad/glad.h	/^#define GL_MAX_TEXTURE_SIZE /;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	include/glad/glad.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS /;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	include/glad/glad.h	/^#define GL_MAX_UNIFORM_BLOCK_SIZE /;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	include/glad/glad.h	/^#define GL_MAX_UNIFORM_BUFFER_BINDINGS /;"	d
GL_MAX_VARYING_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_VARYING_COMPONENTS /;"	d
GL_MAX_VARYING_FLOATS	include/glad/glad.h	/^#define GL_MAX_VARYING_FLOATS /;"	d
GL_MAX_VERTEX_ATTRIBS	include/glad/glad.h	/^#define GL_MAX_VERTEX_ATTRIBS /;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_VERTEX_OUTPUT_COMPONENTS /;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	include/glad/glad.h	/^#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	include/glad/glad.h	/^#define GL_MAX_VERTEX_UNIFORM_BLOCKS /;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	include/glad/glad.h	/^#define GL_MAX_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_VIEWPORT_DIMS	include/glad/glad.h	/^#define GL_MAX_VIEWPORT_DIMS /;"	d
GL_MIN	include/glad/glad.h	/^#define GL_MIN /;"	d
GL_MINOR_VERSION	include/glad/glad.h	/^#define GL_MINOR_VERSION /;"	d
GL_MINOR_VERSION	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_MINOR_VERSION /;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	include/glad/glad.h	/^#define GL_MIN_PROGRAM_TEXEL_OFFSET /;"	d
GL_MIRRORED_REPEAT	include/glad/glad.h	/^#define GL_MIRRORED_REPEAT /;"	d
GL_MULTISAMPLE	include/glad/glad.h	/^#define GL_MULTISAMPLE /;"	d
GL_NAND	include/glad/glad.h	/^#define GL_NAND /;"	d
GL_NEAREST	include/glad/glad.h	/^#define GL_NEAREST /;"	d
GL_NEAREST_MIPMAP_LINEAR	include/glad/glad.h	/^#define GL_NEAREST_MIPMAP_LINEAR /;"	d
GL_NEAREST_MIPMAP_NEAREST	include/glad/glad.h	/^#define GL_NEAREST_MIPMAP_NEAREST /;"	d
GL_NEVER	include/glad/glad.h	/^#define GL_NEVER /;"	d
GL_NICEST	include/glad/glad.h	/^#define GL_NICEST /;"	d
GL_NONE	include/glad/glad.h	/^#define GL_NONE /;"	d
GL_NOOP	include/glad/glad.h	/^#define GL_NOOP /;"	d
GL_NOR	include/glad/glad.h	/^#define GL_NOR /;"	d
GL_NOTEQUAL	include/glad/glad.h	/^#define GL_NOTEQUAL /;"	d
GL_NO_ERROR	include/glad/glad.h	/^#define GL_NO_ERROR /;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/glad/glad.h	/^#define GL_NUM_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_NUM_EXTENSIONS	include/glad/glad.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_NUM_EXTENSIONS	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_OBJECT_TYPE	include/glad/glad.h	/^#define GL_OBJECT_TYPE /;"	d
GL_ONE	include/glad/glad.h	/^#define GL_ONE /;"	d
GL_ONE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	include/glad/glad.h	/^#define GL_ONE_MINUS_CONSTANT_ALPHA /;"	d
GL_ONE_MINUS_CONSTANT_COLOR	include/glad/glad.h	/^#define GL_ONE_MINUS_CONSTANT_COLOR /;"	d
GL_ONE_MINUS_DST_ALPHA	include/glad/glad.h	/^#define GL_ONE_MINUS_DST_ALPHA /;"	d
GL_ONE_MINUS_DST_COLOR	include/glad/glad.h	/^#define GL_ONE_MINUS_DST_COLOR /;"	d
GL_ONE_MINUS_SRC1_ALPHA	include/glad/glad.h	/^#define GL_ONE_MINUS_SRC1_ALPHA /;"	d
GL_ONE_MINUS_SRC1_COLOR	include/glad/glad.h	/^#define GL_ONE_MINUS_SRC1_COLOR /;"	d
GL_ONE_MINUS_SRC_ALPHA	include/glad/glad.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_ONE_MINUS_SRC_ALPHA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_ONE_MINUS_SRC_COLOR	include/glad/glad.h	/^#define GL_ONE_MINUS_SRC_COLOR /;"	d
GL_OR	include/glad/glad.h	/^#define GL_OR /;"	d
GL_OR_INVERTED	include/glad/glad.h	/^#define GL_OR_INVERTED /;"	d
GL_OR_REVERSE	include/glad/glad.h	/^#define GL_OR_REVERSE /;"	d
GL_OUT_OF_MEMORY	include/glad/glad.h	/^#define GL_OUT_OF_MEMORY /;"	d
GL_PACK_ALIGNMENT	include/glad/glad.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PACK_ALIGNMENT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PACK_IMAGE_HEIGHT	include/glad/glad.h	/^#define GL_PACK_IMAGE_HEIGHT /;"	d
GL_PACK_LSB_FIRST	include/glad/glad.h	/^#define GL_PACK_LSB_FIRST /;"	d
GL_PACK_ROW_LENGTH	include/glad/glad.h	/^#define GL_PACK_ROW_LENGTH /;"	d
GL_PACK_SKIP_IMAGES	include/glad/glad.h	/^#define GL_PACK_SKIP_IMAGES /;"	d
GL_PACK_SKIP_PIXELS	include/glad/glad.h	/^#define GL_PACK_SKIP_PIXELS /;"	d
GL_PACK_SKIP_ROWS	include/glad/glad.h	/^#define GL_PACK_SKIP_ROWS /;"	d
GL_PACK_SWAP_BYTES	include/glad/glad.h	/^#define GL_PACK_SWAP_BYTES /;"	d
GL_PIXEL_PACK_BUFFER	include/glad/glad.h	/^#define GL_PIXEL_PACK_BUFFER /;"	d
GL_PIXEL_PACK_BUFFER_BINDING	include/glad/glad.h	/^#define GL_PIXEL_PACK_BUFFER_BINDING /;"	d
GL_PIXEL_UNPACK_BUFFER	include/glad/glad.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	include/glad/glad.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POINT	include/glad/glad.h	/^#define GL_POINT /;"	d
GL_POINTS	include/glad/glad.h	/^#define GL_POINTS /;"	d
GL_POINT_FADE_THRESHOLD_SIZE	include/glad/glad.h	/^#define GL_POINT_FADE_THRESHOLD_SIZE /;"	d
GL_POINT_SIZE	include/glad/glad.h	/^#define GL_POINT_SIZE /;"	d
GL_POINT_SIZE_GRANULARITY	include/glad/glad.h	/^#define GL_POINT_SIZE_GRANULARITY /;"	d
GL_POINT_SIZE_RANGE	include/glad/glad.h	/^#define GL_POINT_SIZE_RANGE /;"	d
GL_POINT_SPRITE_COORD_ORIGIN	include/glad/glad.h	/^#define GL_POINT_SPRITE_COORD_ORIGIN /;"	d
GL_POLYGON_MODE	include/glad/glad.h	/^#define GL_POLYGON_MODE /;"	d
GL_POLYGON_MODE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_POLYGON_MODE /;"	d
GL_POLYGON_OFFSET_FACTOR	include/glad/glad.h	/^#define GL_POLYGON_OFFSET_FACTOR /;"	d
GL_POLYGON_OFFSET_FILL	include/glad/glad.h	/^#define GL_POLYGON_OFFSET_FILL /;"	d
GL_POLYGON_OFFSET_LINE	include/glad/glad.h	/^#define GL_POLYGON_OFFSET_LINE /;"	d
GL_POLYGON_OFFSET_POINT	include/glad/glad.h	/^#define GL_POLYGON_OFFSET_POINT /;"	d
GL_POLYGON_OFFSET_UNITS	include/glad/glad.h	/^#define GL_POLYGON_OFFSET_UNITS /;"	d
GL_POLYGON_SMOOTH	include/glad/glad.h	/^#define GL_POLYGON_SMOOTH /;"	d
GL_POLYGON_SMOOTH_HINT	include/glad/glad.h	/^#define GL_POLYGON_SMOOTH_HINT /;"	d
GL_PRIMITIVES_GENERATED	include/glad/glad.h	/^#define GL_PRIMITIVES_GENERATED /;"	d
GL_PRIMITIVE_RESTART	include/glad/glad.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_PRIMITIVE_RESTART	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_PRIMITIVE_RESTART_INDEX	include/glad/glad.h	/^#define GL_PRIMITIVE_RESTART_INDEX /;"	d
GL_PROGRAM_POINT_SIZE	include/glad/glad.h	/^#define GL_PROGRAM_POINT_SIZE /;"	d
GL_PROVOKING_VERTEX	include/glad/glad.h	/^#define GL_PROVOKING_VERTEX /;"	d
GL_PROXY_TEXTURE_1D	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_1D /;"	d
GL_PROXY_TEXTURE_1D_ARRAY	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_1D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_2D /;"	d
GL_PROXY_TEXTURE_2D_ARRAY	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_2D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_PROXY_TEXTURE_3D	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_3D /;"	d
GL_PROXY_TEXTURE_CUBE_MAP	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP /;"	d
GL_PROXY_TEXTURE_RECTANGLE	include/glad/glad.h	/^#define GL_PROXY_TEXTURE_RECTANGLE /;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	include/glad/glad.h	/^#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION /;"	d
GL_QUERY_BY_REGION_NO_WAIT	include/glad/glad.h	/^#define GL_QUERY_BY_REGION_NO_WAIT /;"	d
GL_QUERY_BY_REGION_WAIT	include/glad/glad.h	/^#define GL_QUERY_BY_REGION_WAIT /;"	d
GL_QUERY_COUNTER_BITS	include/glad/glad.h	/^#define GL_QUERY_COUNTER_BITS /;"	d
GL_QUERY_NO_WAIT	include/glad/glad.h	/^#define GL_QUERY_NO_WAIT /;"	d
GL_QUERY_RESULT	include/glad/glad.h	/^#define GL_QUERY_RESULT /;"	d
GL_QUERY_RESULT_AVAILABLE	include/glad/glad.h	/^#define GL_QUERY_RESULT_AVAILABLE /;"	d
GL_QUERY_WAIT	include/glad/glad.h	/^#define GL_QUERY_WAIT /;"	d
GL_R11F_G11F_B10F	include/glad/glad.h	/^#define GL_R11F_G11F_B10F /;"	d
GL_R16	include/glad/glad.h	/^#define GL_R16 /;"	d
GL_R16F	include/glad/glad.h	/^#define GL_R16F /;"	d
GL_R16I	include/glad/glad.h	/^#define GL_R16I /;"	d
GL_R16UI	include/glad/glad.h	/^#define GL_R16UI /;"	d
GL_R16_SNORM	include/glad/glad.h	/^#define GL_R16_SNORM /;"	d
GL_R32F	include/glad/glad.h	/^#define GL_R32F /;"	d
GL_R32I	include/glad/glad.h	/^#define GL_R32I /;"	d
GL_R32UI	include/glad/glad.h	/^#define GL_R32UI /;"	d
GL_R3_G3_B2	include/glad/glad.h	/^#define GL_R3_G3_B2 /;"	d
GL_R8	include/glad/glad.h	/^#define GL_R8 /;"	d
GL_R8I	include/glad/glad.h	/^#define GL_R8I /;"	d
GL_R8UI	include/glad/glad.h	/^#define GL_R8UI /;"	d
GL_R8_SNORM	include/glad/glad.h	/^#define GL_R8_SNORM /;"	d
GL_RASTERIZER_DISCARD	include/glad/glad.h	/^#define GL_RASTERIZER_DISCARD /;"	d
GL_READ_BUFFER	include/glad/glad.h	/^#define GL_READ_BUFFER /;"	d
GL_READ_FRAMEBUFFER	include/glad/glad.h	/^#define GL_READ_FRAMEBUFFER /;"	d
GL_READ_FRAMEBUFFER_BINDING	include/glad/glad.h	/^#define GL_READ_FRAMEBUFFER_BINDING /;"	d
GL_READ_ONLY	include/glad/glad.h	/^#define GL_READ_ONLY /;"	d
GL_READ_WRITE	include/glad/glad.h	/^#define GL_READ_WRITE /;"	d
GL_RED	include/glad/glad.h	/^#define GL_RED /;"	d
GL_RED_INTEGER	include/glad/glad.h	/^#define GL_RED_INTEGER /;"	d
GL_RENDERBUFFER	include/glad/glad.h	/^#define GL_RENDERBUFFER /;"	d
GL_RENDERBUFFER_ALPHA_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_ALPHA_SIZE /;"	d
GL_RENDERBUFFER_BINDING	include/glad/glad.h	/^#define GL_RENDERBUFFER_BINDING /;"	d
GL_RENDERBUFFER_BLUE_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_BLUE_SIZE /;"	d
GL_RENDERBUFFER_DEPTH_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_DEPTH_SIZE /;"	d
GL_RENDERBUFFER_GREEN_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_GREEN_SIZE /;"	d
GL_RENDERBUFFER_HEIGHT	include/glad/glad.h	/^#define GL_RENDERBUFFER_HEIGHT /;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	include/glad/glad.h	/^#define GL_RENDERBUFFER_INTERNAL_FORMAT /;"	d
GL_RENDERBUFFER_RED_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_RED_SIZE /;"	d
GL_RENDERBUFFER_SAMPLES	include/glad/glad.h	/^#define GL_RENDERBUFFER_SAMPLES /;"	d
GL_RENDERBUFFER_STENCIL_SIZE	include/glad/glad.h	/^#define GL_RENDERBUFFER_STENCIL_SIZE /;"	d
GL_RENDERBUFFER_WIDTH	include/glad/glad.h	/^#define GL_RENDERBUFFER_WIDTH /;"	d
GL_RENDERER	include/glad/glad.h	/^#define GL_RENDERER /;"	d
GL_RENDERER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_RENDERER /;"	d
GL_REPEAT	include/glad/glad.h	/^#define GL_REPEAT /;"	d
GL_REPLACE	include/glad/glad.h	/^#define GL_REPLACE /;"	d
GL_RG	include/glad/glad.h	/^#define GL_RG /;"	d
GL_RG16	include/glad/glad.h	/^#define GL_RG16 /;"	d
GL_RG16F	include/glad/glad.h	/^#define GL_RG16F /;"	d
GL_RG16I	include/glad/glad.h	/^#define GL_RG16I /;"	d
GL_RG16UI	include/glad/glad.h	/^#define GL_RG16UI /;"	d
GL_RG16_SNORM	include/glad/glad.h	/^#define GL_RG16_SNORM /;"	d
GL_RG32F	include/glad/glad.h	/^#define GL_RG32F /;"	d
GL_RG32I	include/glad/glad.h	/^#define GL_RG32I /;"	d
GL_RG32UI	include/glad/glad.h	/^#define GL_RG32UI /;"	d
GL_RG8	include/glad/glad.h	/^#define GL_RG8 /;"	d
GL_RG8I	include/glad/glad.h	/^#define GL_RG8I /;"	d
GL_RG8UI	include/glad/glad.h	/^#define GL_RG8UI /;"	d
GL_RG8_SNORM	include/glad/glad.h	/^#define GL_RG8_SNORM /;"	d
GL_RGB	include/glad/glad.h	/^#define GL_RGB /;"	d
GL_RGB10	include/glad/glad.h	/^#define GL_RGB10 /;"	d
GL_RGB10_A2	include/glad/glad.h	/^#define GL_RGB10_A2 /;"	d
GL_RGB10_A2UI	include/glad/glad.h	/^#define GL_RGB10_A2UI /;"	d
GL_RGB12	include/glad/glad.h	/^#define GL_RGB12 /;"	d
GL_RGB16	include/glad/glad.h	/^#define GL_RGB16 /;"	d
GL_RGB16F	include/glad/glad.h	/^#define GL_RGB16F /;"	d
GL_RGB16I	include/glad/glad.h	/^#define GL_RGB16I /;"	d
GL_RGB16UI	include/glad/glad.h	/^#define GL_RGB16UI /;"	d
GL_RGB16_SNORM	include/glad/glad.h	/^#define GL_RGB16_SNORM /;"	d
GL_RGB32F	include/glad/glad.h	/^#define GL_RGB32F /;"	d
GL_RGB32I	include/glad/glad.h	/^#define GL_RGB32I /;"	d
GL_RGB32UI	include/glad/glad.h	/^#define GL_RGB32UI /;"	d
GL_RGB4	include/glad/glad.h	/^#define GL_RGB4 /;"	d
GL_RGB5	include/glad/glad.h	/^#define GL_RGB5 /;"	d
GL_RGB5_A1	include/glad/glad.h	/^#define GL_RGB5_A1 /;"	d
GL_RGB8	include/glad/glad.h	/^#define GL_RGB8 /;"	d
GL_RGB8I	include/glad/glad.h	/^#define GL_RGB8I /;"	d
GL_RGB8UI	include/glad/glad.h	/^#define GL_RGB8UI /;"	d
GL_RGB8_SNORM	include/glad/glad.h	/^#define GL_RGB8_SNORM /;"	d
GL_RGB9_E5	include/glad/glad.h	/^#define GL_RGB9_E5 /;"	d
GL_RGBA	include/glad/glad.h	/^#define GL_RGBA /;"	d
GL_RGBA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_RGBA /;"	d
GL_RGBA12	include/glad/glad.h	/^#define GL_RGBA12 /;"	d
GL_RGBA16	include/glad/glad.h	/^#define GL_RGBA16 /;"	d
GL_RGBA16F	include/glad/glad.h	/^#define GL_RGBA16F /;"	d
GL_RGBA16I	include/glad/glad.h	/^#define GL_RGBA16I /;"	d
GL_RGBA16UI	include/glad/glad.h	/^#define GL_RGBA16UI /;"	d
GL_RGBA16_SNORM	include/glad/glad.h	/^#define GL_RGBA16_SNORM /;"	d
GL_RGBA2	include/glad/glad.h	/^#define GL_RGBA2 /;"	d
GL_RGBA32F	include/glad/glad.h	/^#define GL_RGBA32F /;"	d
GL_RGBA32I	include/glad/glad.h	/^#define GL_RGBA32I /;"	d
GL_RGBA32UI	include/glad/glad.h	/^#define GL_RGBA32UI /;"	d
GL_RGBA4	include/glad/glad.h	/^#define GL_RGBA4 /;"	d
GL_RGBA8	include/glad/glad.h	/^#define GL_RGBA8 /;"	d
GL_RGBA8I	include/glad/glad.h	/^#define GL_RGBA8I /;"	d
GL_RGBA8UI	include/glad/glad.h	/^#define GL_RGBA8UI /;"	d
GL_RGBA8_SNORM	include/glad/glad.h	/^#define GL_RGBA8_SNORM /;"	d
GL_RGBA_INTEGER	include/glad/glad.h	/^#define GL_RGBA_INTEGER /;"	d
GL_RGB_INTEGER	include/glad/glad.h	/^#define GL_RGB_INTEGER /;"	d
GL_RG_INTEGER	include/glad/glad.h	/^#define GL_RG_INTEGER /;"	d
GL_RIGHT	include/glad/glad.h	/^#define GL_RIGHT /;"	d
GL_SAMPLER_1D	include/glad/glad.h	/^#define GL_SAMPLER_1D /;"	d
GL_SAMPLER_1D_ARRAY	include/glad/glad.h	/^#define GL_SAMPLER_1D_ARRAY /;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_1D_ARRAY_SHADOW /;"	d
GL_SAMPLER_1D_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_1D_SHADOW /;"	d
GL_SAMPLER_2D	include/glad/glad.h	/^#define GL_SAMPLER_2D /;"	d
GL_SAMPLER_2D_ARRAY	include/glad/glad.h	/^#define GL_SAMPLER_2D_ARRAY /;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_2D_ARRAY_SHADOW /;"	d
GL_SAMPLER_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_SAMPLER_2D_MULTISAMPLE /;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_SAMPLER_2D_RECT	include/glad/glad.h	/^#define GL_SAMPLER_2D_RECT /;"	d
GL_SAMPLER_2D_RECT_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_2D_RECT_SHADOW /;"	d
GL_SAMPLER_2D_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_2D_SHADOW /;"	d
GL_SAMPLER_3D	include/glad/glad.h	/^#define GL_SAMPLER_3D /;"	d
GL_SAMPLER_BINDING	include/glad/glad.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SAMPLER_BINDING	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SAMPLER_BUFFER	include/glad/glad.h	/^#define GL_SAMPLER_BUFFER /;"	d
GL_SAMPLER_CUBE	include/glad/glad.h	/^#define GL_SAMPLER_CUBE /;"	d
GL_SAMPLER_CUBE_SHADOW	include/glad/glad.h	/^#define GL_SAMPLER_CUBE_SHADOW /;"	d
GL_SAMPLES	include/glad/glad.h	/^#define GL_SAMPLES /;"	d
GL_SAMPLES_PASSED	include/glad/glad.h	/^#define GL_SAMPLES_PASSED /;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/glad/glad.h	/^#define GL_SAMPLE_ALPHA_TO_COVERAGE /;"	d
GL_SAMPLE_ALPHA_TO_ONE	include/glad/glad.h	/^#define GL_SAMPLE_ALPHA_TO_ONE /;"	d
GL_SAMPLE_BUFFERS	include/glad/glad.h	/^#define GL_SAMPLE_BUFFERS /;"	d
GL_SAMPLE_COVERAGE	include/glad/glad.h	/^#define GL_SAMPLE_COVERAGE /;"	d
GL_SAMPLE_COVERAGE_INVERT	include/glad/glad.h	/^#define GL_SAMPLE_COVERAGE_INVERT /;"	d
GL_SAMPLE_COVERAGE_VALUE	include/glad/glad.h	/^#define GL_SAMPLE_COVERAGE_VALUE /;"	d
GL_SAMPLE_MASK	include/glad/glad.h	/^#define GL_SAMPLE_MASK /;"	d
GL_SAMPLE_MASK_VALUE	include/glad/glad.h	/^#define GL_SAMPLE_MASK_VALUE /;"	d
GL_SAMPLE_POSITION	include/glad/glad.h	/^#define GL_SAMPLE_POSITION /;"	d
GL_SCISSOR_BOX	include/glad/glad.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_BOX	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	include/glad/glad.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SCISSOR_TEST	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SEPARATE_ATTRIBS	include/glad/glad.h	/^#define GL_SEPARATE_ATTRIBS /;"	d
GL_SET	include/glad/glad.h	/^#define GL_SET /;"	d
GL_SHADER_SOURCE_LENGTH	include/glad/glad.h	/^#define GL_SHADER_SOURCE_LENGTH /;"	d
GL_SHADER_TYPE	include/glad/glad.h	/^#define GL_SHADER_TYPE /;"	d
GL_SHADING_LANGUAGE_VERSION	include/glad/glad.h	/^#define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_SHORT	include/glad/glad.h	/^#define GL_SHORT /;"	d
GL_SIGNALED	include/glad/glad.h	/^#define GL_SIGNALED /;"	d
GL_SIGNED_NORMALIZED	include/glad/glad.h	/^#define GL_SIGNED_NORMALIZED /;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	include/glad/glad.h	/^#define GL_SMOOTH_LINE_WIDTH_GRANULARITY /;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	include/glad/glad.h	/^#define GL_SMOOTH_LINE_WIDTH_RANGE /;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	include/glad/glad.h	/^#define GL_SMOOTH_POINT_SIZE_GRANULARITY /;"	d
GL_SMOOTH_POINT_SIZE_RANGE	include/glad/glad.h	/^#define GL_SMOOTH_POINT_SIZE_RANGE /;"	d
GL_SRC1_ALPHA	include/glad/glad.h	/^#define GL_SRC1_ALPHA /;"	d
GL_SRC1_COLOR	include/glad/glad.h	/^#define GL_SRC1_COLOR /;"	d
GL_SRC_ALPHA	include/glad/glad.h	/^#define GL_SRC_ALPHA /;"	d
GL_SRC_ALPHA	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_SRC_ALPHA /;"	d
GL_SRC_ALPHA_SATURATE	include/glad/glad.h	/^#define GL_SRC_ALPHA_SATURATE /;"	d
GL_SRC_COLOR	include/glad/glad.h	/^#define GL_SRC_COLOR /;"	d
GL_SRGB	include/glad/glad.h	/^#define GL_SRGB /;"	d
GL_SRGB8	include/glad/glad.h	/^#define GL_SRGB8 /;"	d
GL_SRGB8_ALPHA8	include/glad/glad.h	/^#define GL_SRGB8_ALPHA8 /;"	d
GL_SRGB_ALPHA	include/glad/glad.h	/^#define GL_SRGB_ALPHA /;"	d
GL_STATIC_COPY	include/glad/glad.h	/^#define GL_STATIC_COPY /;"	d
GL_STATIC_DRAW	include/glad/glad.h	/^#define GL_STATIC_DRAW /;"	d
GL_STATIC_READ	include/glad/glad.h	/^#define GL_STATIC_READ /;"	d
GL_STENCIL	include/glad/glad.h	/^#define GL_STENCIL /;"	d
GL_STENCIL_ATTACHMENT	include/glad/glad.h	/^#define GL_STENCIL_ATTACHMENT /;"	d
GL_STENCIL_BACK_FAIL	include/glad/glad.h	/^#define GL_STENCIL_BACK_FAIL /;"	d
GL_STENCIL_BACK_FUNC	include/glad/glad.h	/^#define GL_STENCIL_BACK_FUNC /;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	include/glad/glad.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	include/glad/glad.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_PASS /;"	d
GL_STENCIL_BACK_REF	include/glad/glad.h	/^#define GL_STENCIL_BACK_REF /;"	d
GL_STENCIL_BACK_VALUE_MASK	include/glad/glad.h	/^#define GL_STENCIL_BACK_VALUE_MASK /;"	d
GL_STENCIL_BACK_WRITEMASK	include/glad/glad.h	/^#define GL_STENCIL_BACK_WRITEMASK /;"	d
GL_STENCIL_BUFFER_BIT	include/glad/glad.h	/^#define GL_STENCIL_BUFFER_BIT /;"	d
GL_STENCIL_CLEAR_VALUE	include/glad/glad.h	/^#define GL_STENCIL_CLEAR_VALUE /;"	d
GL_STENCIL_FAIL	include/glad/glad.h	/^#define GL_STENCIL_FAIL /;"	d
GL_STENCIL_FUNC	include/glad/glad.h	/^#define GL_STENCIL_FUNC /;"	d
GL_STENCIL_INDEX	include/glad/glad.h	/^#define GL_STENCIL_INDEX /;"	d
GL_STENCIL_INDEX1	include/glad/glad.h	/^#define GL_STENCIL_INDEX1 /;"	d
GL_STENCIL_INDEX16	include/glad/glad.h	/^#define GL_STENCIL_INDEX16 /;"	d
GL_STENCIL_INDEX4	include/glad/glad.h	/^#define GL_STENCIL_INDEX4 /;"	d
GL_STENCIL_INDEX8	include/glad/glad.h	/^#define GL_STENCIL_INDEX8 /;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/glad/glad.h	/^#define GL_STENCIL_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/glad/glad.h	/^#define GL_STENCIL_PASS_DEPTH_PASS /;"	d
GL_STENCIL_REF	include/glad/glad.h	/^#define GL_STENCIL_REF /;"	d
GL_STENCIL_TEST	include/glad/glad.h	/^#define GL_STENCIL_TEST /;"	d
GL_STENCIL_TEST	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_STENCIL_TEST /;"	d
GL_STENCIL_VALUE_MASK	include/glad/glad.h	/^#define GL_STENCIL_VALUE_MASK /;"	d
GL_STENCIL_WRITEMASK	include/glad/glad.h	/^#define GL_STENCIL_WRITEMASK /;"	d
GL_STEREO	include/glad/glad.h	/^#define GL_STEREO /;"	d
GL_STREAM_COPY	include/glad/glad.h	/^#define GL_STREAM_COPY /;"	d
GL_STREAM_DRAW	include/glad/glad.h	/^#define GL_STREAM_DRAW /;"	d
GL_STREAM_DRAW	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_STREAM_DRAW /;"	d
GL_STREAM_READ	include/glad/glad.h	/^#define GL_STREAM_READ /;"	d
GL_SUBPIXEL_BITS	include/glad/glad.h	/^#define GL_SUBPIXEL_BITS /;"	d
GL_SYNC_CONDITION	include/glad/glad.h	/^#define GL_SYNC_CONDITION /;"	d
GL_SYNC_FENCE	include/glad/glad.h	/^#define GL_SYNC_FENCE /;"	d
GL_SYNC_FLAGS	include/glad/glad.h	/^#define GL_SYNC_FLAGS /;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	include/glad/glad.h	/^#define GL_SYNC_FLUSH_COMMANDS_BIT /;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	include/glad/glad.h	/^#define GL_SYNC_GPU_COMMANDS_COMPLETE /;"	d
GL_SYNC_STATUS	include/glad/glad.h	/^#define GL_SYNC_STATUS /;"	d
GL_TEXTURE	include/glad/glad.h	/^#define GL_TEXTURE /;"	d
GL_TEXTURE0	include/glad/glad.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE0	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE1	include/glad/glad.h	/^#define GL_TEXTURE1 /;"	d
GL_TEXTURE10	include/glad/glad.h	/^#define GL_TEXTURE10 /;"	d
GL_TEXTURE11	include/glad/glad.h	/^#define GL_TEXTURE11 /;"	d
GL_TEXTURE12	include/glad/glad.h	/^#define GL_TEXTURE12 /;"	d
GL_TEXTURE13	include/glad/glad.h	/^#define GL_TEXTURE13 /;"	d
GL_TEXTURE14	include/glad/glad.h	/^#define GL_TEXTURE14 /;"	d
GL_TEXTURE15	include/glad/glad.h	/^#define GL_TEXTURE15 /;"	d
GL_TEXTURE16	include/glad/glad.h	/^#define GL_TEXTURE16 /;"	d
GL_TEXTURE17	include/glad/glad.h	/^#define GL_TEXTURE17 /;"	d
GL_TEXTURE18	include/glad/glad.h	/^#define GL_TEXTURE18 /;"	d
GL_TEXTURE19	include/glad/glad.h	/^#define GL_TEXTURE19 /;"	d
GL_TEXTURE2	include/glad/glad.h	/^#define GL_TEXTURE2 /;"	d
GL_TEXTURE20	include/glad/glad.h	/^#define GL_TEXTURE20 /;"	d
GL_TEXTURE21	include/glad/glad.h	/^#define GL_TEXTURE21 /;"	d
GL_TEXTURE22	include/glad/glad.h	/^#define GL_TEXTURE22 /;"	d
GL_TEXTURE23	include/glad/glad.h	/^#define GL_TEXTURE23 /;"	d
GL_TEXTURE24	include/glad/glad.h	/^#define GL_TEXTURE24 /;"	d
GL_TEXTURE25	include/glad/glad.h	/^#define GL_TEXTURE25 /;"	d
GL_TEXTURE26	include/glad/glad.h	/^#define GL_TEXTURE26 /;"	d
GL_TEXTURE27	include/glad/glad.h	/^#define GL_TEXTURE27 /;"	d
GL_TEXTURE28	include/glad/glad.h	/^#define GL_TEXTURE28 /;"	d
GL_TEXTURE29	include/glad/glad.h	/^#define GL_TEXTURE29 /;"	d
GL_TEXTURE3	include/glad/glad.h	/^#define GL_TEXTURE3 /;"	d
GL_TEXTURE30	include/glad/glad.h	/^#define GL_TEXTURE30 /;"	d
GL_TEXTURE31	include/glad/glad.h	/^#define GL_TEXTURE31 /;"	d
GL_TEXTURE4	include/glad/glad.h	/^#define GL_TEXTURE4 /;"	d
GL_TEXTURE5	include/glad/glad.h	/^#define GL_TEXTURE5 /;"	d
GL_TEXTURE6	include/glad/glad.h	/^#define GL_TEXTURE6 /;"	d
GL_TEXTURE7	include/glad/glad.h	/^#define GL_TEXTURE7 /;"	d
GL_TEXTURE8	include/glad/glad.h	/^#define GL_TEXTURE8 /;"	d
GL_TEXTURE9	include/glad/glad.h	/^#define GL_TEXTURE9 /;"	d
GL_TEXTURE_1D	include/glad/glad.h	/^#define GL_TEXTURE_1D /;"	d
GL_TEXTURE_1D_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_1D_ARRAY /;"	d
GL_TEXTURE_2D	include/glad/glad.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_2D	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_2D_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_2D_ARRAY /;"	d
GL_TEXTURE_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_TEXTURE_2D_MULTISAMPLE /;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_3D	include/glad/glad.h	/^#define GL_TEXTURE_3D /;"	d
GL_TEXTURE_ALPHA_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_ALPHA_SIZE /;"	d
GL_TEXTURE_ALPHA_TYPE	include/glad/glad.h	/^#define GL_TEXTURE_ALPHA_TYPE /;"	d
GL_TEXTURE_BASE_LEVEL	include/glad/glad.h	/^#define GL_TEXTURE_BASE_LEVEL /;"	d
GL_TEXTURE_BINDING_1D	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_1D /;"	d
GL_TEXTURE_BINDING_1D_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_1D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_BINDING_2D	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_BINDING_2D_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_2D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_BINDING_3D	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_3D /;"	d
GL_TEXTURE_BINDING_BUFFER	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_BUFFER /;"	d
GL_TEXTURE_BINDING_CUBE_MAP	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP /;"	d
GL_TEXTURE_BINDING_RECTANGLE	include/glad/glad.h	/^#define GL_TEXTURE_BINDING_RECTANGLE /;"	d
GL_TEXTURE_BLUE_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_BLUE_SIZE /;"	d
GL_TEXTURE_BLUE_TYPE	include/glad/glad.h	/^#define GL_TEXTURE_BLUE_TYPE /;"	d
GL_TEXTURE_BORDER_COLOR	include/glad/glad.h	/^#define GL_TEXTURE_BORDER_COLOR /;"	d
GL_TEXTURE_BUFFER	include/glad/glad.h	/^#define GL_TEXTURE_BUFFER /;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	include/glad/glad.h	/^#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING /;"	d
GL_TEXTURE_COMPARE_FUNC	include/glad/glad.h	/^#define GL_TEXTURE_COMPARE_FUNC /;"	d
GL_TEXTURE_COMPARE_MODE	include/glad/glad.h	/^#define GL_TEXTURE_COMPARE_MODE /;"	d
GL_TEXTURE_COMPRESSED	include/glad/glad.h	/^#define GL_TEXTURE_COMPRESSED /;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE /;"	d
GL_TEXTURE_COMPRESSION_HINT	include/glad/glad.h	/^#define GL_TEXTURE_COMPRESSION_HINT /;"	d
GL_TEXTURE_CUBE_MAP	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	include/glad/glad.h	/^#define GL_TEXTURE_CUBE_MAP_SEAMLESS /;"	d
GL_TEXTURE_DEPTH	include/glad/glad.h	/^#define GL_TEXTURE_DEPTH /;"	d
GL_TEXTURE_DEPTH_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_DEPTH_SIZE /;"	d
GL_TEXTURE_DEPTH_TYPE	include/glad/glad.h	/^#define GL_TEXTURE_DEPTH_TYPE /;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	include/glad/glad.h	/^#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS /;"	d
GL_TEXTURE_GREEN_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_GREEN_SIZE /;"	d
GL_TEXTURE_GREEN_TYPE	include/glad/glad.h	/^#define GL_TEXTURE_GREEN_TYPE /;"	d
GL_TEXTURE_HEIGHT	include/glad/glad.h	/^#define GL_TEXTURE_HEIGHT /;"	d
GL_TEXTURE_INTERNAL_FORMAT	include/glad/glad.h	/^#define GL_TEXTURE_INTERNAL_FORMAT /;"	d
GL_TEXTURE_LOD_BIAS	include/glad/glad.h	/^#define GL_TEXTURE_LOD_BIAS /;"	d
GL_TEXTURE_MAG_FILTER	include/glad/glad.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MAG_FILTER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MAX_LEVEL	include/glad/glad.h	/^#define GL_TEXTURE_MAX_LEVEL /;"	d
GL_TEXTURE_MAX_LOD	include/glad/glad.h	/^#define GL_TEXTURE_MAX_LOD /;"	d
GL_TEXTURE_MIN_FILTER	include/glad/glad.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TEXTURE_MIN_FILTER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TEXTURE_MIN_LOD	include/glad/glad.h	/^#define GL_TEXTURE_MIN_LOD /;"	d
GL_TEXTURE_RECTANGLE	include/glad/glad.h	/^#define GL_TEXTURE_RECTANGLE /;"	d
GL_TEXTURE_RED_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_RED_SIZE /;"	d
GL_TEXTURE_RED_TYPE	include/glad/glad.h	/^#define GL_TEXTURE_RED_TYPE /;"	d
GL_TEXTURE_SAMPLES	include/glad/glad.h	/^#define GL_TEXTURE_SAMPLES /;"	d
GL_TEXTURE_SHARED_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_SHARED_SIZE /;"	d
GL_TEXTURE_STENCIL_SIZE	include/glad/glad.h	/^#define GL_TEXTURE_STENCIL_SIZE /;"	d
GL_TEXTURE_SWIZZLE_A	include/glad/glad.h	/^#define GL_TEXTURE_SWIZZLE_A /;"	d
GL_TEXTURE_SWIZZLE_B	include/glad/glad.h	/^#define GL_TEXTURE_SWIZZLE_B /;"	d
GL_TEXTURE_SWIZZLE_G	include/glad/glad.h	/^#define GL_TEXTURE_SWIZZLE_G /;"	d
GL_TEXTURE_SWIZZLE_R	include/glad/glad.h	/^#define GL_TEXTURE_SWIZZLE_R /;"	d
GL_TEXTURE_SWIZZLE_RGBA	include/glad/glad.h	/^#define GL_TEXTURE_SWIZZLE_RGBA /;"	d
GL_TEXTURE_WIDTH	include/glad/glad.h	/^#define GL_TEXTURE_WIDTH /;"	d
GL_TEXTURE_WRAP_R	include/glad/glad.h	/^#define GL_TEXTURE_WRAP_R /;"	d
GL_TEXTURE_WRAP_S	include/glad/glad.h	/^#define GL_TEXTURE_WRAP_S /;"	d
GL_TEXTURE_WRAP_T	include/glad/glad.h	/^#define GL_TEXTURE_WRAP_T /;"	d
GL_TIMEOUT_EXPIRED	include/glad/glad.h	/^#define GL_TIMEOUT_EXPIRED /;"	d
GL_TIMEOUT_IGNORED	include/glad/glad.h	/^#define GL_TIMEOUT_IGNORED /;"	d
GL_TIMESTAMP	include/glad/glad.h	/^#define GL_TIMESTAMP /;"	d
GL_TIME_ELAPSED	include/glad/glad.h	/^#define GL_TIME_ELAPSED /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_START /;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN /;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_VARYINGS /;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	include/glad/glad.h	/^#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH /;"	d
GL_TRIANGLES	include/glad/glad.h	/^#define GL_TRIANGLES /;"	d
GL_TRIANGLES	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TRIANGLES /;"	d
GL_TRIANGLES_ADJACENCY	include/glad/glad.h	/^#define GL_TRIANGLES_ADJACENCY /;"	d
GL_TRIANGLE_FAN	include/glad/glad.h	/^#define GL_TRIANGLE_FAN /;"	d
GL_TRIANGLE_STRIP	include/glad/glad.h	/^#define GL_TRIANGLE_STRIP /;"	d
GL_TRIANGLE_STRIP_ADJACENCY	include/glad/glad.h	/^#define GL_TRIANGLE_STRIP_ADJACENCY /;"	d
GL_TRUE	include/glad/glad.h	/^#define GL_TRUE /;"	d
GL_TRUE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_TRUE /;"	d
GL_UNIFORM_ARRAY_STRIDE	include/glad/glad.h	/^#define GL_UNIFORM_ARRAY_STRIDE /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES /;"	d
GL_UNIFORM_BLOCK_BINDING	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_BINDING /;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_DATA_SIZE /;"	d
GL_UNIFORM_BLOCK_INDEX	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_INDEX /;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_NAME_LENGTH /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	include/glad/glad.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_UNIFORM_BUFFER	include/glad/glad.h	/^#define GL_UNIFORM_BUFFER /;"	d
GL_UNIFORM_BUFFER_BINDING	include/glad/glad.h	/^#define GL_UNIFORM_BUFFER_BINDING /;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	include/glad/glad.h	/^#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_UNIFORM_BUFFER_SIZE	include/glad/glad.h	/^#define GL_UNIFORM_BUFFER_SIZE /;"	d
GL_UNIFORM_BUFFER_START	include/glad/glad.h	/^#define GL_UNIFORM_BUFFER_START /;"	d
GL_UNIFORM_IS_ROW_MAJOR	include/glad/glad.h	/^#define GL_UNIFORM_IS_ROW_MAJOR /;"	d
GL_UNIFORM_MATRIX_STRIDE	include/glad/glad.h	/^#define GL_UNIFORM_MATRIX_STRIDE /;"	d
GL_UNIFORM_NAME_LENGTH	include/glad/glad.h	/^#define GL_UNIFORM_NAME_LENGTH /;"	d
GL_UNIFORM_OFFSET	include/glad/glad.h	/^#define GL_UNIFORM_OFFSET /;"	d
GL_UNIFORM_SIZE	include/glad/glad.h	/^#define GL_UNIFORM_SIZE /;"	d
GL_UNIFORM_TYPE	include/glad/glad.h	/^#define GL_UNIFORM_TYPE /;"	d
GL_UNPACK_ALIGNMENT	include/glad/glad.h	/^#define GL_UNPACK_ALIGNMENT /;"	d
GL_UNPACK_IMAGE_HEIGHT	include/glad/glad.h	/^#define GL_UNPACK_IMAGE_HEIGHT /;"	d
GL_UNPACK_LSB_FIRST	include/glad/glad.h	/^#define GL_UNPACK_LSB_FIRST /;"	d
GL_UNPACK_ROW_LENGTH	include/glad/glad.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNPACK_ROW_LENGTH	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNPACK_SKIP_IMAGES	include/glad/glad.h	/^#define GL_UNPACK_SKIP_IMAGES /;"	d
GL_UNPACK_SKIP_PIXELS	include/glad/glad.h	/^#define GL_UNPACK_SKIP_PIXELS /;"	d
GL_UNPACK_SKIP_ROWS	include/glad/glad.h	/^#define GL_UNPACK_SKIP_ROWS /;"	d
GL_UNPACK_SWAP_BYTES	include/glad/glad.h	/^#define GL_UNPACK_SWAP_BYTES /;"	d
GL_UNSIGNALED	include/glad/glad.h	/^#define GL_UNSIGNALED /;"	d
GL_UNSIGNED_BYTE	include/glad/glad.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_BYTE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	include/glad/glad.h	/^#define GL_UNSIGNED_BYTE_2_3_3_REV /;"	d
GL_UNSIGNED_BYTE_3_3_2	include/glad/glad.h	/^#define GL_UNSIGNED_BYTE_3_3_2 /;"	d
GL_UNSIGNED_INT	include/glad/glad.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_INT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	include/glad/glad.h	/^#define GL_UNSIGNED_INT_10F_11F_11F_REV /;"	d
GL_UNSIGNED_INT_10_10_10_2	include/glad/glad.h	/^#define GL_UNSIGNED_INT_10_10_10_2 /;"	d
GL_UNSIGNED_INT_24_8	include/glad/glad.h	/^#define GL_UNSIGNED_INT_24_8 /;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	include/glad/glad.h	/^#define GL_UNSIGNED_INT_2_10_10_10_REV /;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	include/glad/glad.h	/^#define GL_UNSIGNED_INT_5_9_9_9_REV /;"	d
GL_UNSIGNED_INT_8_8_8_8	include/glad/glad.h	/^#define GL_UNSIGNED_INT_8_8_8_8 /;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	include/glad/glad.h	/^#define GL_UNSIGNED_INT_8_8_8_8_REV /;"	d
GL_UNSIGNED_INT_SAMPLER_1D	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D /;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_RECT /;"	d
GL_UNSIGNED_INT_SAMPLER_3D	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_3D /;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_BUFFER /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	include/glad/glad.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE /;"	d
GL_UNSIGNED_INT_VEC2	include/glad/glad.h	/^#define GL_UNSIGNED_INT_VEC2 /;"	d
GL_UNSIGNED_INT_VEC3	include/glad/glad.h	/^#define GL_UNSIGNED_INT_VEC3 /;"	d
GL_UNSIGNED_INT_VEC4	include/glad/glad.h	/^#define GL_UNSIGNED_INT_VEC4 /;"	d
GL_UNSIGNED_NORMALIZED	include/glad/glad.h	/^#define GL_UNSIGNED_NORMALIZED /;"	d
GL_UNSIGNED_SHORT	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UNSIGNED_SHORT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_1_5_5_5_REV /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4_REV /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	include/glad/glad.h	/^#define GL_UNSIGNED_SHORT_5_6_5_REV /;"	d
GL_UPPER_LEFT	include/glad/glad.h	/^#define GL_UPPER_LEFT /;"	d
GL_UPPER_LEFT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_UPPER_LEFT /;"	d
GL_VALIDATE_STATUS	include/glad/glad.h	/^#define GL_VALIDATE_STATUS /;"	d
GL_VENDOR	include/glad/glad.h	/^#define GL_VENDOR /;"	d
GL_VENDOR	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VENDOR /;"	d
GL_VERSION	include/glad/glad.h	/^#define GL_VERSION /;"	d
GL_VERSION	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERSION /;"	d
GL_VERSION_1_0	include/glad/glad.h	/^#define GL_VERSION_1_0 /;"	d
GL_VERSION_1_1	include/glad/glad.h	/^#define GL_VERSION_1_1 /;"	d
GL_VERSION_1_2	include/glad/glad.h	/^#define GL_VERSION_1_2 /;"	d
GL_VERSION_1_3	include/glad/glad.h	/^#define GL_VERSION_1_3 /;"	d
GL_VERSION_1_4	include/glad/glad.h	/^#define GL_VERSION_1_4 /;"	d
GL_VERSION_1_5	include/glad/glad.h	/^#define GL_VERSION_1_5 /;"	d
GL_VERSION_2_0	include/glad/glad.h	/^#define GL_VERSION_2_0 /;"	d
GL_VERSION_2_1	include/glad/glad.h	/^#define GL_VERSION_2_1 /;"	d
GL_VERSION_3_0	include/glad/glad.h	/^#define GL_VERSION_3_0 /;"	d
GL_VERSION_3_1	include/glad/glad.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_1	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	include/glad/glad.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_2	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	include/glad/glad.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERSION_3_3	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERTEX_ARRAY_BINDING	imgui/imgui_impl_opengl3.cpp	/^#define GL_VERTEX_ARRAY_BINDING GL_VERTEX_ARRAY_BINDING_/;"	d	file:
GL_VERTEX_ARRAY_BINDING	include/glad/glad.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ARRAY_BINDING	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_INTEGER /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	include/glad/glad.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	include/glad/glad.h	/^#define GL_VERTEX_PROGRAM_POINT_SIZE /;"	d
GL_VERTEX_SHADER	include/glad/glad.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VERTEX_SHADER	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VIEWPORT	include/glad/glad.h	/^#define GL_VIEWPORT /;"	d
GL_VIEWPORT	include/imgui/imgui_impl_opengl3_loader.h	/^#define GL_VIEWPORT /;"	d
GL_WAIT_FAILED	include/glad/glad.h	/^#define GL_WAIT_FAILED /;"	d
GL_WRITE_ONLY	include/glad/glad.h	/^#define GL_WRITE_ONLY /;"	d
GL_XOR	include/glad/glad.h	/^#define GL_XOR /;"	d
GL_ZERO	include/glad/glad.h	/^#define GL_ZERO /;"	d
GLbitfield	include/glad/glad.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLbitfield	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLboolean	include/glad/glad.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLboolean	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLbyte	include/glad/glad.h	/^typedef khronos_int8_t GLbyte;$/;"	t	typeref:typename:khronos_int8_t
GLbyte	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_int8_t GLbyte;$/;"	t	typeref:typename:khronos_int8_t
GLchar	include/glad/glad.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLchar	include/imgui/imgui_impl_opengl3_loader.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLcharARB	include/glad/glad.h	/^typedef char GLcharARB;$/;"	t	typeref:typename:char
GLclampd	include/glad/glad.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampd	include/imgui/imgui_impl_opengl3_loader.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampf	include/glad/glad.h	/^typedef khronos_float_t GLclampf;$/;"	t	typeref:typename:khronos_float_t
GLclampf	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLclampf;$/;"	t	typeref:typename:khronos_float_t
GLclampx	include/glad/glad.h	/^typedef khronos_int32_t GLclampx;$/;"	t	typeref:typename:khronos_int32_t
GLdouble	include/glad/glad.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLdouble	include/imgui/imgui_impl_opengl3_loader.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLeglClientBufferEXT	include/glad/glad.h	/^typedef void *GLeglClientBufferEXT;$/;"	t	typeref:typename:void *
GLeglImageOES	include/glad/glad.h	/^typedef void *GLeglImageOES;$/;"	t	typeref:typename:void *
GLeglImageOES	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void *GLeglImageOES;$/;"	t	typeref:typename:void *
GLenum	include/glad/glad.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLenum	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLfixed	include/glad/glad.h	/^typedef khronos_int32_t GLfixed;$/;"	t	typeref:typename:khronos_int32_t
GLfloat	include/glad/glad.h	/^typedef khronos_float_t GLfloat;$/;"	t	typeref:typename:khronos_float_t
GLfloat	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLfloat;$/;"	t	typeref:typename:khronos_float_t
GLhalf	include/glad/glad.h	/^typedef khronos_uint16_t GLhalf;$/;"	t	typeref:typename:khronos_uint16_t
GLhalf	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLhalf;$/;"	t	typeref:typename:khronos_uint16_t
GLhalfARB	include/glad/glad.h	/^typedef khronos_uint16_t GLhalfARB;$/;"	t	typeref:typename:khronos_uint16_t
GLhalfNV	include/glad/glad.h	/^typedef unsigned short GLhalfNV;$/;"	t	typeref:typename:unsigned short
GLhandleARB	include/glad/glad.h	/^typedef unsigned int GLhandleARB;$/;"	t	typeref:typename:unsigned int
GLhandleARB	include/glad/glad.h	/^typedef void *GLhandleARB;$/;"	t	typeref:typename:void *
GLint	include/glad/glad.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint	include/imgui/imgui_impl_opengl3_loader.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint64	include/glad/glad.h	/^typedef khronos_int64_t GLint64;$/;"	t	typeref:typename:khronos_int64_t
GLint64	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64;$/;"	t	typeref:typename:khronos_int64_t
GLint64EXT	include/glad/glad.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t	typeref:typename:khronos_int64_t
GLint64EXT	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t	typeref:typename:khronos_int64_t
GLintptr	include/glad/glad.h	/^typedef khronos_intptr_t GLintptr;$/;"	t	typeref:typename:khronos_intptr_t
GLintptr	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_intptr_t GLintptr;$/;"	t	typeref:typename:khronos_intptr_t
GLintptrARB	include/glad/glad.h	/^typedef khronos_intptr_t GLintptrARB;$/;"	t	typeref:typename:khronos_intptr_t
GLocalizationEntriesEnUS	imgui/imgui.cpp	/^static const ImGuiLocEntry GLocalizationEntriesEnUS[] =$/;"	v	typeref:typename:const ImGuiLocEntry[]	file:
GLshort	include/glad/glad.h	/^typedef khronos_int16_t GLshort;$/;"	t	typeref:typename:khronos_int16_t
GLshort	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_int16_t GLshort;$/;"	t	typeref:typename:khronos_int16_t
GLsizei	include/glad/glad.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizei	include/imgui/imgui_impl_opengl3_loader.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizeiptr	include/glad/glad.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t	typeref:typename:khronos_ssize_t
GLsizeiptr	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t	typeref:typename:khronos_ssize_t
GLsizeiptrARB	include/glad/glad.h	/^typedef khronos_ssize_t GLsizeiptrARB;$/;"	t	typeref:typename:khronos_ssize_t
GLsync	include/glad/glad.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLsync	include/imgui/imgui_impl_opengl3_loader.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLubyte	include/glad/glad.h	/^typedef khronos_uint8_t GLubyte;$/;"	t	typeref:typename:khronos_uint8_t
GLubyte	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_uint8_t GLubyte;$/;"	t	typeref:typename:khronos_uint8_t
GLuint	include/glad/glad.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint64	include/glad/glad.h	/^typedef khronos_uint64_t GLuint64;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64EXT	include/glad/glad.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64EXT	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t	typeref:typename:khronos_uint64_t
GLushort	include/glad/glad.h	/^typedef khronos_uint16_t GLushort;$/;"	t	typeref:typename:khronos_uint16_t
GLushort	include/imgui/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLushort;$/;"	t	typeref:typename:khronos_uint16_t
GLvdpauSurfaceNV	include/glad/glad.h	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t	typeref:typename:GLintptr
GLvoid	include/glad/glad.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GLvoid	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GREEN	shared.h	/^    #define GREEN /;"	d
GStyleVarInfo	imgui/imgui.cpp	/^static const ImGuiDataVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiDataVarInfo[]	file:
GcAwakeTransientWindowBuffers	imgui/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	include/imgui/imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	imgui/imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	imgui/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GenBuffers	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGENBUFFERSPROC               GenBuffers;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGENBUFFERSPROC
GenTextures	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGENTEXTURESPROC              GenTextures;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGENTEXTURESPROC
GenVertexArrays	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGENVERTEXARRAYSPROC          GenVertexArrays;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGENVERTEXARRAYSPROC
GetActiveID	include/imgui/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	include/imgui/imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	imgui/imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	include/imgui/imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	include/imgui/imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetAttribLocation	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETATTRIBLOCATIONPROC        GetAttribLocation;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
GetBL	include/imgui/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	include/imgui/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	include/imgui/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	imgui/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	imgui/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBufSize	include/imgui/imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	include/imgui/imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVe/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetByIndex	include/imgui/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	include/imgui/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	include/imgui/imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCenter	include/imgui/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	include/imgui/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	include/imgui/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	include/imgui/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	imgui/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	include/imgui/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	imgui/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void* user_data_ctx)$/;"	f	typeref:typename:const char *	file:
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	imgui/imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	imgui/imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	imgui/imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	imgui/imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	include/imgui/imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	imgui/imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	imgui/imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	imgui/imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	imgui/imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	imgui/imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	imgui/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentFocusScope	include/imgui/imgui_internal.h	/^    inline ImGuiID          GetCurrentFocusScope() { ImGuiContext& g = *GImGui; return g.Current/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetCurrentTabBar	include/imgui/imgui_internal.h	/^    inline    ImGuiTabBar*  GetCurrentTabBar() { ImGuiContext& g = *GImGui; return g.CurrentTabB/;"	f	namespace:ImGui	typeref:typename:ImGuiTabBar *
GetCurrentTable	include/imgui/imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	include/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	include/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	include/imgui/imgui_internal.h	/^    int         GetCursorPos() const        { return Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	imgui/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	imgui/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	include/imgui/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	include/imgui/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	imgui/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	include/imgui/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	imgui/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	imgui/imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	imgui/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListCount	include/imgui/imgui_internal.h	/^    int  GetDrawListCount() const   { int count = 0; for (int n = 0; n < IM_ARRAYSIZE(Layers); n/;"	f	struct:ImDrawDataBuilder	typeref:typename:int
GetDrawListSharedData	imgui/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetError	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETERRORPROC                 GetError;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETERRORPROC
GetFallbackWindowNameForWindowingList	imgui/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	imgui/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	imgui/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	include/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	imgui/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	imgui/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	imgui/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	include/imgui/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); retu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	imgui/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	imgui/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	imgui/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesGreek	imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesGreek()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	include/imgui/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	imgui/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	imgui/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIDWithSeed	imgui/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(int n, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	imgui/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	include/imgui/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	imgui/imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	include/imgui/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	imgui/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	imgui/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetIntegerv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETINTEGERVPROC              GetIntegerv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETINTEGERVPROC
GetItemFlags	include/imgui/imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	imgui/imgui.cpp	/^ImGuiID ImGui::GetItemID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetItemRectMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	include/imgui/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags(){ ImGuiContext& g = *GImGui; return g.LastIt/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyChordName	imgui/imgui.cpp	/^void ImGui::GetKeyChordName(ImGuiKeyChord key_chord, char* out_buf, int out_buf_size)$/;"	f	class:ImGui	typeref:typename:void
GetKeyData	imgui/imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiContext* ctx, ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyData	include/imgui/imgui_internal.h	/^    inline ImGuiKeyData*    GetKeyData(ImGuiKey key)                                    { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyData *
GetKeyIndex	imgui/imgui.cpp	/^ImGuiKey ImGui::GetKeyIndex(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKey
GetKeyMagnitude2d	imgui/imgui.cpp	/^ImVec2 ImGui::GetKeyMagnitude2d(ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey/;"	f	class:ImGui	typeref:typename:ImVec2
GetKeyName	imgui/imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyOwner	imgui/imgui.cpp	/^ImGuiID ImGui::GetKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetKeyOwnerData	include/imgui/imgui_internal.h	/^    inline ImGuiKeyOwnerData*   GetKeyOwnerData(ImGuiContext* ctx, ImGuiKey key)                /;"	f	namespace:ImGui	typeref:typename:ImGuiKeyOwnerData *
GetKeyPressedAmount	imgui/imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMainRect	include/imgui/imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	imgui/imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	include/imgui/imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModsFromKeys	imgui/imgui.cpp	/^static ImGuiKeyChord GetMergedModsFromKeys()$/;"	f	typeref:typename:ImGuiKeyChord	file:
GetMinimumStepAtDecimalPrecision	imgui/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseClickedCount	imgui/imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	imgui/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	imgui/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	imgui/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMouseSourceFromMessageExtraInfo	imgui/imgui_impl_glfw.cpp	/^static ImGuiMouseSource GetMouseSourceFromMessageExtraInfo()$/;"	f	typeref:typename:ImGuiMouseSource	file:
GetMouseSourceName	imgui/imgui.cpp	/^static const char* GetMouseSourceName(ImGuiMouseSource source)$/;"	f	typeref:typename:const char *	file:
GetName	include/imgui/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavTweakPressedAmount	imgui/imgui.cpp	/^float ImGui::GetNavTweakPressedAmount(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:float
GetOrAddByKey	include/imgui/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPopupAllowedExtentRect	imgui/imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetProgramInfoLog	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMINFOLOGPROC        GetProgramInfoLog;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
GetProgramiv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMIVPROC             GetProgramiv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETPROGRAMIVPROC
GetRedoAvailCount	include/imgui/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	imgui/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetRoutingIdFromOwnerId	imgui/imgui.cpp	/^static inline ImGuiID GetRoutingIdFromOwnerId(ImGuiID owner_id)$/;"	f	typeref:typename:ImGuiID	file:
GetScrollMaxX	imgui/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	imgui/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	imgui/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	imgui/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	include/imgui/imgui_internal.h	/^    int         GetSelectionEnd() const     { return Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	include/imgui/imgui_internal.h	/^    int         GetSelectionStart() const   { return Stb.select_start; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetShaderInfoLog	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERINFOLOGPROC         GetShaderInfoLog;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETSHADERINFOLOGPROC
GetShaderiv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERIVPROC              GetShaderiv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETSHADERIVPROC
GetShortcutRoutingData	imgui/imgui.cpp	/^ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyRoutingData *
GetSize	include/imgui/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSize	include/imgui/imgui_internal.h	/^    int         GetSize()                           { return GetMapSize(); } \/\/ For ImPlot: sh/;"	f	struct:ImPool	typeref:typename:int
GetSkipItemForListClipping	imgui/imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	include/imgui/imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	include/imgui/imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	include/imgui/imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetState	imgui/imgui_impl_opengl3.cpp	/^    void GetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
GetStateStorage	imgui/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetString	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGPROC                GetString;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETSTRINGPROC
GetStringi	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGIPROC               GetStringi;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETSTRINGIPROC
GetStyle	imgui/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	imgui/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	imgui/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	imgui/imgui.cpp	/^const ImGuiDataVarInfo* ImGui::GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataVarInfo *
GetTL	include/imgui/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	include/imgui/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	imgui/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	imgui/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTableRect	imgui/imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexID	include/imgui/imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetTextLineHeight	imgui/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	imgui/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	imgui/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	imgui/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTypematicRepeatRate	imgui/imgui.cpp	/^void ImGui::GetTypematicRepeatRate(ImGuiInputFlags flags, float* repeat_delay, float* repeat_rat/;"	f	class:ImGui	typeref:typename:void
GetUndoAvailCount	include/imgui/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetUniformLocation	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETUNIFORMLOCATIONPROC       GetUniformLocation;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
GetVarPtr	include/imgui/imgui_internal.h	/^    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }$/;"	f	struct:ImGuiDataVarInfo	typeref:typename:void *
GetVersion	imgui/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetVertexAttribPointerv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBPOINTERVPROC  GetVertexAttribPointerv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
GetVertexAttribiv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBIVPROC        GetVertexAttribiv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
GetViewportDrawList	imgui/imgui.cpp	/^static ImDrawList* GetViewportDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const char*/;"	f	typeref:typename:ImDrawList *	file:
GetVoidPtr	imgui/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	imgui/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	include/imgui/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowBgColorIdx	imgui/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionWidth	include/imgui/imgui.h	/^    static inline float GetWindowContentRegionWidth()                                       { re/;"	f	namespace:ImGui	typeref:typename:float
GetWindowDisplayLayer	imgui/imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	imgui/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	imgui/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	imgui/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	imgui/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	imgui/imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	imgui/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkCenter	include/imgui/imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetWorkRect	include/imgui/imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GlVersion	imgui/imgui_impl_opengl3.cpp	/^    GLuint          GlVersion;               \/\/ Extracted at runtime using GL_MAJOR_VERSION, G/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
GlfwClientApi	imgui/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
GlfwWndProc	imgui/imgui_impl_glfw.cpp	/^    WNDPROC                 GlfwWndProc;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:WNDPROC	file:
GlslVersionString	imgui/imgui_impl_opengl3.cpp	/^    char            GlslVersionString[32];   \/\/ Specified by user or detected based on compile/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:char[32]	file:
GlyphAdvanceX	include/imgui/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	include/imgui/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	include/imgui/imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphMaxAdvanceX	include/imgui/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	include/imgui/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	include/imgui/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	include/imgui/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	include/imgui/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ THE ARRAY DATA NEEDS TO PERSIST A/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	include/imgui/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	imgui/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	imgui/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	imgui/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	imgui/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	imgui/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GrabMinSize	include/imgui/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	include/imgui/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	include/imgui/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;                         \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	imgui/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HAVE_WINAPIFAMILY	glad.c	/^    #define HAVE_WINAPIFAMILY /;"	d	file:
HAVE_WINAPIFAMILY	glad.c	/^  #define HAVE_WINAPIFAMILY /;"	d	file:
HEIGHT	shared.h	/^    const float HEIGHT = 600.f; $/;"	v	typeref:typename:const float
HEX	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HEX	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HSV	include/imgui/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasClipOrigin	imgui/imgui_impl_opengl3.cpp	/^    bool            HasClipOrigin;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasCloseButton	include/imgui/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasScrollbarYCurr	include/imgui/imgui_internal.h	/^    bool                        HasScrollbarYCurr;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasScrollbarYPrev	include/imgui/imgui_internal.h	/^    bool                        HasScrollbarYPrev;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasSelection	include/imgui/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	include/imgui/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	include/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
HeldHeaderColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	imgui/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	include/imgui/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	include/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	include/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	include/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
History	imgui/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	imgui/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	include/imgui/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	include/imgui/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	include/imgui/imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	include/imgui/imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hooks	include/imgui/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	include/imgui/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	include/imgui/imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	include/imgui/imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	include/imgui/imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	include/imgui/imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	include/imgui/imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	include/imgui/imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	include/imgui/imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	include/imgui/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	include/imgui/imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	include/imgui/imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	include/imgui/imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	include/imgui/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	include/imgui/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	include/imgui/imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	include/imgui/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	include/imgui/imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HoverDelayClearTimer	include/imgui/imgui_internal.h	/^    float                   HoverDelayClearTimer;               \/\/ Currently used IsItemHovere/;"	m	struct:ImGuiContext	typeref:typename:float
HoverDelayId	include/imgui/imgui_internal.h	/^    ImGuiID                 HoverDelayId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverDelayIdPreviousFrame	include/imgui/imgui_internal.h	/^    ImGuiID                 HoverDelayIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverDelayNormal	include/imgui/imgui.h	/^    float       HoverDelayNormal;               \/\/ = 0.30 sec       \/\/ Delay on hovering bef/;"	m	struct:ImGuiIO	typeref:typename:float
HoverDelayShort	include/imgui/imgui.h	/^    float       HoverDelayShort;                \/\/ = 0.10 sec       \/\/ Delay on hovering bef/;"	m	struct:ImGuiIO	typeref:typename:float
HoverDelayTimer	include/imgui/imgui_internal.h	/^    float                   HoverDelayTimer;                    \/\/ Currently used IsItemHovere/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredColumnBody	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	include/imgui/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	include/imgui/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdDisabled	include/imgui/imgui_internal.h	/^    bool                    HoveredIdDisabled;                  \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	include/imgui/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	include/imgui/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	include/imgui/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
How to move	readme.md	/^# How to move$/;"	c
ID	imgui/imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anone28545ff0111::MyItem	typeref:typename:int	file:
ID	include/imgui/imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID            ID;              \/\/ widget id owning the text state (which just got dea/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImGuiID
ID	include/imgui/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
ID_VOID_MAIN	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
ID_VOID_MAIN	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IMGL3W_IMPL	imgui/imgui_impl_opengl3.cpp	/^#define IMGL3W_IMPL$/;"	d	file:
IMGUI_API	include/imgui/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	imgui/imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	imgui/imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	include/imgui/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	include/imgui/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	include/imgui/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_INI_SETTINGS	imgui/imgui.cpp	/^#define IMGUI_DEBUG_INI_SETTINGS /;"	d	file:
IMGUI_DEBUG_LOG	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_CLIPPER	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_CLIPPER(/;"	d
IMGUI_DEBUG_LOG_FOCUS	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_IO	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_LOG_SELECTION	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_SELECTION(/;"	d
IMGUI_DEBUG_NAV_RECTS	imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	include/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED	include/imgui/imgui.h	/^#define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED$/;"	d
IMGUI_DEMO_MARKER	imgui/imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DISABLE_DEBUG_TOOLS	include/imgui/imgui.h	/^#define IMGUI_DISABLE_DEBUG_TOOLS$/;"	d
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	include/imgui/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	include/imgui/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_ENABLE_SSE	include/imgui/imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	include/imgui/imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_HAS_TABLE	include/imgui/imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_IMPL_API	include/imgui/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_HAS_POLYGON_MODE	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_HAS_POLYGON_MODE$/;"	d	file:
IMGUI_IMPL_OPENGL_ES2	include/imgui/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d
IMGUI_IMPL_OPENGL_ES3	include/imgui/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET$/;"	d	file:
IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY	imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY$/;"	d	file:
IMGUI_PAYLOAD_TYPE_COLOR_3F	include/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	include/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	imgui/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	include/imgui/imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	include/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	include/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	include/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	include/imgui/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	include/imgui/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IM_ALLOC	include/imgui/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	include/imgui/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	include/imgui/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	include/imgui/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	include/imgui/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_BITARRAY_CLEARBIT	include/imgui/imgui_internal.h	/^#define         IM_BITARRAY_CLEARBIT(/;"	d
IM_BITARRAY_TESTBIT	include/imgui/imgui_internal.h	/^#define         IM_BITARRAY_TESTBIT(/;"	d
IM_CLAMP	imgui/imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32	include/imgui/imgui.h	/^#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | /;"	d
IM_COL32_A_MASK	include/imgui/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	include/imgui/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	include/imgui/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	include/imgui/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	include/imgui/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_DISABLE	include/imgui/imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_COL32_G_SHIFT	include/imgui/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	include/imgui/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	include/imgui/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	include/imgui/imgui_internal.h	/^#define IM_DEBUG_BREAK()    IM_ASSERT(0)    \/\/ It is expected that you define IM_DEBUG_BREAK(/;"	d
IM_DEBUG_BREAK	include/imgui/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	include/imgui/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	include/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	include/imgui/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	include/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	include/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(VX,VY)               { float d2 = VX*VX + VY*VY; if (d2 > 0.000001f) { fl/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	include/imgui/imgui_internal.h	/^#define IM_FLOOR(/;"	d
IM_FMTARGS	include/imgui/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	include/imgui/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	include/imgui/imgui.h	/^#define IM_FREE(/;"	d
IM_MAX	imgui/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	include/imgui/imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	imgui/imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_RUNTIME_CHECKS_OFF	include/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	include/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	include/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	include/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_MSVC_WARNING_SUPPRESS	include/imgui/imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEW	include/imgui/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	imgui/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	include/imgui/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	imgui/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	include/imgui/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	include/imgui/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	include/imgui/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_PRId64	imgui/imgui_demo.cpp	/^#define IM_PRId64 /;"	d	file:
IM_PRIu64	imgui/imgui_demo.cpp	/^#define IM_PRIu64 /;"	d	file:
IM_ROUND	include/imgui/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	include/imgui/imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	include/imgui/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_TABSIZE	include/imgui/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_U16_MAX	imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	include/imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	include/imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	include/imgui/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDE_STB_TEXTEDIT_H	include/imgui/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
IO	include/imgui/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IS_UWP	glad.c	/^    #define IS_UWP /;"	d	file:
IdealMaxPos	include/imgui/imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
IdxBuffer	include/imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	include/imgui/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAbs	include/imgui/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	include/imgui/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	include/imgui/imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	include/imgui/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	imgui/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	imgui/imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IMGUI_API ImU32
ImAtan2	include/imgui/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	include/imgui/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	imgui/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	imgui/imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	imgui/imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	imgui/imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	imgui/imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	imgui/imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	include/imgui/imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	include/imgui/imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearAllBits	include/imgui/imgui_internal.h	/^inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetSt/;"	f	typeref:typename:void
ImBitArrayClearBit	include/imgui/imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	include/imgui/imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArrayGetStorageSizeInBytes	include/imgui/imgui_internal.h	/^inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31/;"	f	typeref:typename:size_t
ImBitArrayPtr	include/imgui/imgui_internal.h	/^typedef ImU32* ImBitArrayPtr; \/\/ Name for use in structs$/;"	t	typeref:typename:ImU32 *
ImBitArraySetBit	include/imgui/imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	include/imgui/imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	include/imgui/imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:bool
ImBitVector	include/imgui/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	include/imgui/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	include/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	include/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	include/imgui/imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	include/imgui/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	include/imgui/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	include/imgui/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	include/imgui/imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	include/imgui/imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	include/imgui/imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	include/imgui/imgui.h	/^struct ImColor$/;"	s
ImCos	include/imgui/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	include/imgui/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	include/imgui/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	include/imgui/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	include/imgui/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	include/imgui/imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	include/imgui/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	include/imgui/imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCmd_AreSequentialIdxOffset	imgui/imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawCornerFlags	include/imgui/imgui.h	/^typedef ImDrawFlags ImDrawCornerFlags;$/;"	t	typeref:typename:ImDrawFlags
ImDrawCornerFlags_	include/imgui/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	include/imgui/imgui.h	/^    ImDrawCornerFlags_All       = ImDrawFlags_RoundCornersAll,          \/\/ Was == 0x0F prior t/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	include/imgui/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	include/imgui/imgui.h	/^    ImDrawCornerFlags_BotLeft   = ImDrawFlags_RoundCornersBottomLeft,   \/\/ Was == 0x04 (1 << 2/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	include/imgui/imgui.h	/^    ImDrawCornerFlags_BotRight  = ImDrawFlags_RoundCornersBottomRight,  \/\/ Was == 0x08 (1 << 3/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	include/imgui/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_None	include/imgui/imgui.h	/^    ImDrawCornerFlags_None      = ImDrawFlags_RoundCornersNone,         \/\/ Was == 0 prior to 1/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	include/imgui/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	include/imgui/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	include/imgui/imgui.h	/^    ImDrawCornerFlags_TopLeft   = ImDrawFlags_RoundCornersTopLeft,      \/\/ Was == 0x01 (1 << 0/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	include/imgui/imgui.h	/^    ImDrawCornerFlags_TopRight  = ImDrawFlags_RoundCornersTopRight,     \/\/ Was == 0x02 (1 << 1/;"	e	enum:ImDrawCornerFlags_
ImDrawData	include/imgui/imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	include/imgui/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	include/imgui/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawFlags	include/imgui/imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	include/imgui/imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	include/imgui/imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	include/imgui/imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	include/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	include/imgui/imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	include/imgui/imgui.h	/^    ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shar/;"	f	struct:ImDrawList
ImDrawList	include/imgui/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	include/imgui/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	include/imgui/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	include/imgui/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3,  \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	include/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	include/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	include/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	include/imgui/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	imgui/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	include/imgui/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	include/imgui/imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	include/imgui/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	include/imgui/imgui.h	/^struct ImDrawVert$/;"	s
ImExponentialMovingAverage	include/imgui/imgui_internal.h	/^static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg \/ /;"	f	typeref:typename:float
ImFabs	include/imgui/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	imgui/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	include/imgui/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	imgui/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	include/imgui/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	include/imgui/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	include/imgui/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	imgui/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	imgui/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	include/imgui/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	imgui/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	include/imgui/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	imgui/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	include/imgui/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	include/imgui/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	include/imgui/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFloorSigned	include/imgui/imgui_internal.h	/^static inline ImVec2 ImFloorSigned(const ImVec2& v)                             { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloorSigned	include/imgui/imgui_internal.h	/^static inline float  ImFloorSigned(float f)                                     { return (float)/;"	f	typeref:typename:float
ImFmod	include/imgui/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	imgui/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFont	include/imgui/imgui.h	/^struct ImFont$/;"	s
ImFontAtlas	imgui/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlas	include/imgui/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlasBuildFinish	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	imgui/imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasCustomRect	include/imgui/imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	include/imgui/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	include/imgui/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	include/imgui/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	include/imgui/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2,   \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	include/imgui/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	include/imgui/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	include/imgui/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasGetBuilderForStbTruetype	imgui/imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontBuildDstData	imgui/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	imgui/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuilderIO	include/imgui/imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	imgui/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontConfig	include/imgui/imgui.h	/^struct ImFontConfig$/;"	s
ImFontGlyph	include/imgui/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	include/imgui/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	include/imgui/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	imgui/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	imgui/imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	imgui/imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	imgui/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGetDirQuadrantFromDelta	imgui/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir
ImGui	imgui/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui/imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	imgui/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	include/imgui/imgui.h	/^namespace ImGui$/;"	n
ImGui	include/imgui/imgui_internal.h	/^namespace ImGui$/;"	n
ImGuiActivateFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	include/imgui/imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_None	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2,       \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	include/imgui/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	include/imgui/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	include/imgui/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	include/imgui/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	include/imgui/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	include/imgui/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	include/imgui/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	include/imgui/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	include/imgui/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	include/imgui/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	include/imgui/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	include/imgui/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	include/imgui/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowItemOverlap	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonDefault_	include/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	include/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	include/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	include/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	include/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoSetKeyOwner	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  \/\/ don't set key\/input owner on the i/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoTestKeyOwner	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  \/\/ don't test key\/input owner when po/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	include/imgui/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease,$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	include/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiCol	include/imgui/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	include/imgui/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	include/imgui/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	include/imgui/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	include/imgui/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	include/imgui/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	include/imgui/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	include/imgui/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	include/imgui/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	include/imgui/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	include/imgui/imgui.h	/^    ImGuiCol_DragDropTarget,        \/\/ Rectangle highlighting a drop target$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	include/imgui/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	include/imgui/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	include/imgui/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	include/imgui/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	include/imgui/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	include/imgui/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	include/imgui/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	include/imgui/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	include/imgui/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	include/imgui/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	include/imgui/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	include/imgui/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	include/imgui/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	include/imgui/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	include/imgui/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	include/imgui/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	include/imgui/imgui.h	/^    ImGuiCol_ResizeGrip,            \/\/ Resize grip in lower-right and lower-left corners of wi/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	include/imgui/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	include/imgui/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	include/imgui/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	include/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	include/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	include/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	include/imgui/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	include/imgui/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	include/imgui/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	include/imgui/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	include/imgui/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	include/imgui/imgui.h	/^    ImGuiCol_Tab,                   \/\/ TabItem in a TabBar$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	include/imgui/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	include/imgui/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	include/imgui/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	include/imgui/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	include/imgui/imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	include/imgui/imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	include/imgui/imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	include/imgui/imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	include/imgui/imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	include/imgui/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	include/imgui/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	include/imgui/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	include/imgui/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	include/imgui/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	include/imgui/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	include/imgui/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	include/imgui/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	include/imgui/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	include/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	include/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	include/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	include/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	include/imgui/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	include/imgui/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	include/imgui/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	include/imgui/imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	include/imgui/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	include/imgui/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	include/imgui/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	include/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	include/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	include/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	include/imgui/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	include/imgui/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnsFlags_GrowParentContentsSize	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize    = ImGuiOldColumnFlags_GrowParentContentsSize,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoBorder	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder                  = ImGuiOldColumnFlags_NoBorder,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoForceWithinWindow	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow       = ImGuiOldColumnFlags_NoForceWithinWindow,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoPreserveWidths	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths          = ImGuiOldColumnFlags_NoPreserveWidths,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoResize	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize                  = ImGuiOldColumnFlags_NoResize,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_None	include/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_None                      = ImGuiOldColumnFlags_None,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiComboFlags	include/imgui/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_	include/imgui/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_CustomPreview	include/imgui/imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20,  \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboFlags_HeightLarge	include/imgui/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	include/imgui/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	include/imgui/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	include/imgui/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	include/imgui/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	include/imgui/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	include/imgui/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	include/imgui/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	include/imgui/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiComboPreviewData	include/imgui/imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiCond	include/imgui/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	include/imgui/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	include/imgui/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable), same as _No/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	include/imgui/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3,   \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	include/imgui/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	include/imgui/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	include/imgui/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	include/imgui/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	include/imgui/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	include/imgui/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	include/imgui/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	include/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	include/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	include/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	include/imgui/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	include/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	include/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	include/imgui/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	include/imgui/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	struct:ImGuiContext
ImGuiContext	include/imgui/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	include/imgui/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	include/imgui/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	include/imgui/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	include/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataType	include/imgui/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	include/imgui/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	include/imgui/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeTempStorage	include/imgui/imgui_internal.h	/^struct ImGuiDataTypeTempStorage$/;"	s
ImGuiDataType_	include/imgui/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	include/imgui/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	include/imgui/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	include/imgui/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	include/imgui/imgui_internal.h	/^    ImGuiDataType_ID,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	include/imgui/imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	include/imgui/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	include/imgui/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	include/imgui/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	include/imgui/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	include/imgui/imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_U16	include/imgui/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	include/imgui/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	include/imgui/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	include/imgui/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDataVarInfo	include/imgui/imgui_internal.h	/^struct ImGuiDataVarInfo$/;"	s
ImGuiDebugLogFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	include/imgui/imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId    = 1 << 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventClipper	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventClipper     = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus       = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO          = 1 << 6,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_       = ImGuiDebugLogFlags_EventActiveId  | ImGuiDebugLogFlags/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav         = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup       = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventSelection	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventSelection   = 1 << 5,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_None             = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	include/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY      = 1 << 10,  \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	imgui/imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiDir	include/imgui/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	include/imgui/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	include/imgui/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	include/imgui/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	include/imgui/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	include/imgui/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	include/imgui/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	include/imgui/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	include/imgui/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	include/imgui/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	include/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	include/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	include/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	include/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	include/imgui/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	include/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ Disable preview tooltip. By/;"	e	enum:ImGuiDragDropFlags_
ImGuiErrorLogCallback	include/imgui/imgui_internal.h	/^typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);$/;"	t	typeref:typename:void (*)(void * user_data,const char * fmt,...)
ImGuiFocusedFlags	include/imgui/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	include/imgui/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	include/imgui/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	include/imgui/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	include/imgui/imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	include/imgui/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	include/imgui/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	include/imgui/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiGroupData	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiHoveredFlags	include/imgui/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlags_	include/imgui/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	include/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	include/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	include/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	include/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	include/imgui/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	include/imgui/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayNormal	include/imgui/imgui.h	/^    ImGuiHoveredFlags_DelayNormal                   = 1 << 11,  \/\/ Return true after io.HoverD/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayShort	include/imgui/imgui.h	/^    ImGuiHoveredFlags_DelayShort                    = 1 << 12,  \/\/ Return true after io.HoverD/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	include/imgui/imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 10,  \/\/ Disable using gamepad\/keyb/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	include/imgui/imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoSharedDelay	include/imgui/imgui.h	/^    ImGuiHoveredFlags_NoSharedDelay                 = 1 << 13,  \/\/ Disable shared delay system/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	include/imgui/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	include/imgui/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	include/imgui/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	include/imgui/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	include/imgui/imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIO	imgui/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	include/imgui/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputEvent	include/imgui/imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	include/imgui/imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	include/imgui/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	include/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMousePos	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMouseWheel	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventText	include/imgui/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	include/imgui/imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	include/imgui/imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiInputFlags;            \/\/ -> enum ImGuiInputFlags_         \/\/ Flags: for Is/;"	t	typeref:typename:int
ImGuiInputFlags_	include/imgui/imgui_internal.h	/^enum ImGuiInputFlags_$/;"	g
ImGuiInputFlags_CondActive	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_CondActive          = 1 << 5,   \/\/ Only set if item is active (default to /;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondDefault_	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_CondDefault_        = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondHovered	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_CondHovered         = 1 << 4,   \/\/ Only set if item is hovered (default to/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondMask_	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_CondMask_           = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockThisFrame	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_LockThisFrame       = 1 << 6,   \/\/ Access to key data will require EXPLICI/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockUntilRelease	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_LockUntilRelease    = 1 << 7,   \/\/ Access to key data will require EXPLICI/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_None	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_None                = 0,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_Repeat	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_Repeat              = 1 << 0,   \/\/ Return true on successive repeats. Defa/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateDefault	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateDefault   = 1 << 1,   \/\/ Repeat rate: Regular (default)$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateMask_	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateMask_     = ImGuiInputFlags_RepeatRateDefault | ImGuiInputFlags_Re/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavMove	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavMove   = 1 << 2,   \/\/ Repeat rate: Fast$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavTweak	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavTweak  = 1 << 3,   \/\/ Repeat rate: Faster$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteAlways	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteAlways         = 1 << 12,  \/\/ Do not register route, poll keys direct/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteExtraMask_	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteExtraMask_     = ImGuiInputFlags_RouteAlways | ImGuiInputFlags_RouteUnl/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFocused	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteFocused        = 1 << 8,   \/\/ (Default) Register focused route: Accep/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobal	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobal         = 1 << 10,  \/\/ Register route globally (medium priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalHigh	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalHigh     = 1 << 11,  \/\/ Register route globally (highest priori/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalLow	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalLow      = 1 << 9,   \/\/ Register route globally (lowest priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteMask_	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteMask_          = ImGuiInputFlags_RouteFocused | ImGuiInputFlags_RouteGl/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteUnlessBgFocused	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_RouteUnlessBgFocused= 1 << 13,  \/\/ Global routes will not be applied if un/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsKeyPressed	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsKeyPressed     = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetItemKeyOwner	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetItemKeyOwner  = ImGuiInputFlags_SupportedBySetKeyOwner | ImGui/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetKeyOwner	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetKeyOwner      = ImGuiInputFlags_LockThisFrame | ImGuiInputFlag/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByShortcut	include/imgui/imgui_internal.h	/^    ImGuiInputFlags_SupportedByShortcut         = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlags_
ImGuiInputSource	include/imgui/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	include/imgui/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Clipboard	include/imgui/imgui_internal.h	/^    ImGuiInputSource_Clipboard,     \/\/ Currently only used by InputText()$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	include/imgui/imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	include/imgui/imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	include/imgui/imgui_internal.h	/^    ImGuiInputSource_Mouse,         \/\/ Note: may be Mouse or TouchScreen or Pen. See io.MouseS/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	include/imgui/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	include/imgui/imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	imgui/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextCallbackData	include/imgui/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextDeactivatedState	include/imgui/imgui_internal.h	/^    ImGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextDeactivatedState
ImGuiInputTextDeactivatedState	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextDeactivatedState$/;"	s
ImGuiInputTextFlags	include/imgui/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_	include/imgui/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	include/imgui/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	include/imgui/imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 13,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	include/imgui/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 19,  \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	include/imgui/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	include/imgui/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EscapeClearsAll	include/imgui/imgui.h	/^    ImGuiInputTextFlags_EscapeClearsAll     = 1 << 20,  \/\/ Escape key clears content if not em/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_MergedItem	include/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 28,  \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	include/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoHorizontalScroll	include/imgui/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	include/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 27,  \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoUndoRedo	include/imgui/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	include/imgui/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	include/imgui/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	include/imgui/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	include/imgui/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	include/imgui/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false     \/\/ Button() will return /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Inputable	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 10, \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false     \/\/ Disable any form of f/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false     \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false     \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoWindowHoverableCheck	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoWindowHoverableCheck   = 1 << 8,  \/\/ false     \/\/ Disable hoverable che/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 7,  \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	include/imgui/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false     \/\/ Disable MenuItem\/Sel/;"	e	enum:ImGuiItemFlags_
ImGuiItemStatusFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for g./;"	t	typeref:typename:int
ImGuiItemStatusFlags_	include/imgui/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23,  \/\/ Checked status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_FocusedByTabbing	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_FocusedByTabbing   = 1 << 8,   \/\/ Set when the Focusable item just go/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Inputable	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Inputable          = 1 << 24,  \/\/ Item is a text-inputable (e.g. Inpu/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/ Opened status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Visible	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Visible            = 1 << 9,   \/\/ [WIP] Set when item is overlapping /;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	include/imgui/imgui.h	/^enum ImGuiKey : int$/;"	g	typeref:typename:int
ImGuiKeyChord	include/imgui/imgui.h	/^typedef int ImGuiKeyChord;          \/\/ -> ImGuiKey | ImGuiMod_XXX    \/\/ Flags: for storage o/;"	t	typeref:typename:int
ImGuiKeyData	include/imgui/imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyOwnerData	include/imgui/imgui_internal.h	/^    ImGuiKeyOwnerData()             { OwnerCurr = OwnerNext = ImGuiKeyOwner_None; LockThisFrame /;"	f	struct:ImGuiKeyOwnerData
ImGuiKeyOwnerData	include/imgui/imgui_internal.h	/^struct ImGuiKeyOwnerData$/;"	s
ImGuiKeyOwner_Any	include/imgui/imgui_internal.h	/^#define ImGuiKeyOwner_Any /;"	d
ImGuiKeyOwner_None	include/imgui/imgui_internal.h	/^#define ImGuiKeyOwner_None /;"	d
ImGuiKeyRoutingData	include/imgui/imgui_internal.h	/^    ImGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingNextScore = 255; Rou/;"	f	struct:ImGuiKeyRoutingData
ImGuiKeyRoutingData	include/imgui/imgui_internal.h	/^struct ImGuiKeyRoutingData$/;"	s
ImGuiKeyRoutingIndex	include/imgui/imgui_internal.h	/^typedef ImS16 ImGuiKeyRoutingIndex;$/;"	t	typeref:typename:ImS16
ImGuiKeyRoutingTable	include/imgui/imgui_internal.h	/^    ImGuiKeyRoutingTable()          { Clear(); }$/;"	f	struct:ImGuiKeyRoutingTable
ImGuiKeyRoutingTable	include/imgui/imgui_internal.h	/^struct ImGuiKeyRoutingTable$/;"	s
ImGuiKey_0	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_1	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_2	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_3	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_4	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_5	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_6	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_7	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_8	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_9	include/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_A	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Aliases_BEGIN	include/imgui/imgui_internal.h	/^#define ImGuiKey_Aliases_BEGIN /;"	d
ImGuiKey_Aliases_END	include/imgui/imgui_internal.h	/^#define ImGuiKey_Aliases_END /;"	d
ImGuiKey_Apostrophe	include/imgui/imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey
ImGuiKey_B	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Backslash	include/imgui/imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey
ImGuiKey_Backspace	include/imgui/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey
ImGuiKey_C	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_COUNT	include/imgui/imgui.h	/^    ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_CapsLock	include/imgui/imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Comma	include/imgui/imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey
ImGuiKey_D	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Delete	include/imgui/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey
ImGuiKey_DownArrow	include/imgui/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_E	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_End	include/imgui/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey
ImGuiKey_Enter	include/imgui/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey
ImGuiKey_Equal	include/imgui/imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey
ImGuiKey_Escape	include/imgui/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey
ImGuiKey_F	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_F1	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F10	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F11	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F12	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F2	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F3	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F4	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F5	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F6	include/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F7	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F8	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F9	include/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_G	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_GamepadBack	include/imgui/imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)      - (Switch)   Share (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadDown	include/imgui/imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadLeft	include/imgui/imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadRight	include/imgui/imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                      \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadUp	include/imgui/imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceDown	include/imgui/imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)         B (Switch)   Cross (PS)         \/\/ A/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceLeft	include/imgui/imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)         Y (Switch)   Square (PS)        \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceRight	include/imgui/imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)         A (Switch)   Circle (PS)        \/\/ C/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceUp	include/imgui/imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)         X (Switch)   Triangle (PS)      \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL1	include/imgui/imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)  L (Switch)   L1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL2	include/imgui/imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL3	include/imgui/imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Stick (Xbox)   L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickDown	include/imgui/imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickLeft	include/imgui/imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickRight	include/imgui/imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickUp	include/imgui/imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR1	include/imgui/imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)  R (Switch)   R1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR2	include/imgui/imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR3	include/imgui/imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Stick (Xbox)   R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickDown	include/imgui/imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickLeft	include/imgui/imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickRight	include/imgui/imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickUp	include/imgui/imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadStart	include/imgui/imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)      + (Switch)   Start\/Options (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_Gamepad_BEGIN	include/imgui/imgui_internal.h	/^#define ImGuiKey_Gamepad_BEGIN /;"	d
ImGuiKey_Gamepad_END	include/imgui/imgui_internal.h	/^#define ImGuiKey_Gamepad_END /;"	d
ImGuiKey_GraveAccent	include/imgui/imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey
ImGuiKey_H	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Home	include/imgui/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey
ImGuiKey_I	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Insert	include/imgui/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey
ImGuiKey_J	include/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_K	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_KeyPadEnter	include/imgui/imgui.h	/^    ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter,    \/\/ Renamed in 1.87$/;"	e	enum:ImGuiKey
ImGuiKey_Keyboard_BEGIN	include/imgui/imgui_internal.h	/^#define ImGuiKey_Keyboard_BEGIN /;"	d
ImGuiKey_Keyboard_END	include/imgui/imgui_internal.h	/^#define ImGuiKey_Keyboard_END /;"	d
ImGuiKey_Keypad0	include/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad1	include/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad2	include/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad3	include/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad4	include/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad5	include/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad6	include/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad7	include/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad8	include/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad9	include/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadAdd	include/imgui/imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDecimal	include/imgui/imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDivide	include/imgui/imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEnter	include/imgui/imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEqual	include/imgui/imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadMultiply	include/imgui/imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadSubtract	include/imgui/imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_OFFSET	include/imgui/imgui.h	/^    ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN,  \/\/ Accesses to io.KeysData[] m/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_SIZE	include/imgui/imgui.h	/^    ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,  \/\/ Size of KeysData[]: only ho/;"	e	enum:ImGuiKey
ImGuiKey_L	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_LeftAlt	include/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftArrow	include/imgui/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftBracket	include/imgui/imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey
ImGuiKey_LeftCtrl	include/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftShift	include/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftSuper	include/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LegacyNativeKey_BEGIN	include/imgui/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_BEGIN /;"	d
ImGuiKey_LegacyNativeKey_END	include/imgui/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_END /;"	d
ImGuiKey_M	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Menu	include/imgui/imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey
ImGuiKey_Minus	include/imgui/imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey
ImGuiKey_ModAlt	include/imgui/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModCtrl	include/imgui/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModShift	include/imgui/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModSuper	include/imgui/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_MouseLeft	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseMiddle	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseRight	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelX	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelY	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX1	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX2	include/imgui/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_Mouse_BEGIN	include/imgui/imgui_internal.h	/^#define ImGuiKey_Mouse_BEGIN /;"	d
ImGuiKey_Mouse_END	include/imgui/imgui_internal.h	/^#define ImGuiKey_Mouse_END /;"	d
ImGuiKey_N	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_BEGIN	include/imgui/imgui.h	/^    ImGuiKey_NamedKey_BEGIN         = 512,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_COUNT	include/imgui/imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_END	include/imgui/imgui.h	/^    ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_NavGamepadActivate	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadActivate /;"	d
ImGuiKey_NavGamepadCancel	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadCancel /;"	d
ImGuiKey_NavGamepadInput	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadInput /;"	d
ImGuiKey_NavGamepadMenu	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadMenu /;"	d
ImGuiKey_NavGamepadTweakFast	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakFast /;"	d
ImGuiKey_NavGamepadTweakSlow	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakSlow /;"	d
ImGuiKey_NavKeyboardTweakFast	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakFast /;"	d
ImGuiKey_NavKeyboardTweakSlow	include/imgui/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakSlow /;"	d
ImGuiKey_None	include/imgui/imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey
ImGuiKey_NumLock	include/imgui/imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey
ImGuiKey_O	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_P	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_PageDown	include/imgui/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey
ImGuiKey_PageUp	include/imgui/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey
ImGuiKey_Pause	include/imgui/imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey
ImGuiKey_Period	include/imgui/imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey
ImGuiKey_PrintScreen	include/imgui/imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey
ImGuiKey_Q	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_R	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModAlt	include/imgui/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModCtrl	include/imgui/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModShift	include/imgui/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModSuper	include/imgui/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_RightAlt	include/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightArrow	include/imgui/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_RightBracket	include/imgui/imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey
ImGuiKey_RightCtrl	include/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightShift	include/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightSuper	include/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_S	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ScrollLock	include/imgui/imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Semicolon	include/imgui/imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey
ImGuiKey_Slash	include/imgui/imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey
ImGuiKey_Space	include/imgui/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey
ImGuiKey_T	include/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Tab	include/imgui/imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey
ImGuiKey_U	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_UpArrow	include/imgui/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_V	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_W	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_X	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Y	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Z	include/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiLastItemData	include/imgui/imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	include/imgui/imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	include/imgui/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	include/imgui/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	include/imgui/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	include/imgui/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	imgui/imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	include/imgui/imgui.h	/^    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeo/;"	f	struct:ImGuiListClipper
ImGuiListClipper	include/imgui/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiListClipperData	include/imgui/imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	include/imgui/imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	include/imgui/imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	imgui/imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SeekCursorForItem	imgui/imgui.cpp	/^static void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper* clipper, int item_n)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	imgui/imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiListClipper_StepInternal	imgui/imgui.cpp	/^static bool ImGuiListClipper_StepInternal(ImGuiListClipper* clipper)$/;"	f	typeref:typename:bool	file:
ImGuiLocEntry	include/imgui/imgui_internal.h	/^struct ImGuiLocEntry$/;"	s
ImGuiLocKey	include/imgui/imgui_internal.h	/^enum ImGuiLocKey : int$/;"	g	typeref:typename:int
ImGuiLocKey_COUNT	include/imgui/imgui_internal.h	/^    ImGuiLocKey_COUNT$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableResetOrder	include/imgui/imgui_internal.h	/^    ImGuiLocKey_TableResetOrder,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllDefault	include/imgui/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllDefault,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllFit	include/imgui/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllFit,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeOne	include/imgui/imgui_internal.h	/^    ImGuiLocKey_TableSizeOne,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingMainMenuBar	include/imgui/imgui_internal.h	/^    ImGuiLocKey_WindowingMainMenuBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingPopup	include/imgui/imgui_internal.h	/^    ImGuiLocKey_WindowingPopup,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingUntitled	include/imgui/imgui_internal.h	/^    ImGuiLocKey_WindowingUntitled,$/;"	e	enum:ImGuiLocKey
ImGuiLogType	include/imgui/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	include/imgui/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	include/imgui/imgui_internal.h	/^    ImGuiLogType_Clipboard,$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	include/imgui/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	include/imgui/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	include/imgui/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMemAllocFunc	include/imgui/imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	include/imgui/imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiMenuColumns	include/imgui/imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	include/imgui/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiModFlags	include/imgui/imgui.h	/^typedef ImGuiKeyChord ImGuiModFlags;      \/\/ == int. We generally use ImGuiKeyChord to mean "a/;"	t	typeref:typename:ImGuiKeyChord
ImGuiModFlags_	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	g
ImGuiModFlags_Alt	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Ctrl	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_None	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Shift	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Super	include/imgui/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiMod_Alt	include/imgui/imgui.h	/^    ImGuiMod_Alt                    = 1 << 14, \/\/ Option\/Menu$/;"	e	enum:ImGuiKey
ImGuiMod_Ctrl	include/imgui/imgui.h	/^    ImGuiMod_Ctrl                   = 1 << 12, \/\/ Ctrl$/;"	e	enum:ImGuiKey
ImGuiMod_Mask_	include/imgui/imgui.h	/^    ImGuiMod_Mask_                  = 0xF800,  \/\/ 5-bits$/;"	e	enum:ImGuiKey
ImGuiMod_None	include/imgui/imgui.h	/^    ImGuiMod_None                   = 0,$/;"	e	enum:ImGuiKey
ImGuiMod_Shift	include/imgui/imgui.h	/^    ImGuiMod_Shift                  = 1 << 13, \/\/ Shift$/;"	e	enum:ImGuiKey
ImGuiMod_Shortcut	include/imgui/imgui.h	/^    ImGuiMod_Shortcut               = 1 << 11, \/\/ Alias for Ctrl (non-macOS) _or_ Super (macOS/;"	e	enum:ImGuiKey
ImGuiMod_Super	include/imgui/imgui.h	/^    ImGuiMod_Super                  = 1 << 15, \/\/ Cmd\/Super\/Windows$/;"	e	enum:ImGuiKey
ImGuiMouseButton	include/imgui/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	include/imgui/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	include/imgui/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	include/imgui/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	include/imgui/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	include/imgui/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	include/imgui/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	include/imgui/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	include/imgui/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	include/imgui/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	include/imgui/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	include/imgui/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	include/imgui/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	include/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	include/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	include/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	include/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over a horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	include/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	include/imgui/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseSource	include/imgui/imgui.h	/^enum ImGuiMouseSource : int$/;"	g	typeref:typename:int
ImGuiMouseSource_COUNT	include/imgui/imgui.h	/^    ImGuiMouseSource_COUNT$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Mouse	include/imgui/imgui.h	/^    ImGuiMouseSource_Mouse = 0,         \/\/ Input is coming from an actual mouse.$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Pen	include/imgui/imgui.h	/^    ImGuiMouseSource_Pen,               \/\/ Input is coming from a pressure\/magnetic pen (ofte/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_TouchScreen	include/imgui/imgui.h	/^    ImGuiMouseSource_TouchScreen,       \/\/ Input is coming from a touch screen (no hovering pr/;"	e	enum:ImGuiMouseSource
ImGuiNavHighlightFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	include/imgui/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	include/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	include/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = 1 << 3,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	include/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	include/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault      = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	include/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin         = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	include/imgui/imgui.h	/^enum ImGuiNavInput$/;"	g
ImGuiNavInput_Activate	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_COUNT	include/imgui/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Cancel	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadDown	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadLeft	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadRight	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadUp	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusNext	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusPrev	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Input	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickDown	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickLeft	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickRight	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickUp	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Menu	include/imgui/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakFast	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakSlow	include/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavItemData	include/imgui/imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	include/imgui/imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	include/imgui/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	include/imgui/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	include/imgui/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	include/imgui/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	include/imgui/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 11,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DontSetNavHighlight	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_DontSetNavHighlight   = 1 << 12,  \/\/ Do not alter the visible state of k/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Tabbing	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Tabbing               = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNextItemData	include/imgui/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	include/imgui/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	include/imgui/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	include/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen  = 1 << 1,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	include/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	include/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_None     = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	include/imgui/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	include/imgui/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	include/imgui/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	include/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOldColumnData	include/imgui/imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	include/imgui/imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	include/imgui/imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   \/\/ (WIP) Restore pre-1.51 behavior/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	include/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	include/imgui/imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	include/imgui/imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiOnceUponAFrame	include/imgui/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	include/imgui/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	include/imgui/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	include/imgui/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformImeData	include/imgui/imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	include/imgui/imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPlotArrayGetterData	imgui/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	imgui/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	include/imgui/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	include/imgui/imgui_internal.h	/^    ImGuiPlotType_Histogram,$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	include/imgui/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	include/imgui/imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	include/imgui/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	include/imgui/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	include/imgui/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	include/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	include/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 7,   \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	include/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 8,   \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	include/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	include/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	include/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	include/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	include/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	include/imgui/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	include/imgui/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 6,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	include/imgui/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	include/imgui/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	include/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	include/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	include/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	include/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	include/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	include/imgui/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	imgui/imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	imgui/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	include/imgui/imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlags	include/imgui/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	include/imgui/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	include/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	include/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 4,   \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	include/imgui/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	include/imgui/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this doesn't close parent /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoHoldingActiveID	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoSetKeyOwner	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  \/\/ Don't set key\/input owner on t/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	include/imgui/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	include/imgui/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all colum/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	include/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSeparatorFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	include/imgui/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	include/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal              = 1 << 0,   \/\/ Axis default to current layout /;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	include/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_None                    = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	include/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns          = 1 << 2,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	include/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical                = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	include/imgui/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	include/imgui/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	include/imgui/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	include/imgui/imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	include/imgui/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	include/imgui/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	include/imgui/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	include/imgui/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	include/imgui/imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F,   \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	include/imgui/imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	include/imgui/imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	include/imgui/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	include/imgui/imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	include/imgui/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21,$/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	include/imgui/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSortDirection	include/imgui/imgui.h	/^typedef int ImGuiSortDirection;     \/\/ -> enum ImGuiSortDirection_   \/\/ Enum: A sorting dire/;"	t	typeref:typename:int
ImGuiSortDirection_	include/imgui/imgui.h	/^enum ImGuiSortDirection_$/;"	g
ImGuiSortDirection_Ascending	include/imgui/imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_Descending	include/imgui/imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_None	include/imgui/imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection_
ImGuiStackLevelInfo	include/imgui/imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	include/imgui/imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStackSizes	include/imgui/imgui_internal.h	/^    ImGuiStackSizes() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackSizes
ImGuiStackSizes	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiStackSizes$/;"	s
ImGuiStackTool	include/imgui/imgui_internal.h	/^    ImGuiStackTool()        { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiStackTool
ImGuiStackTool	include/imgui/imgui_internal.h	/^struct ImGuiStackTool$/;"	s
ImGuiStorage	include/imgui/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	include/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	include/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	include/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	include/imgui/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	imgui/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	include/imgui/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	include/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	include/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	include/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	include/imgui/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	include/imgui/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	include/imgui/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	include/imgui/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	include/imgui/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	include/imgui/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	include/imgui/imgui.h	/^    ImGuiStyleVar_CellPadding,         \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	include/imgui/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	include/imgui/imgui.h	/^    ImGuiStyleVar_DisabledAlpha,       \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	include/imgui/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	include/imgui/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	include/imgui/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	include/imgui/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	include/imgui/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	include/imgui/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	include/imgui/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	include/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	include/imgui/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextAlign	include/imgui/imgui.h	/^    ImGuiStyleVar_SeparatorTextAlign,  \/\/ ImVec2    SeparatorTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextBorderSize	include/imgui/imgui.h	/^    ImGuiStyleVar_SeparatorTextBorderSize,\/\/ float  SeparatorTextBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextPadding	include/imgui/imgui.h	/^    ImGuiStyleVar_SeparatorTextPadding,\/\/ ImVec2    SeparatorTextPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	include/imgui/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	include/imgui/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	include/imgui/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	include/imgui/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	include/imgui/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	imgui/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBar	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBarFlags	include/imgui/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	include/imgui/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	include/imgui/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	include/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	include/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	include/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	include/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	include/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	include/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	include/imgui/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	include/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	include/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	include/imgui/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	include/imgui/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	include/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22,  \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	include/imgui/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	imgui/imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	imgui/imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	include/imgui/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	include/imgui/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	include/imgui/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	include/imgui/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	include/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21,  \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	include/imgui/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	include/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	include/imgui/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	include/imgui/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID(tab->ID)\//;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	include/imgui/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	include/imgui/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	include/imgui/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SectionMask_	include/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SetSelected	include/imgui/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	include/imgui/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	include/imgui/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTable	include/imgui/imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableBgTarget	include/imgui/imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	include/imgui/imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	include/imgui/imgui.h	/^    ImGuiTableBgTarget_CellBg                   = 3,        \/\/ Set cell background color (top-/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	include/imgui/imgui.h	/^    ImGuiTableBgTarget_None                     = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	include/imgui/imgui.h	/^    ImGuiTableBgTarget_RowBg0                   = 1,        \/\/ Set row background color 0 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	include/imgui/imgui.h	/^    ImGuiTableBgTarget_RowBg1                   = 2,        \/\/ Set row background color 1 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableCellData	include/imgui/imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	include/imgui/imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnFlags	include/imgui/imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	include/imgui/imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_DefaultHide	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will not subm/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	include/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnIdx	include/imgui/imgui_internal.h	/^typedef ImS16 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS16
ImGuiTableColumnSettings	include/imgui/imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	include/imgui/imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableColumnSortSpecs	include/imgui/imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	include/imgui/imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableDrawChannelIdx	include/imgui/imgui_internal.h	/^typedef ImU16 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU16
ImGuiTableFlags	include/imgui/imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	include/imgui/imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	include/imgui/imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	include/imgui/imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	include/imgui/imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	include/imgui/imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	include/imgui/imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	include/imgui/imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	include/imgui/imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	include/imgui/imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	include/imgui/imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	include/imgui/imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	include/imgui/imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	include/imgui/imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	include/imgui/imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	include/imgui/imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	include/imgui/imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	include/imgui/imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	include/imgui/imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	include/imgui/imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	include/imgui/imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	include/imgui/imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	include/imgui/imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	include/imgui/imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	include/imgui/imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	include/imgui/imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	include/imgui/imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	include/imgui/imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	include/imgui/imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	include/imgui/imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	include/imgui/imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableInstanceData	include/imgui/imgui_internal.h	/^    ImGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastFirstRowHeight = La/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	include/imgui/imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableRowFlags	include/imgui/imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	include/imgui/imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	include/imgui/imgui.h	/^    ImGuiTableRowFlags_Headers                  = 1 << 0,   \/\/ Identify header row (set defaul/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	include/imgui/imgui.h	/^    ImGuiTableRowFlags_None                     = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSettings	include/imgui/imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	include/imgui/imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableSortSpecs	include/imgui/imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	include/imgui/imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTableTempData	include/imgui/imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextBuffer	include/imgui/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	include/imgui/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	imgui/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	include/imgui/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	include/imgui/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	include/imgui/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	include/imgui/imgui_internal.h	/^    ImGuiTextFlags_None                         = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextIndex	include/imgui/imgui_internal.h	/^struct ImGuiTextIndex$/;"	s
ImGuiTextRange	include/imgui/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	include/imgui/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	include/imgui/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	include/imgui/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	include/imgui/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	include/imgui/imgui_internal.h	/^    ImGuiTooltipFlags_None                      = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePreviousTooltip	include/imgui/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePreviousTooltip   = 1 << 0,   \/\/ Override will clear\/ignore pre/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	include/imgui/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	include/imgui/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	include/imgui/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	include/imgui/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20,$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	include/imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiViewport	include/imgui/imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	include/imgui/imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	include/imgui/imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	include/imgui/imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_IsPlatformMonitor	include/imgui/imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	include/imgui/imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	include/imgui/imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	include/imgui/imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2,   \/\/ Platform Window: is created\/ma/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportP	include/imgui/imgui_internal.h	/^    ImGuiViewportP()    { DrawListsLastFrame[0] = DrawListsLastFrame[1] = -1; DrawLists[0] = Dra/;"	f	struct:ImGuiViewportP
ImGuiViewportP	include/imgui/imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	imgui/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* ctx, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	include/imgui/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	include/imgui/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	include/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	include/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	include/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	include/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	include/imgui/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	include/imgui/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	include/imgui/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	include/imgui/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	include/imgui/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	include/imgui/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] On child window: allow gamep/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	include/imgui/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	include/imgui/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	include/imgui/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	include/imgui/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	include/imgui/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	include/imgui/imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	include/imgui/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	include/imgui/imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	include/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplEmscripten_WheelCallback	imgui/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplEmscripten_WheelCallback(int, const EmscriptenWheelEvent* ev, void*)$/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplGlfw_CharCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorEnterCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorEnterCallback(GLFWwindow* window, int entered)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorPosCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorPosCallback(GLFWwindow* window, double x, double y)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_Data	imgui/imgui_impl_glfw.cpp	/^    ImGui_ImplGlfw_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplGlfw_Data	file:
ImGui_ImplGlfw_Data	imgui/imgui_impl_glfw.cpp	/^struct ImGui_ImplGlfw_Data$/;"	s	file:
ImGui_ImplGlfw_GetBackendData	imgui/imgui_impl_glfw.cpp	/^static ImGui_ImplGlfw_Data* ImGui_ImplGlfw_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplGlfw_Data *	file:
ImGui_ImplGlfw_GetClipboardText	imgui/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplGlfw_Init	imgui/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForOther	imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOther(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InstallCallbacks	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int keycode, int scancode, int action, int m/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyToImGuiKey	imgui/imgui_impl_glfw.cpp	/^static ImGuiKey ImGui_ImplGlfw_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGlfw_MonitorCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MonitorCallback(GLFWmonitor*, int)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_RestoreCallbacks	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_RestoreCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetCallbacksChainForAllWindows	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_SetCallbacksChainForAllWindows(bool chain_for_all_windows)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetClipboardText	imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_ShouldChainCallback	imgui/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_ShouldChainCallback(GLFWwindow* window)$/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_Shutdown	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_TranslateUntranslatedKey	imgui/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_TranslateUntranslatedKey(int key, int scancode)$/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_UpdateGamepads	imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateKeyModifiers	imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateKeyModifiers(GLFWwindow* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseData	imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WindowFocusCallback	imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_WindowFocusCallback(GLFWwindow* window, int focused)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_WndProc	imgui/imgui_impl_glfw.cpp	/^static LRESULT CALLBACK ImGui_ImplGlfw_WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam/;"	f	typeref:typename:LRESULT CALLBACK	file:
ImGui_ImplOpenGL3_CreateDeviceObjects	imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	imgui/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_Data	imgui/imgui_impl_opengl3.cpp	/^    ImGui_ImplOpenGL3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL3_Data	file:
ImGui_ImplOpenGL3_Data	imgui/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_Data$/;"	s	file:
ImGui_ImplOpenGL3_DestroyDeviceObjects	imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	imgui/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_GetBackendData	imgui/imgui_impl_opengl3.cpp	/^static ImGui_ImplOpenGL3_Data* ImGui_ImplOpenGL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL3_Data *	file:
ImGui_ImplOpenGL3_Init	imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	imgui/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_VtxAttribState	imgui/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_VtxAttribState$/;"	s	file:
ImHashData	imgui/imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	imgui/imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	include/imgui/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	include/imgui/imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	include/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	include/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	include/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	include/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	include/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	include/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	include/imgui/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	imgui/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	include/imgui/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	include/imgui/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	include/imgui/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImMax	include/imgui/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	include/imgui/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	include/imgui/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	include/imgui/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	include/imgui/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	imgui/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	imgui/imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	imgui/imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	imgui/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	include/imgui/imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	include/imgui/imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	include/imgui/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	include/imgui/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	include/imgui/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	include/imgui/imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	include/imgui/imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	include/imgui/imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	include/imgui/imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	include/imgui/imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	include/imgui/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	include/imgui/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	include/imgui/imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	include/imgui/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	include/imgui/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImS16	include/imgui/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	include/imgui/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	include/imgui/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	include/imgui/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	include/imgui/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	include/imgui/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	include/imgui/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	include/imgui/imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	include/imgui/imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	include/imgui/imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	include/imgui/imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	include/imgui/imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	include/imgui/imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	include/imgui/imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	include/imgui/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	imgui/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStb	include/imgui/imgui_internal.h	/^namespace ImStb$/;"	n
ImStrSkipBlank	imgui/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	imgui/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	imgui/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	imgui/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	imgui/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	imgui/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	imgui/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	imgui/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStristr	imgui/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	imgui/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	imgui/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	imgui/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	include/imgui/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	include/imgui/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	imgui/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int
ImTextCharToUtf8	imgui/imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	imgui/imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	imgui/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextStrFromUtf8	imgui/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	imgui/imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTextureID	include/imgui/imgui.h	/^typedef void* ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:void *
ImToUpper	include/imgui/imgui_internal.h	/^static inline char      ImToUpper(char c)               { return (c >= 'a' && c <= 'z') ? c &= ~/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF char
ImTriangleArea	include/imgui/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	imgui/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	imgui/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	imgui/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImU16	include/imgui/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	include/imgui/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	include/imgui/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	include/imgui/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	include/imgui/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	include/imgui/imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	include/imgui/imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	include/imgui/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	include/imgui/imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	include/imgui/imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	include/imgui/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	include/imgui/imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	include/imgui/imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	include/imgui/imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	include/imgui/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	include/imgui/imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	include/imgui/imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	include/imgui/imgui.h	/^struct ImVec4$/;"	s
ImVector	include/imgui/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	include/imgui/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	include/imgui/imgui.h	/^struct ImVector$/;"	s
ImWchar	include/imgui/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	include/imgui/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	include/imgui/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	include/imgui/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	imgui/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVe/;"	f	class:ImGui	typeref:typename:void
ImageButton	imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageButton	imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& size, con/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	imgui/imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& size, const ImVec2& /;"	f	class:ImGui	typeref:typename:bool
ImeWindowHandle	include/imgui/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ [Obsolete] Set ImGuiV/;"	m	struct:ImGuiIO	typeref:typename:void *
InFlags	include/imgui/imgui_internal.h	/^    ImGuiItemFlags          InFlags;            \/\/ See ImGuiItemFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
InFlags	include/imgui/imgui_internal.h	/^    ImGuiItemFlags      InFlags;        \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
Indent	imgui/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	include/imgui/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	include/imgui/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	include/imgui/imgui_internal.h	/^    ImGuiKeyRoutingIndex            Index[ImGuiKey_NamedKey_COUNT]; \/\/ Index of first entry in/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImGuiKeyRoutingIndex[]
Index	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	include/imgui/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	include/imgui/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	include/imgui/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBufferSize	imgui/imgui_impl_opengl3.cpp	/^    GLsizeiptr      IndexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
IndexDuringLayout	include/imgui/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout(). Tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexLookup	include/imgui/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IndexWithinEnabledSet	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
IniFilename	include/imgui/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	include/imgui/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InitOrLoadWindowSettings	imgui/imgui.cpp	/^static void InitOrLoadWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
InitStretchWeightOrWidth	include/imgui/imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitialFlags	include/imgui/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	include/imgui/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time o/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
InitialWidth	include/imgui/imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	imgui/imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	include/imgui/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	include/imgui/imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	include/imgui/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	imgui/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerDir	imgui/imgui.cpp	/^    ImVec2 InnerDir;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerRect	include/imgui/imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	include/imgui/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	include/imgui/imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	imgui/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputBuf	include/imgui/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputDouble	imgui/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsNextEventId	include/imgui/imgui_internal.h	/^    ImU32                   InputEventsNextEventId;$/;"	m	struct:ImGuiContext	typeref:typename:ImU32
InputEventsNextMouseSource	include/imgui/imgui_internal.h	/^    ImGuiMouseSource        InputEventsNextMouseSource;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseSource
InputEventsQueue	include/imgui/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	include/imgui/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLineHeight	include/imgui/imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	include/imgui/imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	include/imgui/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	include/imgui/imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	imgui/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputScalar_DefaultCharsFilter	imgui/imgui_widgets.cpp	/^static inline ImGuiInputTextFlags InputScalar_DefaultCharsFilter(ImGuiDataType data_type, const /;"	f	typeref:typename:ImGuiInputTextFlags	file:
InputText	imgui/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	imgui/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	imgui/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(ImGuiContext* ctx, const ImWchar* text_begin, const ImWchar/;"	f	typeref:typename:ImVec2	file:
InputTextDeactivateHook	imgui/imgui_widgets.cpp	/^void ImGui::InputTextDeactivateHook(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
InputTextDeactivatedState	include/imgui/imgui_internal.h	/^    ImGuiInputTextDeactivatedState InputTextDeactivatedState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextDeactivatedState
InputTextEx	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	imgui/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInput/;"	f	typeref:typename:bool	file:
InputTextMultiline	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	include/imgui/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoStateAfterUserCallback	imgui/imgui_widgets.cpp	/^static void InputTextReconcileUndoStateAfterUserCallback(ImGuiInputTextState* state, const char*/;"	f	typeref:typename:void	file:
InputTextState	include/imgui/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InstalledCallbacks	imgui/imgui_impl_glfw.cpp	/^    bool                    InstalledCallbacks;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
InstanceCurrent	include/imgui/imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	include/imgui/imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	include/imgui/imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	include/imgui/imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
InvisibleButton	imgui/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	include/imgui/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActiveIdUsingNavDir	include/imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAliasKey	include/imgui/imgui_internal.h	/^    inline bool             IsAliasKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	imgui/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	imgui/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	imgui/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	imgui/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	include/imgui/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsBuilt	include/imgui/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsClippedEx	imgui/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsContextPopupOpen	include/imgui/imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDataType	include/imgui/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDefaultDisplayOrder	include/imgui/imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	include/imgui/imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDelivery	include/imgui/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropActive	imgui/imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	imgui/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsEnabled	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLISENABLEDPROC                IsEnabled;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLISENABLEDPROC
IsEnabled	include/imgui/imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	include/imgui/imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsExplicitChild	include/imgui/imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFallbackWindow	include/imgui/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	include/imgui/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsGamepadKey	include/imgui/imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                                  { return/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	imgui/imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInitializing	include/imgui/imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	include/imgui/imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	include/imgui/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	imgui/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	imgui/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	imgui/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	imgui/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	imgui/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	imgui/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	imgui/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	imgui/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	imgui/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	imgui/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	imgui/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	imgui/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	imgui/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	include/imgui/imgui_internal.h	/^    inline bool     IsKeyPressedMap(ImGuiKey key, bool repeat = true)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyboardKey	include/imgui/imgui_internal.h	/^    inline bool             IsKeyboardKey(ImGuiKey key)                                 { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLayoutLocked	include/imgui/imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLegacyKey	include/imgui/imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                                   { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	imgui/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && Ge/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	imgui/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && Im/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLoaded	include/imgui/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseClicked	imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	imgui/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	imgui/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	imgui/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	imgui/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	imgui/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	imgui/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseKey	include/imgui/imgui_internal.h	/^    inline bool             IsMouseKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsMousePosValid	imgui/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	include/imgui/imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNamedKeyOrModKey	include/imgui/imgui_internal.h	/^    inline bool             IsNamedKeyOrModKey(ImGuiKey key)                            { return/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	include/imgui/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	include/imgui/imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsPreview	include/imgui/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsProgram	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLISPROGRAMPROC                IsProgram;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLISPROGRAMPROC
IsRectVisible	imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	include/imgui/imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	include/imgui/imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	include/imgui/imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootOfOpenMenuSet	imgui/imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	include/imgui/imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSetPos	include/imgui/imgui_internal.h	/^    bool                    IsSetPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	include/imgui/imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	include/imgui/imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSkipItems	include/imgui/imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	include/imgui/imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsStretch	include/imgui/imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	include/imgui/imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	include/imgui/imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	include/imgui/imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	include/imgui/imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisibleX	include/imgui/imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	include/imgui/imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsWindowAbove	imgui/imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	imgui/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	imgui/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	imgui/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	imgui/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	imgui/imgui.cpp	/^bool ImGui::IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowFocused	imgui/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	imgui/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	imgui/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	imgui/imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	imgui/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:bool
ItemFlagsStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;                     \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemGetter	imgui/imgui_demo.cpp	/^        struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_st/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
ItemHoverable	imgui/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	include/imgui/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	imgui/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	include/imgui/imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacing	include/imgui/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	include/imgui/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemWidth	include/imgui/imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	include/imgui/imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	include/imgui/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	include/imgui/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	imgui/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	include/imgui/imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsFrozen	include/imgui/imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
ItemsHeight	include/imgui/imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	imgui/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
Items_SingleStringGetter	imgui/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
KeepAliveID	imgui/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	imgui/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	include/imgui/imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventKey
Key	include/imgui/imgui_internal.h	/^    ImGuiLocKey     Key;$/;"	m	struct:ImGuiLocEntry	typeref:typename:ImGuiLocKey
Key	include/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyAlt	include/imgui/imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	include/imgui/imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyLayoutData	imgui/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ImGui::DebugRenderKeyboardPreview	file:
KeyMap	include/imgui/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];             \/\/ [LEGACY] Input: map of indices into the/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	include/imgui/imgui.h	/^    ImGuiKeyChord KeyMods;                          \/\/ Key mods flags (any of ImGuiMod_Ctrl\/I/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyChord
KeyRepeatDelay	include/imgui/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.275f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	include/imgui/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	include/imgui/imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	include/imgui/imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysData	include/imgui/imgui.h	/^    ImGuiKeyData  KeysData[ImGuiKey_KeysData_SIZE]; \/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysDown	include/imgui/imgui.h	/^    bool        KeysDown[ImGuiKey_COUNT];           \/\/ [LEGACY] Input: Keyboard keys that are /;"	m	struct:ImGuiIO	typeref:typename:bool[]
KeysOwnerData	include/imgui/imgui_internal.h	/^    ImGuiKeyOwnerData       KeysOwnerData[ImGuiKey_NamedKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyOwnerData[]
KeysRoutingTable	include/imgui/imgui_internal.h	/^    ImGuiKeyRoutingTable    KeysRoutingTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyRoutingTable
L	include/cubic.h	/^void Cubic::L()     {$/;"	f	class:Cubic	typeref:typename:void
L_U_LU	shared.h	/^    const Operation L_U_LU[] = {op_L_inv,op_U_inv,op_L,op_U}; $/;"	v	typeref:typename:const Operation[]
L_inv	include/cubic.h	/^void Cubic::L_inv() {$/;"	f	class:Cubic	typeref:typename:void
Label	imgui/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:const char *	file:
LabelFalse	include/glm/gtx/string_cast.inl	/^	static const char* LabelFalse = "false";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LabelText	imgui/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	imgui/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LabelTrue	include/glm/gtx/string_cast.inl	/^	static const char* LabelTrue = "true";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LastActiveFrame	include/imgui/imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiStackTool	typeref:typename:int
LastActiveId	include/imgui/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	include/imgui/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastFirstRowHeight	include/imgui/imgui_internal.h	/^    float                       LastFirstRowHeight;         \/\/ Height of first row from last f/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastFrameActive	include/imgui/imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	include/imgui/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	include/imgui/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	include/imgui/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrozenHeight	include/imgui/imgui_internal.h	/^    float                       LastFrozenHeight;           \/\/ Height of frozen section from l/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastItemData	include/imgui/imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastOuterHeight	include/imgui/imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastResizedColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	include/imgui/imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastTabItemIdx	include/imgui/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	include/imgui/imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	include/imgui/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastValidMousePos	imgui/imgui_impl_glfw.cpp	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:ImVec2	file:
Layers	include/imgui/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >[2]
LayoutType	include/imgui/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LineMaxY	include/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	include/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	imgui/imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineOffsets	include/imgui/imgui_internal.h	/^    ImVector<int>   LineOffsets;$/;"	m	struct:ImGuiTextIndex	typeref:typename:ImVector<int>
LinkProgram	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLLINKPROGRAMPROC              LinkProgram;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLLINKPROGRAMPROC
ListBox	imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const/;"	f	class:ImGui	typeref:typename:bool
ListBox	imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListBoxFooter	include/imgui/imgui.h	/^    static inline void  ListBoxFooter()                                                     { En/;"	f	namespace:ImGui	typeref:typename:void
ListBoxHeader	imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui	typeref:typename:bool
ListBoxHeader	include/imgui/imgui.h	/^    static inline bool  ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0, 0)) { re/;"	f	namespace:ImGui	typeref:typename:bool
ListClipper	include/imgui/imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadIniSettingsFromDisk	imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LocalizationTable	include/imgui/imgui_internal.h	/^    const char*             LocalizationTable[ImGuiLocKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:const char * []
LocalizeGetMsg	include/imgui/imgui_internal.h	/^    inline const char*      LocalizeGetMsg(ImGuiLocKey key) { ImGuiContext& g = *GImGui; const c/;"	f	namespace:ImGui	typeref:typename:const char *
LocalizeRegisterEntries	imgui/imgui.cpp	/^void ImGui::LocalizeRegisterEntries(const ImGuiLocEntry* entries, int count)$/;"	f	class:ImGui	typeref:typename:void
LockThisFrame	include/imgui/imgui_internal.h	/^    bool        LockThisFrame;      \/\/ Reading this key requires explicit owner id (until end /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockUntilRelease	include/imgui/imgui_internal.h	/^    bool        LockUntilRelease;   \/\/ Reading this key requires explicit owner id (until key /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockWheelingWindow	imgui/imgui.cpp	/^static void LockWheelingWindow(ImGuiWindow* window, float wheel_amount)$/;"	f	typeref:typename:void	file:
Locked	include/imgui/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	imgui/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	include/imgui/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	imgui/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	include/imgui/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	include/imgui/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	include/imgui/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	include/imgui/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	include/imgui/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	include/imgui/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	imgui/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	include/imgui/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	include/imgui/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	include/imgui/imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	include/imgui/imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	imgui/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	imgui/imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	include/imgui/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	imgui/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	imgui/imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	imgui/imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	imgui/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	imgui/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	imgui/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	imgui/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	include/imgui/imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LossynessOffset	include/imgui/imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
LowerBound	imgui/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
MAP_ANALOG	imgui/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	imgui/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY1	imgui/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY1(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY2	imgui/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY2(/;"	d	file:
MallocWrapper	imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	include/imgui/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	imgui/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	include/imgui/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	include/imgui/imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxX	include/imgui/imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	imgui/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	imgui/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	include/imgui/imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	include/imgui/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	include/imgui/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	include/imgui/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	include/imgui/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	include/imgui/imgui_internal.h	/^    float       MenuBarHeight() const   { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	include/imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	include/imgui/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	include/imgui/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	include/imgui/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	imgui/imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	include/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	imgui/imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MergeMode	include/imgui/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MetricsActiveAllocations	include/imgui/imgui.h	/^    int         MetricsActiveAllocations;           \/\/ Number of active allocations, updated b/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsActiveWindows	include/imgui/imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	imgui/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	include/imgui/imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	include/imgui/imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	include/imgui/imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	include/imgui/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	include/imgui/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	include/imgui/imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinColumnWidth	include/imgui/imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinX	include/imgui/imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Mode	imgui/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	imgui/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	imgui/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	imgui/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mods	include/imgui/imgui_internal.h	/^    ImU16                           Mods;               \/\/ Technically we'd only need 4-bits b/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU16
MouseButton	include/imgui/imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventMouseButton
MouseButtonToKey	include/imgui/imgui_internal.h	/^    inline ImGuiKey         MouseButtonToKey(ImGuiMouseButton button)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
MouseClicked	include/imgui/imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	include/imgui/imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	include/imgui/imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	include/imgui/imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	include/imgui/imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	include/imgui/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorScale	include/imgui/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseCursors	imgui/imgui_impl_glfw.cpp	/^    GLFWcursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursor * []	file:
MouseDelta	include/imgui/imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	include/imgui/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	include/imgui/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	include/imgui/imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	include/imgui/imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	include/imgui/imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	include/imgui/imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	include/imgui/imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	include/imgui/imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceSqr	include/imgui/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	include/imgui/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	include/imgui/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseLastValidPos	include/imgui/imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePos	include/imgui/imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePos	include/imgui/imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventMousePos
MousePosPrev	include/imgui/imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	include/imgui/imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseSource	include/imgui/imgui.h	/^    ImGuiMouseSource MouseSource;                   \/\/ Mouse actual input peripheral (Mouse\/T/;"	m	struct:ImGuiIO	typeref:typename:ImGuiMouseSource
MouseSource	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:ImGuiMouseSource
MouseSource	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:ImGuiMouseSource
MouseSource	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:ImGuiMouseSource
MouseWheel	include/imgui/imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheel	include/imgui/imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventMouseWheel
MouseWheelH	include/imgui/imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. >0 scrolls Left/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelRequestAxisSwap	include/imgui/imgui.h	/^    bool        MouseWheelRequestAxisSwap;          \/\/ On a non-Mac system, holding SHIFT requ/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseWindow	imgui/imgui_impl_glfw.cpp	/^    GLFWwindow*             MouseWindow;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
MoveId	include/imgui/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MyCallback	imgui/imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	imgui/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f/;"	f	struct:MyDocument	file:
MyDocument	imgui/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	imgui/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	imgui/imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anone28545ff0111	file:
MyItemColumnID	imgui/imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anone28545ff0111	file:
MyItemColumnID_Action	imgui/imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anone28545ff0111::MyItemColumnID	file:
MyItemColumnID_Description	imgui/imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anone28545ff0111::MyItemColumnID	file:
MyItemColumnID_ID	imgui/imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anone28545ff0111::MyItemColumnID	file:
MyItemColumnID_Name	imgui/imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anone28545ff0111::MyItemColumnID	file:
MyItemColumnID_Quantity	imgui/imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anone28545ff0111::MyItemColumnID	file:
MyResizeCallback	imgui/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	imgui/imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	imgui/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	imgui/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NOMINMAX	imgui/imgui.cpp	/^#define NOMINMAX$/;"	d	file:
Name	imgui/imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	imgui/imgui_demo.cpp	/^    const char* Name;       \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	imgui/imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anone28545ff0111::MyItem	typeref:typename:const char *	file:
Name	imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	include/imgui/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	include/imgui/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	include/imgui/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	include/imgui/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	include/imgui/imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	include/imgui/imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsKeyDown(ImGuiKey_Space/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && (Is/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsKeyPressed(ImGuiKey_Sp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	include/imgui/imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	include/imgui/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	imgui/imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavCalcPreferredRefPos	imgui/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClampRectToVisibleAreaForMoveDir	imgui/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRec/;"	f	typeref:typename:void	file:
NavDisableHighlight	include/imgui/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	include/imgui/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	imgui/imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Identify a selection scope /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHasScroll	include/imgui/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollM/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHideHighlightOneFrame	include/imgui/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	include/imgui/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequest	include/imgui/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	imgui/imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	include/imgui/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResultId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavInitResultId;                    \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInitResultRectRel	include/imgui/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;               \/\/ Init request result rectang/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavInitWindow	imgui/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	include/imgui/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	include/imgui/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT];     \/\/ [LEGACY] Since 1.88, NavInputs[] was re/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavJustMovedToFocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToKeyMods	include/imgui/imgui_internal.h	/^    ImGuiKeyChord           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavLastChildNavWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	include/imgui/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLayer	include/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	include/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	include/imgui/imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	include/imgui/imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	include/imgui/imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	include/imgui/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	include/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	include/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	include/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	include/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	include/imgui/imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	include/imgui/imgui_internal.h	/^    ImGuiKeyChord           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavMoveRequestApplyResult	imgui/imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	imgui/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	imgui/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	imgui/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	imgui/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	imgui/imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	imgui/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	include/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	include/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	include/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	include/imgui/imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	include/imgui/imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	include/imgui/imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	include/imgui/imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavProcessItem	imgui/imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	imgui/imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id, ImGuiItemFlags item_flags, ImGuiNavMoveF/;"	f	class:ImGui	typeref:typename:void
NavRect	include/imgui/imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRectRel	include/imgui/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreHighlightAfterMove	imgui/imgui.cpp	/^void ImGui::NavRestoreHighlightAfterMove()$/;"	f	class:ImGui	typeref:typename:void
NavRestoreLastChildNavWindow	imgui/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	imgui/imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavRootFocusScopeId	include/imgui/imgui_internal.h	/^    ImGuiID                 NavRootFocusScopeId;                \/\/ Focus Scope ID at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
NavSaveLastChildNavWindowIntoParent	imgui/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	imgui/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	imgui/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	typeref:typename:float	file:
NavScoringDebugCount	include/imgui/imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	include/imgui/imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	include/imgui/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	include/imgui/imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	include/imgui/imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	include/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavUpdate	imgui/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	imgui/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	imgui/imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	imgui/imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	imgui/imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	imgui/imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdatePageUpPageDown	imgui/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	imgui/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	imgui/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	imgui/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	include/imgui/imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation is visible/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingAccumDeltaPos	include/imgui/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingAccumDeltaSize	include/imgui/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaSize;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingHighlightAlpha	include/imgui/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	include/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	include/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	include/imgui/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleLayer	include/imgui/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	imgui/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	imgui/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	imgui/imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextEntryIndex	include/imgui/imgui_internal.h	/^    ImGuiKeyRoutingIndex            NextEntryIndex;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiKeyRoutingIndex
NextItemData	include/imgui/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	include/imgui/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	include/imgui/imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	include/imgui/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
Normalized	imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
NotifyOfDocumentsClosedElsewhere	imgui/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
ORANGE	shared.h	/^    #define ORANGE /;"	d
OffMaxX	include/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	include/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	include/imgui/imgui_internal.h	/^    ImU32           Offset;     \/\/ Offset in parent structure$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Offset	include/imgui/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	include/imgui/imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	include/imgui/imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	include/imgui/imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	include/imgui/imgui_internal.h	/^    float               OffsetNorm;             \/\/ Column start offset, normalized 0.0 (far le/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	include/imgui/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	include/imgui/imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Offsets	include/imgui/imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OnKeyPressed	imgui/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	imgui/imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	include/imgui/imgui_internal.h	/^    ImGuiCond                   OpenCond;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond
OpenFrameCount	include/imgui/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	include/imgui/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	include/imgui/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	imgui/imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	imgui/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	imgui/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	imgui/imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	include/imgui/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>OpenPopupStack;                     \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	imgui/imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	include/imgui/imgui_internal.h	/^    bool                        OpenVal;        \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
Operation	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	g
OuterAngle	imgui/imgui.cpp	/^    float  OuterAngle;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	include/imgui/imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	include/imgui/imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	include/imgui/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	include/imgui/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	include/imgui/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	include/imgui/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	include/imgui/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
OwnerCurr	include/imgui/imgui_internal.h	/^    ImGuiID     OwnerCurr;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerNext	include/imgui/imgui_internal.h	/^    ImGuiID     OwnerNext;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
PCH_H	include/pch.h	/^#define PCH_H$/;"	d
PFNGLACTIVETEXTUREPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLACTIVETEXTUREPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLATTACHSHADERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLATTACHSHADERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLBEGINCONDITIONALRENDERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum mode)
PFNGLBEGINQUERYPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint id)
PFNGLBEGINTRANSFORMFEEDBACKPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum primitiveMode)
PFNGLBINDATTRIBLOCATIONPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,const GLchar * name)
PFNGLBINDBUFFERBASEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLuint buffer)
PFNGLBINDBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDBUFFERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDBUFFERRANGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size)
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint colorNumber,GLuint index,const GLchar * name)
PFNGLBINDFRAGDATALOCATIONPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLcha/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint color,const GLchar * name)
PFNGLBINDFRAMEBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint framebuffer)
PFNGLBINDRENDERBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint renderbuffer)
PFNGLBINDSAMPLERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDSAMPLERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDTEXTUREPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDTEXTUREPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDVERTEXARRAYPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBINDVERTEXARRAYPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBLENDCOLORPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat a/;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLBLENDEQUATIONPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONSEPARATEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDEQUATIONSEPARATEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDFUNCPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactor,GLenum dfactor)
PFNGLBLENDFUNCSEPARATEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBLENDFUNCSEPARATEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBLITFRAMEBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint s/;"	t	typeref:typename:void (APIENTRYP)(GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)
PFNGLBUFFERDATAPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const void * data,GLenum usage)
PFNGLBUFFERDATAPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const void * data,GLenum usage)
PFNGLBUFFERSUBDATAPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size,/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)
PFNGLBUFFERSUBDATAPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)
PFNGLCHECKFRAMEBUFFERSTATUSPROC	include/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);$/;"	t	typeref:typename:GLenum (APIENTRYP)(GLenum target)
PFNGLCLAMPCOLORPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum clamp)
PFNGLCLEARBUFFERFIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, /;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,GLfloat depth,GLint stencil)
PFNGLCLEARBUFFERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat */;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLfloat * value)
PFNGLCLEARBUFFERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *va/;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLint * value)
PFNGLCLEARBUFFERUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLuint * value)
PFNGLCLEARCOLORPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat a/;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARCOLORPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARDEPTHPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);$/;"	t	typeref:typename:void (APIENTRYP)(GLdouble depth)
PFNGLCLEARPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCLEARPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCLEARSTENCILPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);$/;"	t	typeref:typename:void (APIENTRYP)(GLint s)
PFNGLCLIENTWAITSYNCPROC	include/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeo/;"	t	typeref:typename:GLenum (APIENTRYP)(GLsync sync,GLbitfield flags,GLuint64 timeout)
PFNGLCOLORMASKIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLboolean r,GLboolean g,GLboolean b,GLboolean a)
PFNGLCOLORMASKPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLbo/;"	t	typeref:typename:void (APIENTRYP)(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)
PFNGLCOLORP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLCOLORP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLCOLORP4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLCOLORP4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLCOMPILESHADERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCOMPILESHADERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCOMPRESSEDTEXIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum intern/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void * data)
PFNGLCOMPRESSEDTEXIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum intern/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void * data)
PFNGLCOMPRESSEDTEXIMAGE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum intern/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void * data)
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoff/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * data)
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoff/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * data)
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoff/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * data)
PFNGLCOPYBUFFERSUBDATAPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLenum readTarget,GLenum writeTarget,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)
PFNGLCOPYTEXIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalform/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)
PFNGLCOPYTEXIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalform/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)
PFNGLCOPYTEXSUBIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)
PFNGLCOPYTEXSUBIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLCOPYTEXSUBIMAGE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLCREATEPROGRAMPROC	include/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)(void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATEPROGRAMPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATESHADERPROC	include/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLCREATESHADERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLCULLFACEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLDELETEBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEBUFFERSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEFRAMEBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * framebuffers)
PFNGLDELETEPROGRAMPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETEPROGRAMPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETEQUERIESPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * ids)
PFNGLDELETERENDERBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * renderbuffers)
PFNGLDELETESAMPLERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei count,const GLuint * samplers)
PFNGLDELETESHADERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETESHADERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETESYNCPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);$/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync)
PFNGLDELETETEXTURESPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETETEXTURESPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETEVERTEXARRAYSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDELETEVERTEXARRAYSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDEPTHFUNCPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum func)
PFNGLDEPTHMASKPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);$/;"	t	typeref:typename:void (APIENTRYP)(GLboolean flag)
PFNGLDEPTHRANGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);$/;"	t	typeref:typename:void (APIENTRYP)(GLdouble n,GLdouble f)
PFNGLDETACHSHADERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDETACHSHADERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDISABLEIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index)
PFNGLDISABLEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDRAWARRAYSINSTANCEDPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLint first,GLsizei count,GLsizei instancecount)
PFNGLDRAWARRAYSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLint first,GLsizei count)
PFNGLDRAWBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum buf)
PFNGLDRAWBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLenum * bufs)
PFNGLDRAWELEMENTSBASEVERTEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWELEMENTSBASEVERTEXPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLint basevertex)
PFNGLDRAWELEMENTSINSTANCEDPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type,/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount)
PFNGLDRAWELEMENTSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const vo/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices)
PFNGLDRAWELEMENTSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const v/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices)
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWRANGEELEMENTSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void * indices)
PFNGLENABLEIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index)
PFNGLENABLEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEVERTEXATTRIBARRAYPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLENABLEVERTEXATTRIBARRAYPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLENDCONDITIONALRENDERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLENDQUERYPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target)
PFNGLENDTRANSFORMFEEDBACKPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFENCESYNCPROC	include/glad/glad.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);$/;"	t	typeref:typename:GLsync (APIENTRYP)(GLenum condition,GLbitfield flags)
PFNGLFINISHPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFINISHPROC)(void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizei/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr length)
PFNGLFLUSHPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC)(void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFLUSHPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFRAMEBUFFERRENDERBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLen/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)
PFNGLFRAMEBUFFERTEXTURE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)
PFNGLFRAMEBUFFERTEXTURE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)
PFNGLFRAMEBUFFERTEXTURE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset)
PFNGLFRAMEBUFFERTEXTURELAYERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLui/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer)
PFNGLFRAMEBUFFERTEXTUREPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint te/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLuint texture,GLint level)
PFNGLFRONTFACEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLGENBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENBUFFERSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENERATEMIPMAPPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target)
PFNGLGENFRAMEBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * framebuffers)
PFNGLGENQUERIESPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * ids)
PFNGLGENRENDERBUFFERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * renderbuffers)
PFNGLGENSAMPLERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei count,GLuint * samplers)
PFNGLGENTEXTURESPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENTEXTURESPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENVERTEXARRAYSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGENVERTEXARRAYSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGETACTIVEATTRIBPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockInd/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLenum pname,GLint * params)
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockI/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformBlockName)
PFNGLGETACTIVEUNIFORMNAMEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformName)
PFNGLGETACTIVEUNIFORMPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)
PFNGLGETACTIVEUNIFORMSIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei uniformCount,const GLuint * uniformIndices,GLenum pname,GLint * params)
PFNGLGETATTACHEDSHADERSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei */;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei maxCount,GLsizei * count,GLuint * shaders)
PFNGLGETATTRIBLOCATIONPROC	include/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETATTRIBLOCATIONPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETBOOLEANI_VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETBOOLEANI_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETBOOLEANVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLboolean * data)
PFNGLGETBUFFERPARAMETERI64VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *p/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint64 * params)
PFNGLGETBUFFERPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *param/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETBUFFERPOINTERVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,void ** params)
PFNGLGETBUFFERSUBDATAPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr si/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,void * data)
PFNGLGETCOMPRESSEDTEXIMAGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,void * img)
PFNGLGETDOUBLEI_VEXTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLdouble * params)
PFNGLGETDOUBLEI_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLdouble * data)
PFNGLGETDOUBLEVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLdouble * data)
PFNGLGETERRORPROC	include/glad/glad.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC)(void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETERRORPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETFLOATI_VEXTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * params)
PFNGLGETFLOATI_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLfloat * data)
PFNGLGETFLOATVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat * data)
PFNGLGETFRAGDATAINDEXPROC	include/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETFRAGDATALOCATIONPROC	include/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum atta/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum pname,GLint * params)
PFNGLGETINTEGER64I_VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGER64I_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGER64VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint64 * data)
PFNGLGETINTEGERI_VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERI_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERUI64I_VNVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT */;"	t	typeref:typename:void (APIENTRYP)(GLenum value,GLuint index,GLuint64EXT * result)
PFNGLGETINTEGERVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * data)
PFNGLGETINTEGERVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * data)
PFNGLGETMULTISAMPLEFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * val)
PFNGLGETPOINTERI_VEXTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,void ** params)
PFNGLGETPROGRAMINFOLOGPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *le/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMINFOLOGPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETPROGRAMIVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETQUERYIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETQUERYOBJECTI64VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLint64 * params)
PFNGLGETQUERYOBJECTIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLint * params)
PFNGLGETQUERYOBJECTUI64VPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params)/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLuint64 * params)
PFNGLGETQUERYOBJECTUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLuint * params)
PFNGLGETRENDERBUFFERPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETSAMPLERPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *p/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLfloat * params)
PFNGLGETSAMPLERPARAMETERIIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *pa/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint * params)
PFNGLGETSAMPLERPARAMETERIUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLuint * params)
PFNGLGETSAMPLERPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *par/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint * params)
PFNGLGETSHADERINFOLOGPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *leng/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERINFOLOGPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *len/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSHADERIVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSHADERSOURCEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *lengt/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * source)
PFNGLGETSTRINGIPROC	include/glad/glad.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGIPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGPROC	include/glad/glad.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETSTRINGPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETSYNCIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync,GLenum pname,GLsizei count,GLsizei * length,GLint * values)
PFNGLGETTEXIMAGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum format,GLenum type,void * pixels)
PFNGLGETTEXLEVELPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pnam/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum pname,GLfloat * params)
PFNGLGETTEXLEVELPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pnam/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum pname,GLint * params)
PFNGLGETTEXPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLfloat * params)
PFNGLGETTEXPARAMETERIIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETTEXPARAMETERIUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *param/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLuint * params)
PFNGLGETTEXPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETTRANSFORMFEEDBACKI64_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint in/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint64 * param)
PFNGLGETTRANSFORMFEEDBACKI_VPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint inde/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint * param)
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLsizei * size,GLenum * type,GLchar * name)
PFNGLGETUNIFORMBLOCKINDEXPROC	include/glad/glad.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBl/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint program,const GLchar * uniformBlockName)
PFNGLGETUNIFORMFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat * params)
PFNGLGETUNIFORMINDICESPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei uniformCount,const GLchar * const * uniformNames,GLuint * uniformIndices)
PFNGLGETUNIFORMIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint * params)
PFNGLGETUNIFORMLOCATIONPROC	include/glad/glad.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETUNIFORMLOCATIONPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETUNIFORMUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint * params)
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,GLint * param)
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,void ** param)
PFNGLGETVERTEXATTRIBDVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLdouble * params)
PFNGLGETVERTEXATTRIBFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params)/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLfloat * params)
PFNGLGETVERTEXATTRIBIIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBIUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLuint * params)
PFNGLGETVERTEXATTRIBIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBIVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBPOINTERVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **poi/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,void ** pointer)
PFNGLGETVERTEXATTRIBPOINTERVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **po/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,void ** pointer)
PFNGLHINTPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum mode)
PFNGLISBUFFERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint buffer)
PFNGLISENABLEDIPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum target,GLuint index)
PFNGLISENABLEDPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISENABLEDPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISFRAMEBUFFERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint framebuffer)
PFNGLISPROGRAMPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLISPROGRAMPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLISQUERYPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint id)
PFNGLISRENDERBUFFERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint renderbuffer)
PFNGLISSAMPLERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint sampler)
PFNGLISSHADERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint shader)
PFNGLISSYNCPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLsync sync)
PFNGLISTEXTUREPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint texture)
PFNGLISVERTEXARRAYPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint array)
PFNGLLINEWIDTHPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat width)
PFNGLLINKPROGRAMPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLLINKPROGRAMPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLLOGICOPPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum opcode)
PFNGLMAPBUFFERPROC	include/glad/glad.h	/^typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);$/;"	t	typeref:typename:void * (APIENTRYP)(GLenum target,GLenum access)
PFNGLMAPBUFFERRANGEPROC	include/glad/glad.h	/^typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr le/;"	t	typeref:typename:void * (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr length,GLbitfield access)
PFNGLMULTIDRAWARRAYSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLint * first,const GLsizei * count,GLsizei drawcount)
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count,/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei drawcount,const GLint * basevertex)
PFNGLMULTIDRAWELEMENTSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum ty/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei drawcount)
PFNGLMULTITEXCOORDP1UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP1UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint */;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLNORMALP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLNORMALP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLPIXELSTOREFPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat param)
PFNGLPIXELSTOREIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPIXELSTOREIPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOINTPARAMETERFPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat param)
PFNGLPOINTPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,const GLfloat * params)
PFNGLPOINTPARAMETERIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOINTPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,const GLint * params)
PFNGLPOINTSIZEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat size)
PFNGLPOLYGONMODEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLPOLYGONMODEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLPOLYGONOFFSETPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat factor,GLfloat units)
PFNGLPRIMITIVERESTARTINDEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLPROVOKINGVERTEXPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLQUERYCOUNTERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum target)
PFNGLREADBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum src)
PFNGLREADPIXELSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GL/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)
PFNGLREADPIXELSPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, G/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples,/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLRENDERBUFFERSTORAGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLSAMPLECOVERAGEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat value,GLboolean invert)
PFNGLSAMPLEMASKIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint maskNumber,GLbitfield mask)
PFNGLSAMPLERPARAMETERFPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param)/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLfloat param)
PFNGLSAMPLERPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLfloat * param)
PFNGLSAMPLERPARAMETERIIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint /;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLint * param)
PFNGLSAMPLERPARAMETERIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint param)
PFNGLSAMPLERPARAMETERIUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuin/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLuint * param)
PFNGLSAMPLERPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint */;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLint * param)
PFNGLSCISSORPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSCISSORPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSECONDARYCOLORP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLSECONDARYCOLORP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLSHADERSOURCEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLSHADERSOURCEPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLSTENCILFUNCPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum func,GLint ref,GLuint mask)
PFNGLSTENCILFUNCSEPARATEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuin/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum func,GLint ref,GLuint mask)
PFNGLSTENCILMASKPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint mask)
PFNGLSTENCILMASKSEPARATEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLuint mask)
PFNGLSTENCILOPPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum fail,GLenum zfail,GLenum zpass)
PFNGLSTENCILOPSEPARATEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum sfail,GLenum dpfail,GLenum dppass)
PFNGLTEXBUFFERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer)/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLuint buffer)
PFNGLTEXCOORDP1UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP1UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXIMAGE2DMULTISAMPLEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum i/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)
PFNGLTEXIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXIMAGE2DPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXIMAGE3DMULTISAMPLEPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum i/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)
PFNGLTEXIMAGE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXPARAMETERFPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLfloat param)
PFNGLTEXPARAMETERFVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *par/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLfloat * params)
PFNGLTEXPARAMETERIIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *para/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLint * params)
PFNGLTEXPARAMETERIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLTEXPARAMETERIPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLTEXPARAMETERIUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *pa/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLuint * params)
PFNGLTEXPARAMETERIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *param/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLint * params)
PFNGLTEXSUBIMAGE1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)
PFNGLTEXSUBIMAGE2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)
PFNGLTEXSUBIMAGE3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei count,const GLchar * const * varyings,GLenum bufferMode)
PFNGLUNIFORM1FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0)
PFNGLUNIFORM1FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM1IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORM1IPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORM1IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM1UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0)
PFNGLUNIFORM1UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM2FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1)
PFNGLUNIFORM2FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM2IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1)
PFNGLUNIFORM2IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1)
PFNGLUNIFORM2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM3FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1,GLfloat v2)
PFNGLUNIFORM3FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM3IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1,GLint v2)
PFNGLUNIFORM3IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1,GLuint v2)
PFNGLUNIFORM3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM4FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, /;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)
PFNGLUNIFORM4FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM4IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint /;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1,GLint v2,GLint v3)
PFNGLUNIFORM4IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GL/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)
PFNGLUNIFORM4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORMBLOCKBINDINGPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLuint uniformBlockBinding)
PFNGLUNIFORMMATRIX2FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean tran/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX2X3FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX2X4FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean tran/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3X2FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3X4FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean tran/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4FVPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4X2FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4X3FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean tr/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNMAPBUFFERPROC	include/glad/glad.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum target)
PFNGLUSEPROGRAMPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLUSEPROGRAMPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVALIDATEPROGRAMPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVERTEXATTRIB1DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x)
PFNGLVERTEXATTRIB1DVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB1FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x)
PFNGLVERTEXATTRIB1FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB1SPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x)
PFNGLVERTEXATTRIB1SVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB2DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y)
PFNGLVERTEXATTRIB2DVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB2FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y)
PFNGLVERTEXATTRIB2FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB2SPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y)
PFNGLVERTEXATTRIB2SVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB3DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z)
PFNGLVERTEXATTRIB3DVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB3FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y,GLfloat z)
PFNGLVERTEXATTRIB3FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB3SPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y,GLshort z)
PFNGLVERTEXATTRIB3SVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4BVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIB4DPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)
PFNGLVERTEXATTRIB4DVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB4FPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)
PFNGLVERTEXATTRIB4FVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB4IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIB4NBVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIB4NIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIB4NSVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4NUBPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w)
PFNGLVERTEXATTRIB4NUBVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIB4NUIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIB4NUSVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIB4SPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w)
PFNGLVERTEXATTRIB4SVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4UBVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIB4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIB4USVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIBDIVISORPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint divisor)
PFNGLVERTEXATTRIBI1IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x)
PFNGLVERTEXATTRIBI1IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI1UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x)
PFNGLVERTEXATTRIBI1UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI2IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y)
PFNGLVERTEXATTRIBI2IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y)
PFNGLVERTEXATTRIBI2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI3IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y,GLint z)
PFNGLVERTEXATTRIBI3IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y,GLuint z)
PFNGLVERTEXATTRIBI3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI4BVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIBI4IPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y,GLint z,GLint w)
PFNGLVERTEXATTRIBI4IVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI4SVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIBI4UBVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIBI4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, G/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)
PFNGLVERTEXATTRIBI4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI4USVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIBIPOINTERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLsizei stride,const void * pointer)
PFNGLVERTEXATTRIBP1UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normaliz/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP1UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normaliz/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normaliz/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normaliz/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBPOINTERPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLb/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)
PFNGLVERTEXATTRIBPOINTERPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)
PFNGLVERTEXP2UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP2UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVERTEXP3UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP3UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVERTEXP4UIPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP4UIVPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVIEWPORTPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLVIEWPORTPROC	include/imgui/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLWAITSYNCPROC	include/glad/glad.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync,GLbitfield flags,GLuint64 timeout)
PFNGLXGETPROCADDRESSPROC_PRIVATE	glad.c	/^typedef void* (APIENTRYP PFNGLXGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	typeref:typename:void * (APIENTRYP)(const char *)	file:
PFNWGLGETPROCADDRESSPROC_PRIVATE	glad.c	/^typedef void* (APIENTRYP PFNWGLGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	typeref:typename:void * (APIENTRYP)(const char *)	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PRINT_COLOR	shared.h	/^    #define PRINT_COLOR(/;"	d
PRINT_COLORS	shared.h	/^    #define PRINT_COLORS(/;"	d
PRINT_OP	shared.h	/^    #define PRINT_OP(/;"	d
PackIdLines	include/imgui/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	include/imgui/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	imgui/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	imgui/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	imgui/imgui.cpp	/^        static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLastItemDataBackup	include/imgui/imgui_internal.h	/^    ImGuiLastItemData       ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	include/imgui/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	include/imgui/imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowInBeginStack	include/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	include/imgui/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	imgui/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PathArcTo	imgui/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	imgui/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	imgui/imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	imgui/imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathClear	include/imgui/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	include/imgui/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	include/imgui/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	include/imgui/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	imgui/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	include/imgui/imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	include/imgui/imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
PixelSnapH	include/imgui/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PixelStorei	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLPIXELSTOREIPROC              PixelStorei;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLPIXELSTOREIPROC
PlatformHandleRaw	include/imgui/imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformImeData	include/imgui/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	include/imgui/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data (when c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformLocaleDecimalPoint	include/imgui/imgui_internal.h	/^    char                    PlatformLocaleDecimalPoint;         \/\/ '.' or *localeconv()->decim/;"	m	struct:ImGuiContext	typeref:typename:char
PlotEx	imgui/imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	imgui/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PolygonMode	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLPOLYGONMODEPROC              PolygonMode;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLPOLYGONMODEPROC
PopAllowKeyboardFocus	include/imgui/imgui.h	/^    static inline void  PopAllowKeyboardFocus()                                             { Po/;"	f	namespace:ImGui	typeref:typename:void
PopButtonRepeat	imgui/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	imgui/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	imgui/imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	imgui/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	imgui/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	imgui/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	imgui/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	imgui/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	imgui/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	imgui/imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	imgui/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTabStop	imgui/imgui.cpp	/^void ImGui::PopTabStop()$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	imgui/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	include/imgui/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	include/imgui/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	include/imgui/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	include/imgui/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	imgui.ini	/^Pos=35,50$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=815,317$/;"	k	section:Window
Pos	include/imgui/imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	include/imgui/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	include/imgui/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	include/imgui/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
PosCond	include/imgui/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	include/imgui/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	include/imgui/imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	include/imgui/imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	include/imgui/imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosVal	include/imgui/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PrevEnabledColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	include/imgui/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	include/imgui/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	include/imgui/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	include/imgui/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
PrevUserCallbackChar	imgui/imgui_impl_glfw.cpp	/^    GLFWcharfun             PrevUserCallbackChar;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcharfun	file:
PrevUserCallbackCursorEnter	imgui/imgui_impl_glfw.cpp	/^    GLFWcursorenterfun      PrevUserCallbackCursorEnter;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorenterfun	file:
PrevUserCallbackCursorPos	imgui/imgui_impl_glfw.cpp	/^    GLFWcursorposfun        PrevUserCallbackCursorPos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorposfun	file:
PrevUserCallbackKey	imgui/imgui_impl_glfw.cpp	/^    GLFWkeyfun              PrevUserCallbackKey;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWkeyfun	file:
PrevUserCallbackMonitor	imgui/imgui_impl_glfw.cpp	/^    GLFWmonitorfun          PrevUserCallbackMonitor;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmonitorfun	file:
PrevUserCallbackMousebutton	imgui/imgui_impl_glfw.cpp	/^    GLFWmousebuttonfun      PrevUserCallbackMousebutton;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmousebuttonfun	file:
PrevUserCallbackScroll	imgui/imgui_impl_glfw.cpp	/^    GLFWscrollfun           PrevUserCallbackScroll;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWscrollfun	file:
PrevUserCallbackWindowFocus	imgui/imgui_impl_glfw.cpp	/^    GLFWwindowfocusfun      PrevUserCallbackWindowFocus;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindowfocusfun	file:
Preview	include/imgui/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PreviewRect	include/imgui/imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	imgui/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	imgui/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	imgui/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	imgui/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	imgui/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	include/imgui/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	include/imgui/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	include/imgui/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrintFmt	include/imgui/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	imgui/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	imgui/imgui_impl_opengl3.cpp	/^    GLvoid* Ptr;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLvoid *	file:
Ptr	include/imgui/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	include/imgui/imgui.h	/^    static inline void  PushAllowKeyboardFocus(bool tab_stop)                               { Pu/;"	f	namespace:ImGui	typeref:typename:void
PushButtonRepeat	imgui/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	imgui/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	imgui/imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	imgui/imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	imgui/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	imgui/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	imgui/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	imgui/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	imgui/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	imgui/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	imgui/imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTabStop	imgui/imgui.cpp	/^void ImGui::PushTabStop(bool tab_stop)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	imgui/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Quantity	imgui/imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anone28545ff0111::MyItem	typeref:typename:int	file:
QueryFrameCount	include/imgui/imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	include/imgui/imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiStackTool	typeref:typename:ImGuiID
QuerySuccess	include/imgui/imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
Quick Start	readme.md	/^## Quick Start$/;"	s	chapter:imgs
R	include/cubic.h	/^void Cubic::R() {$/;"	f	class:Cubic	typeref:typename:void
RECTANGLE_H	include/rectangle.h	/^#define RECTANGLE_H$/;"	d
RED	shared.h	/^    #define RED /;"	d
REPEAT_OP	include/basic_solver.h	/^#define REPEAT_OP(/;"	d
RM	Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	cmake-build/Makefile	/^RM = \/home\/he\/.local\/lib\/python3.9\/site-packages\/cmake\/data\/bin\/cmake -E rm -f$/;"	m
RUR_U_	shared.h	/^    const Operation RUR_U_[] = {op_R,op_U,op_R_inv,op_U_inv}; $/;"	v	typeref:typename:const Operation[]
R_inv	include/cubic.h	/^void Cubic::R_inv() {$/;"	f	class:Cubic	typeref:typename:void
RadioButton	imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
Ranges	include/imgui/imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RasterizerMultiply	include/imgui/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f/;"	m	struct:ImFontConfig	typeref:typename:float
RawData	include/imgui/imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
ReadInitFn	include/imgui/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	include/imgui/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	include/imgui/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
ReadPixels	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLREADPIXELSPROC               ReadPixels;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLREADPIXELSPROC
Rect	include/imgui/imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	include/imgui/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	include/imgui/imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rectangle	include/rectangle.h	/^Rectangle::Rectangle() {}$/;"	f	class:Rectangle
Rectangle	include/rectangle.h	/^Rectangle::Rectangle(float _x , float _y,float _w , float _h) {$/;"	f	class:Rectangle
Rectangle	include/rectangle.h	/^class Rectangle$/;"	c
Rects	imgui/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefFrame	include/imgui/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
RefScale	include/imgui/imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	include/imgui/imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
Remove	include/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	include/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	imgui/imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	imgui/imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
Render	imgui/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	imgui/imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	imgui/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	imgui/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	imgui/imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	imgui/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	imgui/imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	imgui/imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderDimmedBackgroundBehindWindow	imgui/imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	imgui/imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDragDropTargetRect	imgui/imgui.cpp	/^void ImGui::RenderDragDropTargetRect(const ImRect& bb)$/;"	f	class:ImGui	typeref:typename:void
RenderFrame	imgui/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	imgui/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	imgui/imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	imgui/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledRangeH	imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	imgui/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	imgui/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	imgui/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	imgui/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderViewportsThumbnails	imgui/imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	imgui/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	imgui/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowTitleBarContents	imgui/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
ReorderColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	include/imgui/imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	include/imgui/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
RequestedWidth	include/imgui/imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Reserve	include/imgui/imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	include/imgui/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	include/imgui/imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetMouseDragDelta	imgui/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	include/imgui/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	include/imgui/imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	include/imgui/imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
Results	include/imgui/imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RootWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	include/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	include/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	include/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	imgui/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
RoutingCurr	include/imgui/imgui_internal.h	/^    ImGuiID                         RoutingCurr;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNext	include/imgui/imgui_internal.h	/^    ImGuiID                         RoutingNext;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNextScore	include/imgui/imgui_internal.h	/^    ImU8                            RoutingNextScore;   \/\/ Lower is better (0: perfect score)$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
Row	imgui/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
RowBgColor	include/imgui/imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	include/imgui/imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	include/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowFlags	include/imgui/imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	include/imgui/imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	include/imgui/imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	include/imgui/imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	include/imgui/imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	include/imgui/imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
SHADER_H	include/shader.h	/^#define SHADER_H$/;"	d
SHARED_H_	shared.h	/^#define SHARED_H_$/;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cmake-build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SOLVER_H	include/solver.h	/^#define SOLVER_H$/;"	d
SOURCE_FILE	CMakeLists.txt	/^set(SOURCE_FILE  main.cpp glad.c .\/imgui\/imgui_demo.cpp .\/imgui\/imgui_draw.cpp .\/imgui\/img/;"	v
STBRP_ASSERT	imgui/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	include/imgui/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	include/imgui/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	include/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon8a0969a30103
STBRP_HEURISTIC_Skyline_BL_sortHeight	include/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon8a0969a30103
STBRP_HEURISTIC_Skyline_default	include/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon8a0969a30103
STBRP_SORT	imgui/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	include/imgui/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	imgui/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	include/imgui/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	include/imgui/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	include/imgui/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon8a0969a30203
STBRP__MAXVAL	include/imgui/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	include/imgui/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	include/imgui/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	include/imgui/imstb_truetype.h	/^#define STBTT_FIX        (1 << STBTT_FIXS/;"	d
STBTT_FIXMASK	include/imgui/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	include/imgui/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	include/imgui/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	include/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	include/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	include/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	include/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	include/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_CHINESE_TRAD	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_GREEK	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_HEBREW	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_JAPANESE	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_KOREAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_ROMAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anona175a7780c03
STBTT_MAC_EID_RUSSIAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anona175a7780c03
STBTT_MAC_LANG_ARABIC	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_CHINESE_TRAD	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_DUTCH	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_ENGLISH	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_FRENCH	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_GERMAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_HEBREW	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_ITALIAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_JAPANESE	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_KOREAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_RUSSIAN	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_SPANISH	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anona175a7780e03
STBTT_MAC_LANG_SWEDISH	include/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anona175a7780e03
STBTT_MAX_OVERSAMPLE	include/imgui/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	include/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anona175a7780b03
STBTT_MS_EID_SYMBOL	include/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anona175a7780b03
STBTT_MS_EID_UNICODE_BMP	include/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anona175a7780b03
STBTT_MS_EID_UNICODE_FULL	include/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anona175a7780b03
STBTT_MS_LANG_CHINESE	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_DUTCH	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_ENGLISH	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_FRENCH	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_GERMAN	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_HEBREW	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_ITALIAN	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_JAPANESE	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_KOREAN	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_RUSSIAN	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_SPANISH	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anona175a7780d03
STBTT_MS_LANG_SWEDISH	include/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anona175a7780d03
STBTT_PLATFORM_ID_ISO	include/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anona175a7780903
STBTT_PLATFORM_ID_MAC	include/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anona175a7780903
STBTT_PLATFORM_ID_MICROSOFT	include/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anona175a7780903
STBTT_PLATFORM_ID_UNICODE	include/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anona175a7780903
STBTT_POINT_SIZE	include/imgui/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	include/imgui/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	imgui/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	include/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anona175a7780a03
STBTT_UNICODE_EID_UNICODE_1_0	include/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anona175a7780a03
STBTT_UNICODE_EID_UNICODE_1_1	include/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anona175a7780a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	include/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anona175a7780a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	include/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anona175a7780a03
STBTT__COMPARE	include/imgui/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	include/imgui/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	include/imgui/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	include/imgui/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	include/imgui/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	include/imgui/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	imgui/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	include/imgui/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	include/imgui/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	imgui/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	include/imgui/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	imgui/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	include/imgui/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	imgui/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	include/imgui/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	imgui/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	include/imgui/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	imgui/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	include/imgui/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	imgui/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	include/imgui/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	include/imgui/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	include/imgui/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	include/imgui/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	include/imgui/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	imgui/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	include/imgui/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	imgui/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	include/imgui/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	include/imgui/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	include/imgui/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anona175a7780603
STBTT_vcurve	include/imgui/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anona175a7780603
STBTT_vline	include/imgui/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anona175a7780603
STBTT_vmove	include/imgui/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anona175a7780603
STB_INCLUDE_STB_RECT_PACK_H	include/imgui/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	imgui/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	include/imgui/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	imgui/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_CHARTYPE	include/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	imgui/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	imgui/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_GETWIDTH_NEWLINE	include/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	imgui/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	imgui/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_/;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_/;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(ImGuiInputTextState* obj, int idx)  { ImGuiContext& /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_POSITIONTYPE	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	include/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRINGLEN	imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_UNDOCHARCOUNT	include/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	include/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	include/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	include/imgui/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	imgui/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	include/imgui/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anonda15fd810308
STRINGIFY	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SameLine	imgui/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
Saturate	imgui/imgui_impl_glfw.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
SaveFlags	include/imgui/imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	imgui/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	imgui/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	imgui/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	include/imgui/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	imgui/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	imgui/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	imgui/imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScaleValueFromRatioT	imgui/imgui_widgets.cpp	/^TYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:TYPE
ScanFmt	include/imgui/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scissor	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLSCISSORPROC                  Scissor;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLSCISSORPROC
Scroll	include/imgui/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	include/imgui/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	include/imgui/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	include/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	include/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	imgui/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	include/imgui/imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	imgui/imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	imgui/imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	imgui/imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	include/imgui/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	include/imgui/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	imgui/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	include/imgui/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	imgui/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	include/imgui/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	include/imgui/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	include/imgui/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	include/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	include/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	include/imgui/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	include/imgui/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	include/imgui/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	include/imgui/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	include/imgui/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	include/imgui/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SegmentN1	imgui/imgui.cpp	/^    ImVec2 SegmentN1, SegmentN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	imgui/imgui.cpp	/^    ImVec2 SegmentN1, SegmentN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	include/imgui/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectAll	include/imgui/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
Selectable	imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	include/imgui/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	include/imgui/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	include/imgui/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	include/imgui/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	include/imgui/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Separator	imgui/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	imgui/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SeparatorText	imgui/imgui_widgets.cpp	/^void ImGui::SeparatorText(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextAlign	include/imgui/imgui.h	/^    ImVec2      SeparatorTextAlign;         \/\/ Alignment of text within the separator. Default/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SeparatorTextBorderSize	include/imgui/imgui.h	/^    float       SeparatorTextBorderSize;    \/\/ Thickkness of border in SeparatorText()$/;"	m	struct:ImGuiStyle	typeref:typename:float
SeparatorTextEx	imgui/imgui_widgets.cpp	/^void ImGui::SeparatorTextEx(ImGuiID id, const char* label, const char* label_end, float extra_w)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextPadding	include/imgui/imgui.h	/^    ImVec2      SeparatorTextPadding;       \/\/ Horizontal offset of text from each edge of the/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SetActiveID	imgui/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingAllKeyboardKeys	imgui/imgui.cpp	/^void ImGui::SetActiveIdUsingAllKeyboardKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	include/imgui/imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	imgui/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	imgui/imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAppAcceptingEvents	imgui/imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	include/imgui/imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	include/imgui/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	include/imgui/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	include/imgui/imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	include/imgui/imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	imgui/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	imgui/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	imgui/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	include/imgui/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void* user_data_ctx, const char* text)$/;"	f	typeref:typename:void	file:
SetClipboardTextFn_DefaultImpl	imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	imgui/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	imgui/imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	imgui/imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	imgui/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	imgui/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	imgui/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	imgui/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	imgui/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	imgui/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	imgui/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	imgui/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	imgui/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	imgui/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	imgui/imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	include/imgui/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	imgui/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	imgui/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	imgui/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	imgui/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	imgui/imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetItemUsingMouseWheel	include/imgui/imgui_internal.h	/^    inline void     SetItemUsingMouseWheel()                                            { SetIte/;"	f	namespace:ImGui	typeref:typename:void
SetKeyEventNativeData	imgui/imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyOwner	imgui/imgui.cpp	/^void ImGui::SetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetKeyOwnersForKeyChord	imgui/imgui.cpp	/^void ImGui::SetKeyOwnersForKeyChord(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags f/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	imgui/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	imgui/imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	imgui/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	imgui/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	imgui/imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	imgui/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	imgui/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	imgui/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	imgui/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	imgui/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	imgui/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	imgui/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	imgui/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	imgui/imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	imgui/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	imgui/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPlatformImeDataFn	include/imgui/imgui.h	/^    void        (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImGuiViewport * viewport,ImGuiPlatformImeData * data)
SetPlatformImeDataFn_DefaultImpl	imgui/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport* viewport, ImGuiPlatformImeData* data/;"	f	typeref:typename:void	file:
SetPlatformImeDataFn_DefaultImpl	imgui/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport*, ImGuiPlatformImeData*) {}$/;"	f	typeref:typename:void	file:
SetScrollFromPosX	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	imgui/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	imgui/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetShortcutRouting	imgui/imgui.cpp	/^bool ImGui::SetShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
SetState	imgui/imgui_impl_opengl3.cpp	/^    void SetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
SetStateStorage	imgui/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	imgui/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	include/imgui/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetToContextState	imgui/imgui.cpp	/^void ImGuiStackSizes::SetToContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
SetTooltip	imgui/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	imgui/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	imgui/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowClipRectBeforeSetChannel	imgui/imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	include/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	imgui/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	imgui/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	imgui/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	imgui/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHiddendAndSkipItemsForCurrentFrame	imgui/imgui.cpp	/^void ImGui::SetWindowHiddendAndSkipItemsForCurrentFrame(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	imgui/imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	include/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	include/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	include/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	include/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	imgui/imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	include/imgui/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	include/imgui/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	include/imgui/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	include/imgui/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	include/imgui/imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	include/imgui/imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	include/imgui/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	include/imgui/imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	include/imgui/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupViewportDrawData	imgui/imgui.cpp	/^static void SetupViewportDrawData(ImGuiViewportP* viewport, ImVector<ImDrawList*>* draw_lists)$/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
Shader	include/shader.h	/^		Shader(const char* path) {$/;"	f	class:Shader
Shader	include/shader.h	/^class Shader {$/;"	c
ShaderHandle	imgui/imgui_impl_opengl3.cpp	/^    GLuint          ShaderHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
ShaderSource	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLSHADERSOURCEPROC             ShaderSource;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLSHADERSOURCEPROC
ShaderSource	include/shader.h	/^} ShaderSource;$/;"	t	typeref:struct:__anon11768d450108
Shortcut	imgui/imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ShowAboutWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowAtlasTintedWithTextColor	include/imgui/imgui_internal.h	/^    bool        ShowAtlasTintedWithTextColor = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLog	include/imgui/imgui_internal.h	/^    bool        ShowDebugLog = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogWindow	imgui/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	imgui/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	imgui/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowInputs	imgui/imgui_demo.cpp	/^static void ShowDemoWindowInputs()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	imgui/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	imgui/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	imgui/imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	imgui/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDrawCmdBoundingBoxes	include/imgui/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	include/imgui/imgui_internal.h	/^    bool        ShowDrawCmdMesh = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAutoResize	imgui/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	imgui/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	imgui/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	imgui/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	imgui/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	imgui/imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	imgui/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	imgui/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	imgui/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	imgui/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	imgui/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	imgui/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	imgui/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	imgui/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	imgui/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	imgui/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	imgui/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowPlaceholderObject	imgui/imgui_demo.cpp	/^static void ShowPlaceholderObject(const char* prefix, int uid)$/;"	f	typeref:typename:void	file:
ShowStackTool	include/imgui/imgui_internal.h	/^    bool        ShowStackTool = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowStackToolWindow	imgui/imgui.cpp	/^void ImGui::ShowStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowStackToolWindow	imgui/imgui.cpp	/^void ImGui::ShowStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	imgui/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	imgui/imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	include/imgui/imgui_internal.h	/^    bool        ShowTablesRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	include/imgui/imgui_internal.h	/^    int         ShowTablesRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowUserGuide	imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	include/imgui/imgui_internal.h	/^    bool        ShowWindowsBeginOrder = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	include/imgui/imgui_internal.h	/^    bool        ShowWindowsRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	include/imgui/imgui_internal.h	/^    int         ShowWindowsRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	include/imgui/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	imgui/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	imgui/imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	imgui/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Size	imgui.ini	/^Size=160,141$/;"	k	section:Window
Size	imgui.ini	/^Size=222,266$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui/imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Size	include/imgui/imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	include/imgui/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	include/imgui/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	include/imgui/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	include/imgui/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	include/imgui/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	include/imgui/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	include/imgui/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	include/imgui/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	include/imgui/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	include/imgui/imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfColorStack	include/imgui/imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfDisabledStack	include/imgui/imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFocusScopeStack	include/imgui/imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFontStack	include/imgui/imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfGroupStack	include/imgui/imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfIDStack	include/imgui/imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfItemFlagsStack	include/imgui/imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfStyleVarStack	include/imgui/imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizePixels	include/imgui/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	include/imgui/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	include/imgui/imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	include/imgui/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	imgui/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	include/imgui/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	include/imgui/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	include/imgui/imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	imgui/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
Solver	include/solver.h	/^    Solver(){}$/;"	f	class:Solver
Solver	include/solver.h	/^class Solver$/;"	c
Solvers	readme.md	/^# Solvers$/;"	c
SortDirection	include/imgui/imgui.h	/^    ImGuiSortDirection          SortDirection : 8;  \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection:8
SortDirection	include/imgui/imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	include/imgui/imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	include/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	include/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered of available sort direc/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	include/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortOrder	include/imgui/imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SortOrder	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	include/imgui/imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	include/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	include/imgui/imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	include/imgui/imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
Source	include/imgui/imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceId	include/imgui/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	include/imgui/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Spacing	imgui/imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	imgui/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Spacing	include/imgui/imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Specs	include/imgui/imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	include/imgui/imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	include/imgui/imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
Split	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	include/imgui/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Square	imgui/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data)         { data->DesiredSize.x = data->De/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	imgui/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	imgui/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackLevel	include/imgui/imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiStackTool	typeref:typename:int
StackSizesOnBegin	include/imgui/imgui_internal.h	/^    ImGuiStackSizes         StackSizesOnBegin;      \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiStackSizes
StackToolFormatLevelInfo	imgui/imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiStackTool* tool, int n, bool format_for_ui, char* buf, /;"	f	typeref:typename:int	file:
StartMouseMovingWindow	imgui/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	include/imgui/imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
StateStorage	include/imgui/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	include/imgui/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	imgui/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
StatusFlags	include/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	include/imgui/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	include/imgui/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anonda15fd810508
StbTexteditRow	include/imgui/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anonda15fd810408
StbUndoRecord	include/imgui/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anonda15fd810108
StbUndoState	include/imgui/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anonda15fd810208
Step	imgui/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	imgui/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)           { float step = *(float*)data->Us/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	include/imgui/imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	include/imgui/imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	include/imgui/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
Strdup	imgui/imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchWeight	include/imgui/imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	imgui/imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Stride	imgui/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	imgui/imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	imgui/imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Stub	include/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
Style	include/imgui/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	include/imgui/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleVarStack;                      \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
TABLE_BORDER_SIZE	imgui/imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	imgui/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	imgui/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TRT_BackgroundClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentFrozen	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentHeadersIdeal	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentHeadersUsed	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentUnfrozen	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsWorkRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_Count	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_HostClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_InnerClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_InnerRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_OuterRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_WorkRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TabBarCalcMaxTabWidth	imgui/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcScrollableWidth	imgui/imgui_widgets.cpp	/^static float TabBarCalcScrollableWidth(ImGuiTabBar* tab_bar, ImGuiTabBarSection* sections)$/;"	f	typeref:typename:float	file:
TabBarCalcTabID	imgui/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* dock/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	imgui/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByOrder	imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByOrder(ImGuiTabBar* tab_bar, int order)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetCurrentTab	imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarGetCurrentTab(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetTabName	imgui/imgui_widgets.cpp	/^const char* ImGui::TabBarGetTabName(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:const char *
TabBarGetTabOrder	include/imgui/imgui_internal.h	/^    inline int              TabBarGetTabOrder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { return /;"	f	namespace:ImGui	typeref:typename:int
TabBarLayout	imgui/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarProcessReorder	imgui/imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueFocus	imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorder	imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* src_tab, ImVec2 m/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	imgui/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	imgui/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	imgui/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	include/imgui/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	include/imgui/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	imgui/imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	imgui/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(ImGuiWindow*)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemCalcSize	imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemGetSectionIdx	imgui/imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	imgui/imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	include/imgui/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appear on an /;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	include/imgui/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
TableBeginApplyRequests	imgui/imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	imgui/imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginContextMenuPopup	imgui/imgui_tables.cpp	/^bool ImGui::TableBeginContextMenuPopup(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:bool
TableBeginInitMemory	imgui/imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	imgui/imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawBorders	imgui/imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawContextMenu	imgui/imgui_tables.cpp	/^void ImGui::TableDrawContextMenu(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndCell	imgui/imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	imgui/imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	imgui/imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	imgui/imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	imgui/imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	imgui/imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	imgui/imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnCount	imgui/imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	imgui/imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	imgui/imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	imgui/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	imgui/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	imgui/imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	imgui/imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	imgui/imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	imgui/imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	imgui/imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	include/imgui/imgui_internal.h	/^    inline ImGuiTableInstanceData*  TableGetInstanceData(ImGuiTable* table, int instance_no) { i/;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetInstanceID	include/imgui/imgui_internal.h	/^    inline ImGuiID                  TableGetInstanceID(ImGuiTable* table, int instance_no)   { r/;"	f	namespace:ImGui	typeref:typename:ImGuiID
TableGetMaxColumnWidth	imgui/imgui_tables.cpp	/^float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableGetRowIndex	imgui/imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	imgui/imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	imgui/imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	imgui/imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	include/imgui/imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableInstanceID	include/imgui/imgui_internal.h	/^    ImGuiID                     TableInstanceID;$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:ImGuiID
TableLoadSettings	imgui/imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	imgui/imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	imgui/imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	imgui/imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	imgui/imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	imgui/imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	imgui/imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	imgui/imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	imgui/imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	imgui/imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	imgui/imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	imgui/imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	imgui/imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	imgui/imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	imgui/imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	imgui/imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	imgui/imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	imgui/imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	imgui/imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	imgui/imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	imgui/imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	imgui/imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	imgui/imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	imgui/imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	imgui/imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	imgui/imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	include/imgui/imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	include/imgui/imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	include/imgui/imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	include/imgui/imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	include/imgui/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	include/imgui/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	include/imgui/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	include/imgui/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TempBuffer	include/imgui/imgui_internal.h	/^    ImVector<ImVec2> TempBuffer;$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVector<ImVec2>
TempBuffer	include/imgui/imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	include/imgui/imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TempData	include/imgui/imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	include/imgui/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	include/imgui/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	imgui/imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	imgui/imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TestBit	include/imgui/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	include/imgui/imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	include/imgui/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	include/imgui/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TestKeyOwner	imgui/imgui.cpp	/^bool ImGui::TestKeyOwner(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TestShortcutRouting	imgui/imgui.cpp	/^bool ImGui::TestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TexDesiredWidth	include/imgui/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	include/imgui/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	include/imgui/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	include/imgui/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexImage2D	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLTEXIMAGE2DPROC               TexImage2D;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLTEXIMAGE2DPROC
TexParameteri	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLTEXPARAMETERIPROC            TexParameteri;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLTEXPARAMETERIPROC
TexPixelsAlpha8	include/imgui/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	include/imgui/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	include/imgui/imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	include/imgui/imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	include/imgui/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	include/imgui/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	include/imgui/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	include/imgui/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	include/imgui/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	include/imgui/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	imgui/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
Text	include/imgui/imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anon90583b0f020a	typeref:typename:ImGuiInputEventText
Text	include/imgui/imgui_internal.h	/^    const char*     Text;$/;"	m	struct:ImGuiLocEntry	typeref:typename:const char *
TextA	include/imgui/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextA	include/imgui/imgui_internal.h	/^    ImVector<char>     TextA;           \/\/ text buffer$/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImVector<char>
TextAIsValid	include/imgui/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	imgui/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	imgui/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	imgui/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	imgui/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	imgui/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	imgui/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	imgui/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	imgui/imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	imgui/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	imgui/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	include/imgui/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	include/imgui/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	include/imgui/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	imgui/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	imgui/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextureId	include/imgui/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	include/imgui/imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
Time	imgui/imgui_impl_glfw.cpp	/^    double                  Time;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:double	file:
Time	include/imgui/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	include/imgui/imgui_internal.h	/^    float       TitleBarHeight() const  { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	include/imgui/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	include/imgui/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	include/imgui/imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TotalIdxCount	include/imgui/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	include/imgui/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalWidth	include/imgui/imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
TouchExtraPadding	include/imgui/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	include/imgui/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	include/imgui/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	include/imgui/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeDepth	include/imgui/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	include/imgui/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	include/imgui/imgui_internal.h	/^    inline bool     TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags = 0)    { return/;"	f	namespace:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeSetOpen	imgui/imgui_widgets.cpp	/^void ImGui::TreeNodeSetOpen(ImGuiID id, bool open)$/;"	f	class:ImGui	typeref:typename:void
TreeNodeUpdateNextOpen	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeUpdateNextOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	imgui/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	imgui/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TryGetMapData	include/imgui/imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	imgui/imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Type	include/imgui/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	include/imgui/imgui_internal.h	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImGuiDataType
Type	include/imgui/imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	include/imgui/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	include/imgui/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
U	include/cubic.h	/^void Cubic::U() {$/;"	f	class:Cubic	typeref:typename:void
U0	include/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	include/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
URU_L_UR_U_L	shared.h	/^    const Operation URU_L_UR_U_L[] = {op_U,op_R,op_U_inv,op_L_inv,op_U,op_R_inv,op_U_inv,op_L};$/;"	v	typeref:typename:const Operation[]
UTILS_H	include/utils.h	/^#define UTILS_H$/;"	d
U_inv	include/cubic.h	/^void Cubic::U_inv() {$/;"	f	class:Cubic	typeref:typename:void
Uniform1i	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORM1IPROC                Uniform1i;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLUNIFORM1IPROC
UniformMatrix4fv	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORMMATRIX4FVPROC         UniformMatrix4fv;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
Unindent	imgui/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	imgui/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	imgui/imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateAliasKey	imgui/imgui.cpp	/^static void UpdateAliasKey(ImGuiKey key, bool v, float analog_value)$/;"	f	typeref:typename:void	file:
UpdateDebugToolItemPicker	imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker() {}$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	imgui/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries() {}$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	imgui/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	imgui/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	imgui/imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyRoutingTable	imgui/imgui.cpp	/^static void ImGui::UpdateKeyRoutingTable(ImGuiKeyRoutingTable* rt)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateKeyboardInputs	imgui/imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseInputs	imgui/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	imgui/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	imgui/imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateViewportsNewFrame	imgui/imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	imgui/imgui.cpp	/^static void UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWindowFlag/;"	f	typeref:typename:void	file:
UpdateWindowManualResize	imgui/imgui.cpp	/^static bool ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, in/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateWindowParentAndRootLinks	imgui/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	include/imgui/imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = C/;"	f	struct:ImGuiViewportP	typeref:typename:void
UseBufferSubData	imgui/imgui_impl_opengl3.cpp	/^    bool            UseBufferSubData;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
UseProgram	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLUSEPROGRAMPROC               UseProgram;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLUSEPROGRAMPROC
Used4kPagesMap	include/imgui/imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	include/imgui/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	include/imgui/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	include/imgui/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserData	include/imgui/imgui.h	/^    void*                       UserData;           \/\/ Store your own atlas related user-data /;"	m	struct:ImFontAtlas	typeref:typename:void *
UserData	include/imgui/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	include/imgui/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data.$/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	include/imgui/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	include/imgui/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	include/imgui/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserID	include/imgui/imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	include/imgui/imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	include/imgui/imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
V0	include/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	include/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VSliderFloat	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	include/imgui/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Value	include/imgui/imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Values	imgui/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	include/imgui/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VboHandle	imgui/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
VertexAttribPointer	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLVERTEXATTRIBPOINTERPROC      VertexAttribPointer;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
VertexBufferSize	imgui/imgui_impl_opengl3.cpp	/^    GLsizeiptr      VertexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
Viewport	include/imgui/imgui_impl_opengl3_loader.h	/^        PFNGLVIEWPORTPROC                 Viewport;$/;"	m	struct:GL3WProcs::__anon91aaf4b10108	typeref:typename:PFNGLVIEWPORTPROC
Viewport	include/imgui/imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
Viewports	include/imgui/imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (Size==1 i/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
Visible	include/imgui/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleMaskByIndex	include/imgui/imgui_internal.h	/^    ImBitArrayPtr               VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
VisibleTabId	include/imgui/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	include/imgui/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	include/imgui/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	include/imgui/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	include/imgui/imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
WHITE	shared.h	/^    #define WHITE /;"	d
WIDTH	shared.h	/^    const float WIDTH  = 800.f;$/;"	v	typeref:typename:const float
WIN32_LEAN_AND_MEAN	imgui/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	include/imgui/imgui_impl_opengl3_loader.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WINDOWS_HOVER_PADDING	imgui/imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	imgui/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 0.70f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WRT_Content	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_ContentIdeal	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_ContentRegionRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_Count	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_InnerClipRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_InnerRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_OuterRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_OuterRectClipped	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_WorkRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WantApply	include/imgui/imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	include/imgui/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	include/imgui/imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	include/imgui/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	include/imgui/imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	include/imgui/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseUnlessPopupClose	include/imgui/imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantClose	imgui/imgui_demo.cpp	/^    bool        WantClose;  \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantClose	include/imgui/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	include/imgui/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantDelete	include/imgui/imgui_internal.h	/^    bool        WantDelete;     \/\/ Set to invalidate\/delete the settings entry$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantLayout	include/imgui/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	include/imgui/imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	include/imgui/imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	include/imgui/imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	include/imgui/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantVisible	include/imgui/imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
WasActive	include/imgui/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelX	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	include/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingAxisAvg	include/imgui/imgui_internal.h	/^    ImVec2                  WheelingAxisAvg;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindow	include/imgui/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	include/imgui/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowReleaseTimer	include/imgui/imgui_internal.h	/^    float                   WheelingWindowReleaseTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
WheelingWindowStartFrame	include/imgui/imgui_internal.h	/^    int                     WheelingWindowStartFrame;           \/\/ This may be set one frame b/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowWheelRemainder	include/imgui/imgui_internal.h	/^    ImVec2                  WheelingWindowWheelRemainder;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Width	imgui/imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Width	include/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	include/imgui/imgui_internal.h	/^    float                       Width;          \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	include/imgui/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	include/imgui/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
WidthAllTabs	include/imgui/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	include/imgui/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	include/imgui/imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	include/imgui/imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	include/imgui/imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	include/imgui/imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	include/imgui/imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][Sup first time using imgui]$/;"	s
Window	imgui.ini	/^[Window][window]$/;"	s
Window	imgui/imgui_impl_glfw.cpp	/^    GLFWwindow*             Window;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
Window	include/imgui/imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
Window	include/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	include/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
WindowBorderSize	include/imgui/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	include/imgui/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowComparerByBeginOrder	imgui/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	include/imgui/imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowMenuButtonPosition	include/imgui/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	include/imgui/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	include/imgui/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	include/imgui/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowRectAbsToRel	include/imgui/imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	include/imgui/imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRounding	include/imgui/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	include/imgui/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	imgui/imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	imgui/imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	imgui/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	imgui/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	imgui/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	include/imgui/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	include/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	include/imgui/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	include/imgui/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	include/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	include/imgui/imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	include/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	include/imgui/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	include/imgui/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	include/imgui/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WorkMaxX	include/imgui/imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	include/imgui/imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkOffsetMax	include/imgui/imgui_internal.h	/^    ImVec2              WorkOffsetMax;          \/\/ Work Area: Offset from Pos+Size to bottom-r/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkOffsetMin	include/imgui/imgui_internal.h	/^    ImVec2              WorkOffsetMin;          \/\/ Work Area: Offset from Pos to top-left corn/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkPos	include/imgui/imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkRect	include/imgui/imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	include/imgui/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WorkSize	include/imgui/imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WriteAccessed	include/imgui/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	include/imgui/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	include/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	include/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	include/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	include/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	include/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	include/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
YCoCg2rgb	include/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCg2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
YCoCgR2rgb	include/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
YCoCgR2rgb	include/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
YELLOW	shared.h	/^    #define YELLOW /;"	d
_CRT_SECURE_NO_WARNINGS	imgui/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	imgui/imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_Channels	include/imgui/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	imgui/imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	include/imgui/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	include/imgui/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	include/imgui/imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	include/imgui/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	include/imgui/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	include/imgui/imgui.h	/^    ImDrawListSharedData*   _Data;              \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSharedData *
_FringeScale	include/imgui/imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_GLAD_IS_SOME_NEW_VERSION	glad.c	/^#define _GLAD_IS_SOME_NEW_VERSION /;"	d	file:
_IdxBuffer	include/imgui/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	include/imgui/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OnChangedClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	include/imgui/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	include/imgui/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PathArcToFastEx	imgui/imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	imgui/imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	imgui/imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_ResetForNewFrame	imgui/imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	include/imgui/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	include/imgui/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_TryMergeDrawCmds	imgui/imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
_UnusedPadding	include/imgui/imgui.h	/^    void*       _UnusedPadding;                                     \/\/ Unused field to keep da/;"	m	struct:ImGuiIO	typeref:typename:void *
_VtxCurrentIdx	include/imgui/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	include/imgui/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__STB_INCLUDE_STB_TRUETYPE_H__	include/imgui/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon010b98f3010a	include/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anon0d6bcc420108	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u3u3u2	file:
__anon0d6bcc420208	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u4u4	file:
__anon0d6bcc420308	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u4u4u4u4	file:
__anon0d6bcc420408	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u5u6u5	file:
__anon0d6bcc420508	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u5u5u5u1	file:
__anon0d6bcc420608	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u10u10u10u2	file:
__anon0d6bcc420708	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::i10i10i10i2	file:
__anon0d6bcc420808	include/glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u9u9u9e5	file:
__anon11768d450108	include/shader.h	/^typedef struct {$/;"	s
__anon454b37a60102	include/glm/detail/func_matrix_simd.inl	/^		auto MulRow = [&](int l) {$/;"	f	function:glm::operator *	file:
__anon6218a5cf010a	include/glm/detail/type_vec1.hpp	/^			{$/;"	u	struct:glm::vec
__anon6218a5cf020a	include/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::vec
__anon622abe50010a	include/glm/detail/type_vec2.hpp	/^			{$/;"	u	struct:glm::vec
__anon622abe500208	include/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	s	union:glm::vec::__anon622abe50010a
__anon622abe500308	include/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	s	union:glm::vec::__anon622abe50010a
__anon622abe500408	include/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	s	union:glm::vec::__anon622abe50010a
__anon622abe50050a	include/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::vec
__anon622abe50060a	include/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	u	struct:glm::vec
__anon623cd6d1010a	include/glm/detail/type_vec3.hpp	/^			{$/;"	u	struct:glm::vec
__anon623cd6d10208	include/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	s	union:glm::vec::__anon623cd6d1010a
__anon623cd6d10308	include/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	s	union:glm::vec::__anon623cd6d1010a
__anon623cd6d10408	include/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	s	union:glm::vec::__anon623cd6d1010a
__anon623cd6d1050a	include/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::vec
__anon623cd6d1060a	include/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::vec
__anon623cd6d1070a	include/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::vec
__anon624eef52010a	include/glm/detail/type_vec4.hpp	/^			{$/;"	u	struct:glm::vec
__anon624eef520208	include/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	s	union:glm::vec::__anon624eef52010a
__anon624eef520308	include/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	s	union:glm::vec::__anon624eef52010a
__anon624eef520408	include/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	s	union:glm::vec::__anon624eef52010a
__anon624eef52050a	include/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::vec
__anon624eef52060a	include/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::vec
__anon624eef52070a	include/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::vec
__anon624eef52080a	include/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	u	struct:glm::vec
__anon6c3ce53e010a	include/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anon6c3ce53e020a	include/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anon6c3ce53e0308	include/glm/ext/scalar_ulp.inl	/^	{$/;"	s	union:__anon6c3ce53e020a	file:
__anon7a3922c2010a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm2x16	file:
__anon7a3922c2020a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm2x16	file:
__anon7a3922c2030a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm2x16	file:
__anon7a3922c2040a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm2x16	file:
__anon7a3922c2050a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm4x8	file:
__anon7a3922c2060a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm4x8	file:
__anon7a3922c2070a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm4x8	file:
__anon7a3922c2080a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm4x8	file:
__anon7a3922c2090a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packDouble2x32	file:
__anon7a3922c20a0a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackDouble2x32	file:
__anon7a3922c20b0a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packHalf2x16	file:
__anon7a3922c20c0a	include/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackHalf2x16	file:
__anon8a0969a30103	include/imgui/imstb_rectpack.h	/^{$/;"	g
__anon8a0969a30203	include/imgui/imstb_rectpack.h	/^{$/;"	g
__anon8a0969a30308	include/imgui/imstb_rectpack.h	/^{$/;"	s
__anon8c7f770e010a	include/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToInt	file:
__anon8c7f770e020a	include/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToUint	file:
__anon8c7f770e030a	include/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::intBitsToFloat	file:
__anon8c7f770e040a	include/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::uintBitsToFloat	file:
__anon90583b0f010a	include/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anon90583b0f020a	include/imgui/imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__anon91aaf4b10108	include/imgui/imgui_impl_opengl3_loader.h	/^    struct {$/;"	s	union:GL3WProcs
__anon91aaf4b10208	include/imgui/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	s
__anon948561fb010a	include/glm/detail/type_quat.hpp	/^			{$/;"	u	struct:glm::qua
__anon948561fb0208	include/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	s	union:glm::qua::__anon948561fb010a
__anona175a7780108	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780208	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780308	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780408	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780508	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780603	include/imgui/imstb_truetype.h	/^   enum {$/;"	g
__anona175a7780708	include/imgui/imstb_truetype.h	/^   {$/;"	s
__anona175a7780808	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7780903	include/imgui/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anona175a7780a03	include/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anona175a7780b03	include/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anona175a7780c03	include/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anona175a7780d03	include/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anona175a7780e03	include/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anona175a7780f08	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7781008	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7781108	include/imgui/imstb_truetype.h	/^{$/;"	s
__anona175a7781208	include/imgui/imstb_truetype.h	/^{$/;"	s
__anonda15fd810108	include/imgui/imstb_textedit.h	/^{$/;"	s
__anonda15fd810208	include/imgui/imstb_textedit.h	/^{$/;"	s
__anonda15fd810308	include/imgui/imstb_textedit.h	/^{$/;"	s
__anonda15fd810408	include/imgui/imstb_textedit.h	/^{$/;"	s
__anonda15fd810508	include/imgui/imstb_textedit.h	/^{$/;"	s
__anone28545ff0111	imgui/imgui_demo.cpp	/^{$/;"	n	file:
__anonfb6a37db0103	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anonfb6a37db0203	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__gl3w_h_	include/imgui/imgui_impl_opengl3_loader.h	/^#define __gl3w_h_$/;"	d
__gl_glcorearb_h_	include/imgui/imgui_impl_opengl3_loader.h	/^#define __gl_glcorearb_h_ /;"	d
__gl_h_	include/glad/glad.h	/^#define __gl_h_$/;"	d
__gl_h_	include/imgui/imgui_impl_opengl3_loader.h	/^#define __gl_h_$/;"	d
__glad_h_	include/glad/glad.h	/^#define __glad_h_$/;"	d
__has_include	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__has_include	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
_apply_op	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(vec<N, T, Q> const& that, const U& op)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
_buffer	include/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	typeref:typename:char[1]
_grow_capacity	include/imgui/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_swizzle	include/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 ==/;"	s	namespace:glm::detail
_swizzle_base0	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<2, T, Q, E0,E1,-1,-2, Aligned> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail
_swizzle_base1	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<3, T, Q, E0,E1,E2,-1, Aligned> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail
_swizzle_base1	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<4, T, Q, E0,E1,E2,E3, Aligned> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail
_swizzle_base1	include/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, float, Q, E0,E1,E2,E3, true> : public _swizzle_base0<float, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	include/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, int, Q, E0,E1,E2,E3, true> : public _swizzle_base0<int, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	include/glm/detail/type_vec4_simd.inl	/^	struct _swizzle_base1<4, uint, Q, E0,E1,E2,E3, true> : public _swizzle_base0<uint, 4>$/;"	s	namespace:glm::detail	file:
_swizzle_base2	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, detail::is_aligned<Q>::valu/;"	s	namespace:glm::detail
_swizzle_base2	include/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<N, T, Q, E0,E1,E2,E3, 1> : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, de/;"	s	namespace:glm::detail
a	include/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520308	typeref:typename:T
a	include/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon624eef52080a	typeref:typename:T
abs	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType abs(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
abs	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR int abs(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR int
abs	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> abs(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
acos	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acosh	include/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType acosh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acosh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acot	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acot(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acot	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acoth	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acoth(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acoth	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acoth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsc	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsc	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsch	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsch(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsch	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
activate	include/shader.h	/^		void activate() {$/;"	f	class:Shader	typeref:typename:void
activate_doing_ops	include/cubic.h	/^void Cubic::activate_doing_ops(std::vector<Operation> ops) {$/;"	f	class:Cubic	typeref:typename:void
activate_random_shuffel_mode	include/cubic.h	/^void Cubic::activate_random_shuffel_mode() {$/;"	f	class:Cubic	typeref:typename:void
active_head	include/imgui/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
adjugate	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> adjugate(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
adjugate	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> adjugate(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
adjugate	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> adjugate(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
advance	include/imgui/imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
affineInverse	include/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> affineInverse(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
affineInverse	include/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> affineInverse(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
after_anim	include/cubic.h	/^void Cubic::after_anim() {$/;"	f	class:Cubic	typeref:typename:void
algorithm	.vscode/settings.json	/^        "algorithm": "cpp",$/;"	s	object:files.associations
align	include/imgui/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
aligned	include/glm/detail/qualifier.hpp	/^			aligned = aligned_highp, \/\/\/< By default aligned qualifier is also high precision$/;"	e	enum:glm::qualifier
aligned_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec1
aligned_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec1
aligned_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec1		aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec1
aligned_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec2
aligned_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec2
aligned_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec2		aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec2
aligned_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec3
aligned_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec3
aligned_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec3		aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec3
aligned_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec4
aligned_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec4
aligned_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec4		aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec4
aligned_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2
aligned_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2
aligned_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2		aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2
aligned_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x2
aligned_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x2
aligned_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x2
aligned_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x3
aligned_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x3
aligned_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x3
aligned_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x4
aligned_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x4
aligned_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x4
aligned_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3
aligned_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3
aligned_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3		aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3
aligned_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x2
aligned_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x2
aligned_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x2
aligned_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x3
aligned_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x3
aligned_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x3
aligned_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x4
aligned_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x4
aligned_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x4
aligned_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4
aligned_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4
aligned_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4		aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4
aligned_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x2
aligned_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x2
aligned_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x2
aligned_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x3
aligned_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x3
aligned_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x3
aligned_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x4
aligned_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x4
aligned_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x4
aligned_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec1
aligned_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec1
aligned_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec1		aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec1
aligned_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec2
aligned_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec2
aligned_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec2		aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec2
aligned_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec3
aligned_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec3
aligned_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec3		aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec3
aligned_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec4
aligned_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec4
aligned_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec4		aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec4
aligned_highp	include/glm/detail/qualifier.hpp	/^			aligned_highp, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and operat/;"	e	enum:glm::qualifier
aligned_highp_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_highp>		aligned_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_highp>
aligned_highp_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_highp>		aligned_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_highp>
aligned_highp_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_highp>		aligned_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_highp>
aligned_highp_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_highp>		aligned_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_highp>
aligned_highp_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_highp>	aligned_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_highp>
aligned_highp_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_highp>	aligned_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_highp>
aligned_highp_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_highp>	aligned_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_highp>
aligned_highp_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_highp>	aligned_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_highp>
aligned_highp_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_highp>	aligned_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_highp>
aligned_highp_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_highp>	aligned_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_highp>
aligned_highp_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_highp>	aligned_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_highp>
aligned_highp_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_highp>	aligned_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_highp>
aligned_highp_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_highp>	aligned_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_highp>
aligned_highp_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_highp>	aligned_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_highp>
aligned_highp_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_highp>		aligned_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_highp>
aligned_highp_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_highp>		aligned_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_highp>
aligned_highp_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_highp>		aligned_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_highp>
aligned_highp_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_highp>		aligned_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_highp>
aligned_highp_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_highp>		aligned_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_highp>
aligned_highp_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_highp>		aligned_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_highp>
aligned_highp_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_highp>		aligned_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_highp>
aligned_highp_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_highp>		aligned_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_highp>
aligned_highp_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_highp>		aligned_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_highp>
aligned_highp_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_highp>		aligned_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_highp>
aligned_highp_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_highp>		aligned_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_highp>
aligned_highp_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_highp>		aligned_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_highp>
aligned_highp_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_highp>		aligned_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_highp>
aligned_highp_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_highp>		aligned_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_highp>
aligned_highp_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_highp>	aligned_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_highp>
aligned_highp_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_highp>	aligned_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_highp>
aligned_highp_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_highp>	aligned_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_highp>
aligned_highp_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_highp>	aligned_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_highp>
aligned_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec1
aligned_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec1
aligned_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec1		aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec1
aligned_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec2
aligned_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec2
aligned_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec2		aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec2
aligned_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec3
aligned_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec3
aligned_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec3		aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec3
aligned_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec4
aligned_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec4
aligned_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec4		aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec4
aligned_lowp	include/glm/detail/qualifier.hpp	/^			aligned_lowp, \/\/ \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and op/;"	e	enum:glm::qualifier
aligned_lowp_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_lowp>		aligned_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_lowp>
aligned_lowp_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_lowp>		aligned_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_lowp>
aligned_lowp_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_lowp>		aligned_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_lowp>
aligned_lowp_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_lowp>		aligned_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_lowp>
aligned_lowp_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_lowp>		aligned_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_lowp>
aligned_lowp_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_lowp>		aligned_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_lowp>
aligned_lowp_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_lowp>		aligned_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_lowp>
aligned_lowp_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_lowp>		aligned_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_lowp>
aligned_lowp_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_lowp>		aligned_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_lowp>
aligned_lowp_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_lowp>		aligned_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_lowp>
aligned_lowp_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_lowp>	aligned_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_lowp>
aligned_lowp_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_lowp>	aligned_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_lowp>
aligned_lowp_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_lowp>	aligned_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_lowp>
aligned_lowp_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_lowp>	aligned_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_lowp>
aligned_lowp_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_lowp>		aligned_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_lowp>
aligned_lowp_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_lowp>		aligned_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_lowp>
aligned_lowp_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_lowp>		aligned_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_lowp>
aligned_lowp_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_lowp>		aligned_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_lowp>
aligned_lowp_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_lowp>		aligned_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_lowp>
aligned_lowp_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_lowp>		aligned_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_lowp>
aligned_lowp_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_lowp>		aligned_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_lowp>
aligned_lowp_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_lowp>		aligned_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_lowp>
aligned_lowp_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_lowp>		aligned_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_lowp>
aligned_lowp_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_lowp>		aligned_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_lowp>
aligned_lowp_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_lowp>		aligned_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_lowp>
aligned_lowp_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_lowp>		aligned_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_lowp>
aligned_lowp_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_lowp>		aligned_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_lowp>
aligned_lowp_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_lowp>		aligned_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_lowp>
aligned_lowp_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_lowp>		aligned_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_lowp>
aligned_lowp_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_lowp>		aligned_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_lowp>
aligned_lowp_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_lowp>		aligned_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_lowp>
aligned_lowp_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_lowp>		aligned_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_lowp>
aligned_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2
aligned_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2
aligned_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2		aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2
aligned_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x2
aligned_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x2			aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x2
aligned_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x2
aligned_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x3
aligned_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x3			aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x3
aligned_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x3
aligned_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x4
aligned_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x4			aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x4
aligned_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x4
aligned_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3
aligned_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3
aligned_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3		aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3
aligned_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x2
aligned_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x2			aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x2
aligned_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x2
aligned_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x3
aligned_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x3			aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x3
aligned_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x3
aligned_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x4
aligned_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x4			aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x4
aligned_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x4
aligned_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4
aligned_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4
aligned_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4		aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4
aligned_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x2
aligned_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x2			aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x2
aligned_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x2
aligned_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x3
aligned_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x3			aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x3
aligned_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x3
aligned_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x4
aligned_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x4			aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x4
aligned_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x4
aligned_mediump	include/glm/detail/qualifier.hpp	/^			aligned_mediump, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and oper/;"	e	enum:glm::qualifier
aligned_mediump_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_mediump>	aligned_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_mediump>
aligned_mediump_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_mediump>	aligned_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_mediump>
aligned_mediump_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_mediump>	aligned_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_mediump>
aligned_mediump_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_mediump>	aligned_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_mediump>
aligned_mediump_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_mediump>	aligned_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_mediump>
aligned_mediump_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_mediump>	aligned_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_mediump>
aligned_mediump_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_mediump>	aligned_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_mediump>
aligned_mediump_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_mediump>	aligned_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_mediump>
aligned_mediump_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_mediump>	aligned_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_mediump>
aligned_mediump_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_mediump>	aligned_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_mediump>
aligned_mediump_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_mediump>	aligned_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_mediump>
aligned_mediump_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_mediump>	aligned_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_mediump>
aligned_mediump_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_mediump>	aligned_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_mediump>
aligned_mediump_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_mediump>	aligned_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_mediump>
aligned_mediump_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_mediump>	aligned_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_mediump>
aligned_mediump_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_mediump>	aligned_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_mediump>
aligned_mediump_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_mediump>	aligned_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_mediump>
aligned_mediump_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_mediump>	aligned_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_mediump>
aligned_mediump_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_mediump>	aligned_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_mediump>
aligned_mediump_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_mediump>	aligned_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_mediump>
aligned_mediump_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_mediump>	aligned_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_mediump>
aligned_mediump_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_mediump>	aligned_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_mediump>
aligned_mediump_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_mediump>	aligned_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_mediump>
aligned_mediump_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_mediump>	aligned_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_mediump>
aligned_mediump_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_mediump>	aligned_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_mediump>
aligned_mediump_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_mediump>	aligned_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_mediump>
aligned_mediump_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_mediump>	aligned_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_mediump>
aligned_mediump_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_mediump>	aligned_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_mediump>
aligned_mediump_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_mediump>	aligned_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_mediump>
aligned_mediump_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_mediump>	aligned_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_mediump>
aligned_mediump_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_mediump>	aligned_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_mediump>
aligned_mediump_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_mediump>	aligned_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_mediump>
aligned_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec1
aligned_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec1
aligned_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec1		aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec1
aligned_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec2
aligned_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec2
aligned_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec2		aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec2
aligned_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec3
aligned_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec3
aligned_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec3		aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec3
aligned_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec4
aligned_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec4
aligned_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec4		aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec4
aligned_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec1
aligned_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec1
aligned_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec1		aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec1
aligned_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec2
aligned_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec2
aligned_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec2		aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec2
aligned_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec3
aligned_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec3
aligned_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec3		aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec3
aligned_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec4 			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec4
aligned_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec4			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec4
aligned_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec4		aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec4
all	Makefile	/^all: cmake_check_build_system$/;"	t
all	cmake-build/Makefile	/^all: cmake_check_build_system$/;"	t
all	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool all(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
all	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool all$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
alloc_chunk	include/imgui/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
angle	include/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER T angle(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	include/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T angle(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	include/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER genType angle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
angleAxis	include/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
animate	include/cubic.h	/^    bool animate = false;$/;"	m	class:Cubic	typeref:typename:bool
any	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool any(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
any	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool any$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
append	imgui/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
append	imgui/imgui.cpp	/^void ImGuiTextIndex::append(const char* base, int old_size, int new_size)$/;"	f	class:ImGuiTextIndex	typeref:typename:void
appendf	imgui/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	imgui/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
apply_order	include/cubic.h	/^void Cubic::apply_order(std::pair<std::vector<int>,std::vector<Cube>> output) {$/;"	f	class:Cubic	typeref:typename:void
areCollinear	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areCollinear(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& e/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthogonal	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthogonal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthonormal	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthonormal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
array	.vscode/settings.json	/^        "array": "cpp",$/;"	s	object:files.associations
array_of_unicode_codepoints	include/imgui/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anona175a7780508	typeref:typename:int *
asec	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asec(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asec	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asech	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asech(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asech	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asin	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asinh	include/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType asinh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asinh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
associatedMax	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<2, U, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,U,Q>
associatedMax	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, T, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
associatedMax	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
associatedMin	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<2, U, Q> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,U,Q>
associatedMin	include/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
atan	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER genType atan(genType y, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atan	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan2	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}					/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
atan2	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> atan2(const vec<2, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
atan2	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> atan2(const vec<3, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
atan2	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> atan2(const vec<4, T, Q>& x, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
atanh	include/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType atanh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atanh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
axis	include/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> axis(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
axisAngle	include/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER void axisAngle(mat<4, 4, T, Q> const& m, vec<3, T, Q> & axis, T& angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
axisAngleMatrix	include/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> axisAngleMatrix(vec<3, T, Q> const& axis, T const angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
b	include/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10308	typeref:typename:T
b	include/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon623cd6d1070a	typeref:typename:T
b	include/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520308	typeref:typename:T
b	include/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon624eef52070a	typeref:typename:T
b	include/imgui/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
bSolver	main.cpp	/^static BasicSolver bSolver;$/;"	v	typeref:typename:BasicSolver	file:
back	include/imgui/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	include/imgui/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
backEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ballRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> ballRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
base_type	include/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 /;"	t	struct:glm::detail::_swizzle
baseline_y_delta	include/imgui/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anonda15fd810408	typeref:typename:float
basic_format_saver	include/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_format_saver	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_format_saver<CTy, CTr>::basic_format_saver(std::basic_ios<CTy, CTr>& a/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
basic_state_saver	include/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
basic_state_saver	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::basic_state_saver(std::basic_ios<CTy, CTr>& a)$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
begin	include/glm/gtx/range.hpp	/^	inline typename genType::value_type * begin(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
begin	include/glm/gtx/range.hpp	/^	inline typename genType::value_type const * begin(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
begin	include/imgui/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	include/imgui/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	include/imgui/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	include/imgui/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	include/imgui/imgui_internal.h	/^    inline T*           begin()                     { return Data; }$/;"	f	struct:ImSpan	typeref:typename:T *
begin	include/imgui/imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
bitCount	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int bitCount(genIUType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> bitCount(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
bitCount	include/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(detail::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	include/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitfieldDeinterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u16vec2 bitfieldDeinterleave(glm::uint32 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u16vec2
bitfieldDeinterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u32vec2 bitfieldDeinterleave(glm::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u32vec2
bitfieldDeinterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER u8vec2 bitfieldDeinterleave(glm::uint16 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
bitfieldExtract	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldExtract	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldExtract(vec<L, T, Q> const& Value, int Offset, int Bits/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillOne	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillOne(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillOne	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillOne(vec<L, T, Q> const& Value, int FirstBit, int Bi/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillZero	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillZero(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillZero	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillZero(vec<L, T, Q> const& Value, int FirstBit, int B/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInsert	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldInsert(genIUType const& Base, genIUType const& Insert, int/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldInsert	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldInsert(vec<L, T, Q> const& Base, vec<L, T, Q> const& In/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 bitfieldInterleave(glm::uint8 x, glm::uint8 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint16 x, glm::uint16 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z, glm/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z, /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y, glm::uint32 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int16 bitfieldInterleave(int8 x, int8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int16 x, int16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z, int8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z, int16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y, int32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(uint8 x, uint8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint16 x, uint16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z, uint8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u32vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z, uint16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y, uint32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldReverse	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldReverse(genIUType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldReverse	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldReverse(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateLeft	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateLeft(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateLeft	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateLeft(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateRight	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateRight(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateRight	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateRight(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bool1	include/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatib/;"	t	namespace:glm	typeref:typename:bool
bool1x1	include/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_c/;"	t	namespace:glm	typeref:typename:bool
bool2	include/glm/gtx/compatibility.hpp	/^	typedef vec<2, bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
bool2x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<2,2,bool,highp>
bool2x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<2,3,bool,highp>
bool2x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<2,4,bool,highp>
bool3	include/glm/gtx/compatibility.hpp	/^	typedef vec<3, bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
bool3x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<3,2,bool,highp>
bool3x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<3,3,bool,highp>
bool3x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<3,4,bool,highp>
bool4	include/glm/gtx/compatibility.hpp	/^	typedef vec<4, bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
bool4x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<4,2,bool,highp>
bool4x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<4,3,bool,highp>
bool4x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<4,4,bool,highp>
bool_type	include/glm/detail/type_vec1.hpp	/^		typedef vec<1, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,bool,Q>
bool_type	include/glm/detail/type_vec2.hpp	/^		typedef vec<2, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,bool,Q>
bool_type	include/glm/detail/type_vec3.hpp	/^		typedef vec<3, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,bool,Q>
bool_type	include/glm/detail/type_vec4.hpp	/^		typedef vec<4, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,bool,Q>
bottom_y	include/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anona175a7781108	typeref:typename:int
bounceEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounds	include/imgui/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anona175a7780f08	typeref:typename:int
bss_	include/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	typeref:typename:basic_state_saver<CTy> const
bvec1	include/glm/ext/vector_bool1.hpp	/^	typedef vec<1, bool, defaultp>		bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec1	include/glm/fwd.hpp	/^	typedef vec<1, bool, defaultp>	bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec2	include/glm/ext/vector_bool2.hpp	/^	typedef vec<2, bool, defaultp>		bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec2	include/glm/fwd.hpp	/^	typedef vec<2, bool, defaultp>	bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec3	include/glm/ext/vector_bool3.hpp	/^	typedef vec<3, bool, defaultp>		bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec3	include/glm/fwd.hpp	/^	typedef vec<3, bool, defaultp>	bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec4	include/glm/ext/vector_bool4.hpp	/^	typedef vec<4, bool, defaultp>		bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
bvec4	include/glm/fwd.hpp	/^	typedef vec<4, bool, defaultp>	bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
byte	include/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm	typeref:typename:detail::uint8
c_str	include/imgui/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, R, Q> call(R (*Func) (T x), vec<1, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,R,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, R, Q> call(R (*Func) (T x), vec<2, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,R,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, R, Q> call(R (*Func) (T x), vec<3, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,R,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, R, Q> call(R (*Func) (T x), vec<4, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,R,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, vec<1/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, int, Q> call(int (*Func) (T x, int y), vec<1, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<1,int,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, vec<2/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, int, Q> call(int (*Func) (T x, int y), vec<2, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<2,int,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, vec<3/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, int, Q> call(int (*Func) (T x, int y), vec<3, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<3,int,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, vec<4/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	include/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(int (*Func) (T x, int y), vec<4, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>
call	include/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static float call(float x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR float
call	include/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genFIType call(genFIType x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
call	include/glm/detail/compute_vector_relational.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(T a, T b)$/;"	f	struct:glm::detail::compute_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, U const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, bool const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_step_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edg/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sign	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_trunc	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal,/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U co/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec</;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& edge0, vec<4, float, Q/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& x, vec<4, int, Q> const& m/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	include/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& x, vec<4, uint, Q> const/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	include/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, lowp> call(vec<L, float, lowp> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,lowp>	file:
call	include/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& /;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,aligned_lowp>	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<1, T, Q> const& a, vec<1, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<2, T, Q> const& a, vec<2, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T et/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec</;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& p0, vec<4, float, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& x, vec<4, float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<3, float, Q> const& a, vec<3, float, Q> co/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& N, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	include/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	include/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T Shift)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	include/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	include/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 3, T, Q> call(mat<3, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 4, T, Q> call(mat<4, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 2, T, Q> call(mat<2, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 4, T, Q> call(mat<4, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 2, T, Q> call(mat<2, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 3, T, Q> call(mat<3, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	include/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>	file:
call	include/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	include/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	include/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	include/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& x, mat<4, 4, flo/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(qua<T, Q> const& a, qua<T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, T s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, T s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(qua<T, Q> const& q, vec<4, T, Q> con/;"	f	struct:glm::detail::compute_quat_mul_vec4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<double,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<double,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<double,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<double,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<float,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<float,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<float,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<float,Q>	file:
call	include/glm/detail/type_quat_simd.inl	/^		static vec<4, float, Q> call(qua<float, Q> const& q, vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_quat_mul_vec4	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& /;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& /;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_and	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_mod	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_or	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_shift_left	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_shift_right	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> /;"	f	struct:glm::detail::compute_vec4_xor	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	f	struct:glm::detail::compute_vec4_bitwise_not	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,int,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,uint,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_equal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec4_nequal	typeref:typename:bool	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_and	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_or	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_shift_left	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_shift_right	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_xor	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	f	struct:glm::detail::compute_vec4_bitwise_not	typeref:typename:vec<4,T,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,double,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,double,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,double,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,double,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_add	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,float,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& a, vec<4, float, al/;"	f	struct:glm::detail::compute_vec4_div	typeref:typename:vec<4,float,aligned_lowp>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, int, Q> call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,int,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, int, Q> call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,int,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, uint, Q> call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_mul	typeref:typename:vec<4,uint,Q>	file:
call	include/glm/detail/type_vec4_simd.inl	/^		static vec<4, uint, Q> call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	f	struct:glm::detail::compute_vec4_sub	typeref:typename:vec<4,uint,Q>	file:
call	include/glm/ext/quaternion_common_simd.inl	/^		static GLM_FUNC_QUALIFIER float call(qua<float, Q> const& x, qua<float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	include/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_ceilMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	include/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_floorMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	include/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Shift)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceilPowerOfTwo	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	include/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	include/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtc/integer.inl	/^			GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	include/glm/gtc/integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint8,P>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint8,P>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint8,P>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint8,P>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& Min, vec<L, double, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& Min, vec<L, float, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int16, Q> call(vec<L, int16, Q> const& Min, vec<L, int16, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int16,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int32, Q> call(vec<L, int32, Q> const& Min, vec<L, int32, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int32,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int64, Q> call(vec<L, int64, Q> const& Min, vec<L, int64, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int8, Q> call(vec<L, int8, Q> const& Min, vec<L, int8, Q> con/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int8,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, long double, Q> call(vec<L, long double, Q> const& Min, vec<L/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,long double,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call(vec<L, uint16, Q> const& Min, vec<L, uint16, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call(vec<L, uint32, Q> const& Min, vec<L, uint32, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call(vec<L, uint64, Q> const& Min, vec<L, uint64, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	include/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint8, Q> call(vec<L, uint8, Q> const& Min, vec<L, uint8, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint8,Q>	file:
call	include/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_roundMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	include/glm/gtx/common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_fmod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, floatType, Q> const& v)$/;"	f	struct:glm::detail::compute_compScale	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	include/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, floatType, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_compNormalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>	file:
call	include/glm/gtx/exterior_product.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<2, T, Q> const& v, vec<2, T, Q> const& u)$/;"	f	struct:glm::detail::compute_cross_vec2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/gtx/norm.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(qua<T, Q> const& q)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tdualquat<T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<1, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<1, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<2, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<3, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<4, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<2, T, Q> const& v0, vec<2, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<3, T, Q> const& v0, vec<3, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<4, T, Q> const& v0, vec<4, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<2, bool, Q> call(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<3, bool, Q> call(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>	file:
call	include/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<4, bool, Q> call(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>	file:
capacity	include/imgui/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cast	include/glm/gtx/string_cast.inl	/^	struct cast$/;"	s	namespace:glm::detail	file:
cast	include/glm/gtx/string_cast.inl	/^	struct cast<float>$/;"	s	namespace:glm::detail	file:
catmullRom	include/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType catmullRom$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceil	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceil(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
center	include/cubic.h	/^    glm::vec3 center = glm::vec3(0);$/;"	m	class:Cubic	typeref:typename:glm::vec3
cff	include/imgui/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	include/imgui/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anonda15fd810108	typeref:typename:int
char_type	include/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	typeref:typename:CTy
char_type	include/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:state_type::char_type
chardata_for_range	include/imgui/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anona175a7780508	typeref:typename:stbtt_packedchar *
charstrings	include/imgui/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
check_compile_error	include/shader.h	/^		int check_compile_error(uint32_t id, char* text) {$/;"	f	class:Shader	typeref:typename:int
chunk_size	include/imgui/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
circularEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> circularRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
clamp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType clamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
clamp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType clamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
clamp	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> clamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
clean	Makefile	/^clean:$/;"	t
clean	cmake-build/Makefile	/^clean:$/;"	t
clean	include/cube.h	/^void Cube::clean() {$/;"	f	class:Cube	typeref:typename:void
clean	include/cubic.h	/^void Cubic::clean() {$/;"	f	class:Cubic	typeref:typename:void
clean	include/rectangle.h	/^void Rectangle::clean() {$/;"	f	class:Rectangle	typeref:typename:void
clean/fast	Makefile	/^clean\/fast: clean$/;"	t
clean/fast	cmake-build/Makefile	/^clean\/fast: clean$/;"	t
clean_imGUI	main.cpp	/^void clean_imGUI() {$/;"	f	typeref:typename:void
clear	include/imgui/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	include/imgui/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	include/imgui/imgui_internal.h	/^    void            clear()                                 { LineOffsets.clear(); EndOffset = 0/;"	f	struct:ImGuiTextIndex	typeref:typename:void
clear	include/imgui/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clear_delete	include/imgui/imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	include/imgui/imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
closeBounded	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> closeBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
close_gl	glad.c	/^void close_gl(void) {$/;"	f	typeref:typename:void	file:
close_libgl	include/imgui/imgui_impl_opengl3_loader.h	/^static void close_libgl(void) { FreeLibrary(libgl); }$/;"	f	typeref:typename:void
closestPointOnLine	include/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
closestPointOnLine	include/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cmake_check_build_system	Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	cmake-build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	Makefile	/^cmake_force:$/;"	t
cmake_force	cmake-build/Makefile	/^cmake_force:$/;"	t
col	include/imgui/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colMajor2	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> colMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
colMajor3	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> colMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
colMajor4	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> colMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
col_type	include/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	include/glm/detail/type_mat2x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	include/glm/detail/type_mat2x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	include/glm/detail/type_mat3x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	include/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	include/glm/detail/type_mat3x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	include/glm/detail/type_mat4x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	include/glm/detail/type_mat4x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	include/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
color_exist	cubic_utils.h	/^int color_exist(std::vector<std::vector<float>> colors, float color[]){$/;"	f	typeref:typename:int
colors	include/cube.h	/^    std::vector<std::vector<float>> colors;$/;"	m	class:Cube	typeref:typename:std::vector<std::vector<float>>
colors	include/cubic.h	/^    std::vector<std::vector<std::vector<float>>> colors = { $/;"	m	class:Cubic	typeref:typename:std::vector<std::vector<std::vector<float>>>
colorsChanged	include/cube.h	/^    bool colorsChanged = false;$/;"	m	class:Cube	typeref:typename:bool
cols	include/glm/gtx/type_trait.hpp	/^		static length_t const cols = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
cols	include/glm/gtx/type_trait.hpp	/^		static length_t const cols = C;$/;"	m	struct:glm::type	typeref:typename:length_t const
cols	include/glm/gtx/type_trait.inl	/^	length_t const type<T>::cols;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
cols	include/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::cols;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
column	include/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
column	include/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::col_type column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::col_type
column_major	include/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
combine	include/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> combine($/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:0
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:2
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:3
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:4
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:5
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:6
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:7
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:8
command	cmake-build/compile_commands.json	/^  "command": "\/usr\/bin\/cc  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\/c/;"	s	object:1
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:0
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:2
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:3
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:4
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:5
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:6
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:7
command	compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\//;"	s	object:8
command	compile_commands.json	/^  "command": "\/usr\/bin\/cc  -I\/f\/codes\/c\/opengl\/cubic\/include -I\/f\/codes\/c\/opengl\/c/;"	s	object:1
compAdd	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compAdd(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMax	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMax(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMin	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMul	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMul(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compNormalize	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> compNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
compScale	include/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> compScale(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
components	include/glm/gtx/range.hpp	/^	inline length_t components(genType const& m)$/;"	f	namespace:glm	typeref:typename:length_t
components	include/glm/gtx/range.hpp	/^	inline length_t components(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	include/glm/gtx/range.hpp	/^	inline length_t components(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	include/glm/gtx/range.hpp	/^	inline length_t components(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	include/glm/gtx/range.hpp	/^	inline length_t components(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	include/glm/gtx/type_trait.hpp	/^		static length_t const components = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	include/glm/gtx/type_trait.hpp	/^		static length_t const components = 4;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	include/glm/gtx/type_trait.hpp	/^		static length_t const components = 8;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	include/glm/gtx/type_trait.hpp	/^		static length_t const components = C;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	include/glm/gtx/type_trait.hpp	/^		static length_t const components = L;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	include/glm/gtx/type_trait.inl	/^	length_t const type<T>::components;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
components	include/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::components;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
components	include/glm/gtx/type_trait.inl	/^	length_t const type<qua<T, Q> >::components;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:length_t const
components	include/glm/gtx/type_trait.inl	/^	length_t const type<tdualquat<T, Q> >::components;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:length_t const
components	include/glm/gtx/type_trait.inl	/^	length_t const type<vec<L, T, Q> >::components;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:length_t const
compute_YCoCgR	include/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR {$/;"	c	namespace:glm	file:
compute_YCoCgR	include/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR<T, Q, true> {$/;"	c	namespace:glm	file:
compute_abs	include/glm/detail/compute_common.hpp	/^	struct compute_abs$/;"	s	namespace:glm::detail
compute_abs	include/glm/detail/compute_common.hpp	/^	struct compute_abs<float, true>$/;"	s	namespace:glm::detail
compute_abs	include/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, false>$/;"	s	namespace:glm::detail
compute_abs	include/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, true>$/;"	s	namespace:glm::detail
compute_abs_vector	include/glm/detail/func_common.inl	/^	struct compute_abs_vector$/;"	s	namespace:glm::detail	file:
compute_abs_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_abs_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	include/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	include/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	include/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	include/glm/gtx/vector_query.inl	/^	struct compute_areCollinear{};$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	include/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	include/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	include/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldBitCountStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	include/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	include/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	include/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldReverseStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_ceil	include/glm/detail/func_common.inl	/^	struct compute_ceil$/;"	s	namespace:glm::detail	file:
compute_ceil	include/glm/detail/func_common_simd.inl	/^	struct compute_ceil<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple{};$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilPowerOfTwo$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilPowerOfTwo<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_ceilShift	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilShift$/;"	s	namespace:glm::detail	file:
compute_ceilShift	include/glm/ext/scalar_integer.inl	/^	struct compute_ceilShift<L, T, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	include/glm/detail/func_common.inl	/^	struct compute_clamp_vector$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	include/glm/gtx/component_wise.inl	/^	struct compute_compNormalize$/;"	s	namespace:glm::detail	file:
compute_compNormalize	include/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	include/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	include/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	include/glm/gtx/component_wise.inl	/^	struct compute_compScale$/;"	s	namespace:glm::detail	file:
compute_compScale	include/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	include/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compScale	include/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_cross	include/glm/detail/func_geometric.inl	/^	struct compute_cross$/;"	s	namespace:glm::detail	file:
compute_cross	include/glm/detail/func_geometric_simd.inl	/^	struct compute_cross<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_cross_vec2	include/glm/gtx/exterior_product.inl	/^	struct compute_cross_vec2$/;"	s	namespace:glm::detail	file:
compute_determinant	include/glm/detail/func_matrix.inl	/^	struct compute_determinant<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	include/glm/detail/func_matrix.inl	/^	struct compute_determinant<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	include/glm/detail/func_matrix.inl	/^	struct compute_determinant<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	include/glm/detail/func_matrix.inl	/^	struct compute_determinant{};$/;"	s	namespace:glm::detail	file:
compute_determinant	include/glm/detail/func_matrix_simd.inl	/^	struct compute_determinant<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_distance	include/glm/detail/func_geometric.inl	/^	struct compute_distance$/;"	s	namespace:glm::detail	file:
compute_distance	include/glm/detail/func_geometric_simd.inl	/^	struct compute_distance<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<1, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<2, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<3, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<4, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric.inl	/^	struct compute_dot{};$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/func_geometric_simd.inl	/^	struct compute_dot<vec<4, float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/detail/type_quat.inl	/^	struct compute_dot<qua<T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	include/glm/ext/quaternion_common_simd.inl	/^	struct compute_dot<qua<float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_equal	include/glm/detail/compute_vector_relational.hpp	/^	struct compute_equal$/;"	s	namespace:glm::detail
compute_faceforward	include/glm/detail/func_geometric.inl	/^	struct compute_faceforward$/;"	s	namespace:glm::detail	file:
compute_faceforward	include/glm/detail/func_geometric_simd.inl	/^	struct compute_faceforward<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_findLSB	include/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 32>$/;"	s	namespace:glm::detail	file:
compute_findLSB	include/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 64>$/;"	s	namespace:glm::detail	file:
compute_findLSB	include/glm/detail/func_integer.inl	/^	struct compute_findLSB$/;"	s	namespace:glm::detail	file:
compute_findMSB_32	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_32(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_64	include/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_64(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_step_vec	include/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec$/;"	s	namespace:glm::detail	file:
compute_findMSB_step_vec	include/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	include/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 32>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	include/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 64>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	include/glm/detail/func_integer.inl	/^	struct compute_findMSB_vec$/;"	s	namespace:glm::detail	file:
compute_floor	include/glm/detail/func_common.inl	/^	struct compute_floor$/;"	s	namespace:glm::detail	file:
compute_floor	include/glm/detail/func_common_simd.inl	/^	struct compute_floor<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	include/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple{};$/;"	s	namespace:glm::detail	file:
compute_fmod	include/glm/gtx/common.inl	/^	struct compute_fmod$/;"	s	namespace:glm::detail	file:
compute_fmod	include/glm/gtx/common.inl	/^	struct compute_fmod<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_fract	include/glm/detail/func_common.inl	/^	struct compute_fract$/;"	s	namespace:glm::detail	file:
compute_fract	include/glm/detail/func_common_simd.inl	/^	struct compute_fract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_half	include/glm/gtc/packing.inl	/^	struct compute_half$/;"	s	namespace:glm::detail	file:
compute_half	include/glm/gtc/packing.inl	/^	struct compute_half<1, Q>$/;"	s	namespace:glm::detail	file:
compute_half	include/glm/gtc/packing.inl	/^	struct compute_half<2, Q>$/;"	s	namespace:glm::detail	file:
compute_half	include/glm/gtc/packing.inl	/^	struct compute_half<3, Q>$/;"	s	namespace:glm::detail	file:
compute_half	include/glm/gtc/packing.inl	/^	struct compute_half<4, Q>$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix.inl	/^	struct compute_inverse<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix.inl	/^	struct compute_inverse<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix.inl	/^	struct compute_inverse<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix.inl	/^	struct compute_inverse{};$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix_simd.inl	/^	struct compute_inverse<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_inverse	include/glm/detail/func_matrix_simd.inl	/^	struct detail::compute_inverse<4, 4, float, Q, true>$/;"	s	class:glm::detail	file:
compute_inversesqrt	include/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	include/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt<L, float, lowp, Aligned>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	include/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	include/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	include/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	include/glm/gtx/vector_query.inl	/^	struct compute_isCompNull{};$/;"	s	namespace:glm::detail	file:
compute_length	include/glm/detail/func_geometric.inl	/^	struct compute_length$/;"	s	namespace:glm::detail	file:
compute_length	include/glm/detail/func_geometric_simd.inl	/^	struct compute_length<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_length2	include/glm/gtx/norm.inl	/^	struct compute_length2$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, float, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, int16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, int32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, int64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, int8, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, long double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	include/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint8, Q>$/;"	s	namespace:glm::detail	file:
compute_log2	include/glm/detail/func_exponential.inl	/^	struct compute_log2$/;"	s	namespace:glm::detail	file:
compute_log2	include/glm/gtc/integer.inl	/^		struct compute_log2<4, int, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_log2	include/glm/gtc/integer.inl	/^	struct compute_log2<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	include/glm/detail/func_matrix.inl	/^	struct compute_matrixCompMult$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	include/glm/detail/func_matrix_simd.inl	/^	struct compute_matrixCompMult<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	include/glm/detail/func_common.inl	/^	struct compute_max_vector$/;"	s	namespace:glm::detail	file:
compute_max_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	include/glm/detail/func_common.inl	/^	struct compute_min_vector$/;"	s	namespace:glm::detail	file:
compute_min_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mix	include/glm/detail/func_common.inl	/^	struct compute_mix$/;"	s	namespace:glm::detail	file:
compute_mix	include/glm/detail/func_common.inl	/^	struct compute_mix<T, bool>$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	include/glm/detail/func_common.inl	/^	struct compute_mix_scalar$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	include/glm/detail/func_common.inl	/^	struct compute_mix_scalar<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	include/glm/detail/func_common.inl	/^	struct compute_mix_vector$/;"	s	namespace:glm::detail	file:
compute_mix_vector	include/glm/detail/func_common.inl	/^	struct compute_mix_vector<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_mix_vector<4, float, bool, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mod	include/glm/detail/func_common.inl	/^	struct compute_mod$/;"	s	namespace:glm::detail	file:
compute_mod	include/glm/detail/func_common_simd.inl	/^	struct compute_mod<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_normalize	include/glm/detail/func_geometric.inl	/^	struct compute_normalize$/;"	s	namespace:glm::detail	file:
compute_normalize	include/glm/detail/func_geometric_simd.inl	/^	struct compute_normalize<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_add	include/glm/detail/type_quat.inl	/^	struct compute_quat_add$/;"	s	namespace:glm::detail	file:
compute_quat_add	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_add	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	include/glm/detail/type_quat.inl	/^	struct compute_quat_div_scalar$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	include/glm/detail/type_quat.inl	/^	struct compute_quat_mul_scalar$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_vec4	include/glm/detail/type_quat.inl	/^	struct compute_quat_mul_vec4$/;"	s	namespace:glm::detail	file:
compute_quat_mul_vec4	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_vec4<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	include/glm/detail/type_quat.inl	/^	struct compute_quat_sub$/;"	s	namespace:glm::detail	file:
compute_quat_sub	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	include/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<1, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<2, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<3, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<4, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	include/glm/gtc/random.inl	/^	struct compute_rand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_reflect	include/glm/detail/func_geometric.inl	/^	struct compute_reflect$/;"	s	namespace:glm::detail	file:
compute_reflect	include/glm/detail/func_geometric_simd.inl	/^	struct compute_reflect<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_refract	include/glm/detail/func_geometric.inl	/^	struct compute_refract$/;"	s	namespace:glm::detail	file:
compute_refract	include/glm/detail/func_geometric_simd.inl	/^	struct compute_refract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	include/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	include/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_round	include/glm/detail/func_common.inl	/^	struct compute_round$/;"	s	namespace:glm::detail	file:
compute_round	include/glm/detail/func_common_simd.inl	/^	struct compute_round<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	include/glm/gtc/round.inl	/^	struct compute_roundMultiple {};$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	include/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	include/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	include/glm/gtc/round.inl	/^	struct compute_roundMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_sign	include/glm/detail/func_common.inl	/^	struct compute_sign$/;"	s	namespace:glm::detail	file:
compute_sign	include/glm/detail/func_common.inl	/^	struct compute_sign<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	include/glm/detail/func_common.inl	/^	struct compute_smoothstep_vector$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	include/glm/detail/func_common_simd.inl	/^	struct compute_smoothstep_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_sqrt	include/glm/detail/func_exponential.inl	/^	struct compute_sqrt$/;"	s	namespace:glm::detail	file:
compute_sqrt	include/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_sqrt	include/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	include/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	include/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_step_vector	include/glm/detail/func_common.inl	/^	struct compute_step_vector$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<qua<T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<tdualquat<T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<1, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<1, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<2, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<3, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	include/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<4, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix.inl	/^	struct compute_transpose{};$/;"	s	namespace:glm::detail	file:
compute_transpose	include/glm/detail/func_matrix_simd.inl	/^	struct compute_transpose<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_trunc	include/glm/detail/func_common.inl	/^	struct compute_trunc$/;"	s	namespace:glm::detail	file:
compute_vec4_add	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_add$/;"	s	namespace:glm::detail	file:
compute_vec4_add	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_add	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_add	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_add	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_add<uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_and	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_and$/;"	s	namespace:glm::detail	file:
compute_vec4_and	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_and<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_and	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_and<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_bitwise_not$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_bitwise_not<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_bitwise_not	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_bitwise_not<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_div$/;"	s	namespace:glm::detail	file:
compute_vec4_div	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_div	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_div<float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_equal$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<int, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<int, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_equal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_equal<uint, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mod	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_mod$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_mul$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_mul	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_mul<uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_nequal$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<int, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<int, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_nequal	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_nequal<uint, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_or	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_or$/;"	s	namespace:glm::detail	file:
compute_vec4_or	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_or<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_or	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_or<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_shift_left$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_left<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_left	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_left<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_shift_right$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_right<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_shift_right	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_shift_right<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_sub$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_sub	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_sub<uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	include/glm/detail/type_vec4.inl	/^	struct compute_vec4_xor$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_xor<T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec4_xor	include/glm/detail/type_vec4_simd.inl	/^	struct compute_vec4_xor<T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
conjugate	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> conjugate(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
const	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_iterator	include/imgui/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	include/imgui/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
convertD65XYZToD50XYZ	include/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToD50XYZ(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertD65XYZToLinearSRGB	include/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToLinearSRGB(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD50XYZ	include/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD50XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD65XYZ	include/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD65XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearToSRGB	include/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, float, lowp> convertLinearToSRGB(vec<3, float, lowp> const& ColorLine/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,lowp>
convertLinearToSRGB	include/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertLinearToSRGB	include/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	include/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	include/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
copy_lane	include/glm/simd/neon.h	/^		static float32x4_t copy_lane(float32x4_t vdst, int dlane, float32x4_t vsrc, int slane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
cos	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos_52s	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T cos_52s(T x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
cos_52s	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos_52s(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos_one_over_two	include/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType cos_one_over_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
cosh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cot	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType cot(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cot	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
coth	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType coth(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
coth	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> coth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
countof	include/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	typeref:typename:std::size_t
cross	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cross	include/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> cross(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
cross	include/glm/gtx/exterior_product.inl	/^	GLM_FUNC_QUALIFIER T cross(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
cross	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cross	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(vec<3, T, Q> const& v, qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
csc	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csc(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csc	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
csch	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csch(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csch	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cube	main.cpp	/^static Cubic cube;$/;"	v	typeref:typename:Cubic	file:
cubeZoff	include/cubic.h	/^    float cubeZoff = 8;$/;"	m	class:Cubic	typeref:typename:float
cubes	include/cubic.h	/^    std::vector<Cube> cubes;$/;"	m	class:Cubic	typeref:typename:std::vector<Cube>
cubic	CMakeLists.txt	/^add_executable(cubic ${SOURCE_FILE})$/;"	t
cubic	cmake-build/Makefile	/^cubic: cmake_check_build_system$/;"	t
cubic	include/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType cubic$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubic/fast	cmake-build/Makefile	/^cubic\/fast:$/;"	t
cubicEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
curr	include/cubic.h	/^    float start , curr;$/;"	m	class:Cubic	typeref:typename:float
currRot	include/cubic.h	/^    float currRot = 0.f;$/;"	m	class:Cubic	typeref:typename:float
cursor	include/imgui/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anonda15fd810308	typeref:typename:int
cursor	include/imgui/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anona175a7780108	typeref:typename:int
cursor_at_end_of_line	include/imgui/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
cx	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
cx1	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
cy	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
cy1	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
data	include/glm/detail/qualifier.hpp	/^				T data[4];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[4]
data	include/glm/detail/qualifier.hpp	/^				T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	include/glm/detail/qualifier.hpp	/^			T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	include/glm/detail/type_quat.hpp	/^				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::qua::__anon948561fb010a	typeref:typename:detail::storage<4,T,detail::is_aligned<Q>::value>::type
data	include/glm/detail/type_vec1.hpp	/^				typename detail::storage<1, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anon6218a5cf010a	typeref:typename:detail::storage<1,T,detail::is_aligned<Q>::value>::type
data	include/glm/detail/type_vec2.hpp	/^				typename detail::storage<2, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anon622abe50010a	typeref:typename:detail::storage<2,T,detail::is_aligned<Q>::value>::type
data	include/glm/detail/type_vec3.hpp	/^				typename detail::storage<3, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anon623cd6d1010a	typeref:typename:detail::storage<3,T,detail::is_aligned<Q>::value>::type
data	include/glm/detail/type_vec4.hpp	/^				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anon624eef52010a	typeref:typename:detail::storage<4,T,detail::is_aligned<Q>::value>::type
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::i10i10i10i2	typeref:struct:glm::detail::i10i10i10i2::__anon0d6bcc420708	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u10u10u10u2	typeref:struct:glm::detail::u10u10u10u2::__anon0d6bcc420608	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u3u3u2	typeref:struct:glm::detail::u3u3u2::__anon0d6bcc420108	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4	typeref:struct:glm::detail::u4u4::__anon0d6bcc420208	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4u4u4	typeref:struct:glm::detail::u4u4u4u4::__anon0d6bcc420308	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u5u5u1	typeref:struct:glm::detail::u5u5u5u1::__anon0d6bcc420508	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u6u5	typeref:struct:glm::detail::u5u6u5::__anon0d6bcc420408	file:
data	include/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u9u9u9e5	typeref:struct:glm::detail::u9u9u9e5::__anon0d6bcc420808	file:
data	include/imgui/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	include/imgui/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anona175a7780108	typeref:typename:unsigned char *
ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:highp_ddualquat
ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:lowp_ddualquat
ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm	typeref:typename:mediump_ddualquat
decompose	include/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER bool decompose(mat<4, 4, T, Q> const& ModelMatrix, vec<3, T, Q> & Scale, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
default_target	Makefile	/^default_target: all$/;"	t
default_target	cmake-build/Makefile	/^default_target: all$/;"	t
defaultp	include/glm/detail/qualifier.hpp	/^			defaultp = aligned_highp$/;"	e	enum:glm::qualifier
degrees	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType degrees(genType radians)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
degrees	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> degrees(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
delete_length	include/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anonda15fd810108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
delim_left	include/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delim_right	include/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delimeter	include/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
delimeter	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER delimeter<CTy>::delimeter(CTy a, CTy b, CTy c)$/;"	f	class:glm::io::delimeter	typeref:typename:GLM_FUNC_QUALIFIER
depend	Makefile	/^depend:$/;"	t
depend	cmake-build/Makefile	/^depend:$/;"	t
derivedEulerAngleX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
detail	include/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/compute_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/compute_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/func_common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_exponential.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_exponential_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_geometric.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_geometric_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_integer_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_matrix.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_matrix_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_packing_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/func_vector_relational_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/qualifier.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/setup.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/detail/type_half.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/type_quat.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/type_quat_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/type_vec4.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/detail/type_vec4_simd.inl	/^namespace detail {$/;"	n	namespace:glm	file:
detail	include/glm/detail/type_vec4_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/ext/quaternion_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/ext/scalar_int_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/ext/scalar_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/ext/scalar_uint_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	include/glm/ext/scalar_ulp.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/bitfield.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/color_space.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/packing.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/random.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtc/round.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/component_wise.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/exterior_product.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/fast_trigonometry.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/hash.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/io.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/matrix_decompose.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/norm.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/string_cast.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/gtx/vector_query.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	include/glm/matrix.hpp	/^namespace detail$/;"	n	namespace:glm
determinant	include/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER T determinant(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
diagonal2x2	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> diagonal2x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
diagonal2x3	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> diagonal2x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
diagonal2x4	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> diagonal2x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
diagonal3x2	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> diagonal3x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
diagonal3x3	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> diagonal3x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
diagonal3x4	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> diagonal3x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
diagonal4x2	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> diagonal4x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
diagonal4x3	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> diagonal4x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
diagonal4x4	include/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> diagonal4x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
direction	include/imgui/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	include/imgui/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:0
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:1
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:2
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:3
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:4
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:5
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:6
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:7
directory	cmake-build/compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:8
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:0
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:1
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:2
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:3
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:4
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:5
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:6
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:7
directory	compile_commands.json	/^  "directory": "\/f\/codes\/c\/opengl\/cubic\/cmake-build",$/;"	s	object:8
diskRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> diskRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
distance	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T distance(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType distance(genType const& p0, genType const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
distance2	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(T p0, T p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance2	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dmat2	include/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
dmat2x2	include/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, double, defaultp>	dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x3	include/glm/ext/matrix_double2x3.hpp	/^	typedef mat<2, 3, double, defaultp>		dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, double, defaultp>	dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x4	include/glm/ext/matrix_double2x4.hpp	/^	typedef mat<2, 4, double, defaultp>		dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, double, defaultp>	dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat3	include/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
dmat3x2	include/glm/ext/matrix_double3x2.hpp	/^	typedef mat<3, 2, double, defaultp>		dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, double, defaultp>	dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x3	include/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, double, defaultp>	dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x4	include/glm/ext/matrix_double3x4.hpp	/^	typedef mat<3, 4, double, defaultp>		dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, double, defaultp>	dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat4	include/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
dmat4x2	include/glm/ext/matrix_double4x2.hpp	/^	typedef mat<4, 2, double, defaultp>		dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, double, defaultp>	dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x3	include/glm/ext/matrix_double4x3.hpp	/^	typedef mat<4, 3, double, defaultp>		dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, double, defaultp>	dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x4	include/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, double, defaultp>	dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
do_op	include/cubic.h	/^std::pair<std::vector<int>,std::vector<Cube>> Cubic::do_op(Operation op,std::pair<std::vector<in/;"	f	class:Cubic	typeref:typename:std::pair<std::vector<int>,std::vector<Cube>>
do_ops	include/cubic.h	/^void Cubic::do_ops() {$/;"	f	class:Cubic	typeref:typename:void
doingOps	include/cubic.h	/^    bool doingOps = false;$/;"	m	class:Cubic	typeref:typename:bool
dot	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(T x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	include/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
double1	include/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-qualifier floating-point vector with 1 comp/;"	t	namespace:glm	typeref:typename:double
double1x1	include/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-qualifier floating-point matrix with 1 co/;"	t	namespace:glm	typeref:typename:double
double2	include/glm/gtx/compatibility.hpp	/^	typedef vec<2, double, highp>		double2;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
double2x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, double, highp>		double2x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
double2x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, double, highp>		double2x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
double2x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, double, highp>		double2x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
double3	include/glm/gtx/compatibility.hpp	/^	typedef vec<3, double, highp>		double3;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
double3x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, double, highp>		double3x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
double3x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, double, highp>		double3x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
double3x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, double, highp>		double3x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
double4	include/glm/gtx/compatibility.hpp	/^	typedef vec<4, double, highp>		double4;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
double4x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, double, highp>		double4x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
double4x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, double, highp>		double4x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
double4x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, double, highp>		double4x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
dquat	include/glm/ext/quaternion_double.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
dquat	include/glm/fwd.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
dual	include/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
dual_quat_identity	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dual_quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
dualquat_cast	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<2, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat_cast	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<3, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dup_lane	include/glm/simd/neon.h	/^		static float32x2_t dup_lane(float32x4_t vsrc, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x2_t
dupq_lane	include/glm/simd/neon.h	/^		static float32x4_t dupq_lane(float32x4_t vsrc, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
dur	include/cubic.h	/^    float dur = 0.05f;$/;"	m	class:Cubic	typeref:typename:float
dvec1	include/glm/ext/vector_double1.hpp	/^	typedef vec<1, double, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,defaultp>
dvec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
dvec2	include/glm/ext/vector_double2.hpp	/^	typedef vec<2, double, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,defaultp>
dvec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
dvec3	include/glm/ext/vector_double3.hpp	/^	typedef vec<3, double, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,defaultp>
dvec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
dvec4	include/glm/ext/vector_double4.hpp	/^	typedef vec<4, double, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,defaultp>
dvec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
dword	include/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm	typeref:typename:detail::uint32
dx	include/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType e()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
e	include/imgui/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
ebo	include/rectangle.h	/^    uint32_t vao, vbo , ebo;$/;"	m	class:Rectangle	typeref:typename:uint32_t
eboID	include/cube.h	/^    uint32_t eboID;$/;"	m	class:Cube	typeref:typename:uint32_t
edit_cache	Makefile	/^edit_cache:$/;"	t
edit_cache	cmake-build/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	cmake-build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
elasticEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elem	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T const& elem(size_t i) const{ return (reinterpret_cast<const T*>(_buffer))/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T const &
elem	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& elem(size_t i){ return (reinterpret_cast<T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T &
empty	include/imgui/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	include/imgui/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	include/imgui/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	include/imgui/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	include/glm/gtx/range.hpp	/^	inline typename genType::value_type * end(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
end	include/glm/gtx/range.hpp	/^	inline typename genType::value_type const * end(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
end	include/imgui/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	include/imgui/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	include/imgui/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	include/imgui/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	include/imgui/imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	include/imgui/imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
epsilon	include/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType epsilon()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
epsilonEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonEqual(qua<T, Q> const& x, qua<T, Q> const& y, T const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, v/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonNotEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(double const& x, double const& y, double const& epsilon/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(float const& x, float const& y, float const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonNotEqual(qua<T, Q> const& x, qua<T, Q> const& y, T co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonNotEqual	include/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
equal	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	include/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> equal(mat<C, R, T, Q> const& a, mat<C, R, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
equal	include/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	include/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	include/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, genType const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	include/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, int MaxULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	include/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool equal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
equal	include/imgui/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	include/imgui/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	include/imgui/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	include/imgui/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
euclidean	include/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> euclidean$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
euler	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType euler()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
eulerAngleX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYZ	include/glm/gtx/euler_angles.inl	/^    GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngles	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> eulerAngles(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
exp	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
exp	include/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> exp(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
exp2	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType exp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exp2	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
exponent	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 23) & ((1 << 8) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponent	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 52) & ((int_type(1) << 11) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponentialEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	include/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER genType extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	include/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
extend	include/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
extend	include/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
extra	include/imgui/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
extractEulerAngleXYX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXYZ	include/glm/gtx/euler_angles.inl	/^    GLM_FUNC_DECL void extractEulerAngleXYZ(mat<4, 4, T, defaultp> const& M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL void
extractEulerAngleXZX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXZY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXY	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYX	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYZ	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractMatrixRotation	include/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> extractMatrixRotation(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
extractRealComponent	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T extractRealComponent(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
exts	glad.c	/^static const char *exts = NULL;$/;"	v	typeref:typename:const char *	file:
exts_i	glad.c	/^static char **exts_i = NULL;$/;"	v	typeref:typename:char **	file:
ey	include/imgui/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
f	include/glm/detail/type_float.hpp	/^		float_type f;$/;"	m	union:glm::detail::float_t	typeref:typename:float_type
f	include/glm/detail/type_half.inl	/^		float f;$/;"	m	union:glm::detail::uif32	typeref:typename:float	file:
f32	include/glm/fwd.hpp	/^	typedef float					f32;$/;"	t	namespace:glm	typeref:typename:float
f32	include/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm	typeref:typename:float32
f32	include/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
f32	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm	typeref:typename:lowp_f32
f32	include/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm	typeref:typename:mediump_float32
f32mat1	include/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat1x1	include/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32quat	include/glm/fwd.hpp	/^	typedef qua<f32, defaultp>			f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f32, defaultp> f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32vec1	include/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, defaultp> f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec1	include/glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f32
f32vec2	include/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, defaultp> f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec3	include/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, defaultp> f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec4	include/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, defaultp> f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f64	include/glm/fwd.hpp	/^	typedef double					f64;$/;"	t	namespace:glm	typeref:typename:double
f64	include/glm/gtc/type_precision.hpp	/^		typedef float64 f64;$/;"	t	namespace:glm	typeref:typename:float64
f64	include/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
f64	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm	typeref:typename:lowp_f64
f64	include/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm	typeref:typename:mediump_float64
f64mat1	include/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat1x1	include/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f64, defaultp>	f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, defaultp> f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f64, defaultp>	f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, defaultp> f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f64, defaultp>	f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, defaultp> f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f64, defaultp>	f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, defaultp> f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f64, defaultp>	f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, defaultp> f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f64, defaultp>	f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, defaultp> f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64quat	include/glm/fwd.hpp	/^	typedef qua<f64, defaultp>			f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f64, defaultp> f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64vec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec1	include/glm/gtc/type_precision.hpp	/^		typedef vec<1, f64, defaultp> f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec1	include/glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f64
f64vec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec2	include/glm/gtc/type_precision.hpp	/^		typedef vec<2, f64, defaultp> f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec3	include/glm/gtc/type_precision.hpp	/^		typedef vec<3, f64, defaultp> f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
f64vec4	include/glm/gtc/type_precision.hpp	/^		typedef vec<4, f64, defaultp> f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
faceforward	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType faceforward(genType const& N, genType const& I, genType const& Nref)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
faceforward	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> faceforward(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
factorial	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER genType factorial(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
factorial	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
factorial	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
factorial	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
fade	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> fade(vec<2, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
fade	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> fade(vec<3, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
fade	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> fade(vec<4, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
fastAcos	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAcos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAcos	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAcos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAsin	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAsin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAsin	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAsin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T y, T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& y, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastCos	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastCos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastCos	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastDistance	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastDistance(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastDistance	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastDistance(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastExp(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastExp	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastExp2	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastExp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp2	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastInverseSqrt	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastInverseSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastInverseSqrt	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastInverseSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLength	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastLength(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastLength	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastLength(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLog2	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog2	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastMix	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> fastMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
fastNormalize	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastNormalize(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastNormalize	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastNormalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastNormalizeDot	include/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T fastNormalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastPow(T x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastPow(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastPow	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastPow	include/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, int, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSin	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastSin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastSin	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSqrt	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastSqrt	include/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastTan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastTan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastTan	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastTan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fclamp	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER genType fclamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fclamp	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fclamp	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fdselect	include/imgui/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
fdx	include/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	include/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/glad.c",$/;"	s	object:1
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui.cpp",$/;"	s	object:8
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_demo.cpp",$/;"	s	object:2
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_draw.cpp",$/;"	s	object:3
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_impl_glfw.cpp",$/;"	s	object:4
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_impl_opengl3.cpp",$/;"	s	object:5
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_tables.cpp",$/;"	s	object:6
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_widgets.cpp",$/;"	s	object:7
file	cmake-build/compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/main.cpp",$/;"	s	object:0
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/glad.c",$/;"	s	object:1
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui.cpp",$/;"	s	object:8
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_demo.cpp",$/;"	s	object:2
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_draw.cpp",$/;"	s	object:3
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_impl_glfw.cpp",$/;"	s	object:4
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_impl_opengl3.cpp",$/;"	s	object:5
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_tables.cpp",$/;"	s	object:6
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/imgui\/imgui_widgets.cpp",$/;"	s	object:7
file	compile_commands.json	/^  "file": "\/f\/codes\/c\/opengl\/cubic\/main.cpp",$/;"	s	object:0
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
fill_	include/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:char_type
find	include/imgui/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	include/imgui/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
findLSB	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findLSB(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findLSB	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findLSB(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
findMSB	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findMSB(genIUType v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findMSB	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findMSB(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
findNSB	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER int findNSB(genIUType x, int significantBitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findNSB	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findNSB(vec<L, T, Q> const& Source, vec<L, int, Q> Significan/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
find_coreGL	glad.c	/^static void find_coreGL(void) {$/;"	f	typeref:typename:void	file:
find_erase	include/imgui/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	include/imgui/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_extensionsGL	glad.c	/^static int find_extensionsGL(void) {$/;"	f	typeref:typename:int	file:
first_char	include/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anonda15fd810508	typeref:typename:int
first_free	include/imgui/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	include/imgui/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anona175a7780508	typeref:typename:int
first_x	include/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:float
first_y	include/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:float
flags_	include/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:flags_type
flags_type	include/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::ios_base::fmtflags
fliplr	include/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> fliplr(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
flipud	include/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> flipud(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
float1	include/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-qualifier floating-point vector with 1 compo/;"	t	namespace:glm	typeref:typename:float
float1x1	include/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-qualifier floating-point matrix with 1 comp/;"	t	namespace:glm	typeref:typename:float
float2	include/glm/gtx/compatibility.hpp	/^	typedef vec<2, float, highp>		float2;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
float2half	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 float2half(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
float2packed10	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed10(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2packed11	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed11(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, float, highp>		float2x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
float2x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, float, highp>		float2x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
float2x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, float, highp>		float2x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
float3	include/glm/gtx/compatibility.hpp	/^	typedef vec<3, float, highp>		float3;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
float32	include/glm/fwd.hpp	/^	typedef float					float32;$/;"	t	namespace:glm	typeref:typename:float
float32	include/glm/gtc/type_precision.hpp	/^	typedef float float32;$/;"	t	namespace:glm	typeref:typename:float
float32_t	include/glm/fwd.hpp	/^	typedef float					float32_t;$/;"	t	namespace:glm	typeref:typename:float
float32_t	include/glm/gtc/type_precision.hpp	/^	typedef float32 float32_t;$/;"	t	namespace:glm	typeref:typename:float32
float32_t	include/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
float32_t	include/glm/gtc/type_precision.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:lowp_float32_t
float32_t	include/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm	typeref:typename:mediump_float32
float3x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, float, highp>		float3x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
float3x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, float, highp>		float3x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
float3x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, float, highp>		float3x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
float4	include/glm/gtx/compatibility.hpp	/^	typedef vec<4, float, highp>		float4;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
float4x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, float, highp>		float4x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
float4x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, float, highp>		float4x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
float4x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, float, highp>		float4x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
float64	include/glm/fwd.hpp	/^	typedef double					float64;$/;"	t	namespace:glm	typeref:typename:double
float64	include/glm/gtc/type_precision.hpp	/^	typedef double float64;$/;"	t	namespace:glm	typeref:typename:double
float64_t	include/glm/fwd.hpp	/^	typedef double					float64_t;$/;"	t	namespace:glm	typeref:typename:double
float64_t	include/glm/gtc/type_precision.hpp	/^		typedef float64 float64_t;$/;"	t	namespace:glm	typeref:typename:float64
float64_t	include/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
float64_t	include/glm/gtc/type_precision.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:lowp_float64_t
float64_t	include/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm	typeref:typename:mediump_float64
floatBitsToInt	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER int floatBitsToInt(float const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
floatBitsToInt	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
floatBitsToUint	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER uint floatBitsToUint(float const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
floatBitsToUint	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
floatDistance	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int floatDistance(float x, float y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
floatDistance	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int64 floatDistance(double x, double y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
floatDistance	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> floatDistance(vec<L, float, Q> const& x, vec<L, float, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
floatDistance	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int64, Q> floatDistance(vec<L, double, Q> const& x, vec<L, double, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>
floatNormalize	include/glm/gtx/float_notmalize.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> floatNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
floatTo10bit	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo10bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
floatTo11bit	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo11bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
float_distance	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER int float_distance(float x, float y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
float_distance	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER int64 float_distance(double x, double y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
float_distance	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> float_distance(vec<L, float, Q> const& x, vec<L, float, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
float_distance	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int64, Q> float_distance(vec<L, double, Q> const& x, vec<L, double, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>
float_t	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = 0.0f) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = static_cast<float_type>(0)) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	include/glm/detail/type_float.hpp	/^	union float_t$/;"	u	namespace:glm::detail
float_t	include/glm/detail/type_float.hpp	/^	union float_t<double>$/;"	u	namespace:glm::detail
float_t	include/glm/detail/type_float.hpp	/^	union float_t<float>$/;"	u	namespace:glm::detail
float_type	include/glm/detail/type_float.hpp	/^		typedef double float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:double
float_type	include/glm/detail/type_float.hpp	/^		typedef float float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:float
floor	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floor(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fma	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType fma(genType const& a, genType const& b, genType const& c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmax	include/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmax(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	include/glm/gtx/extended_min_max.inl	/^		GLM_FUNC_QUALIFIER genType fmax(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmax	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	include/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmin(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	include/glm/gtx/extended_min_max.inl	/^		GLM_FUNC_QUALIFIER genType fmin(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmin	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER genType fmod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmod	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
font_size	include/imgui/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anona175a7780508	typeref:typename:float
fontdicts	include/imgui/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	include/imgui/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
format	include/glm/gtx/string_cast.inl	/^	GLM_FUNC_QUALIFIER std::string format(const char* msg, ...)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::string
format_punct	include/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io
format_punct	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(format_punct const& a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_punct	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(size_t a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_saver	include/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<char>
formatted	include/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	typeref:typename:bool
formatted	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& formatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
four_over_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType four_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
fquat	include/glm/fwd.hpp	/^	typedef qua<float, defaultp>		fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
fract	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType fract(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fract	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fract(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fragment	include/shader.h	/^	char* fragment;$/;"	m	struct:__anon11768d450108	typeref:typename:char *
free_exts	glad.c	/^static void free_exts(void) {$/;"	f	typeref:typename:void	file:
free_head	include/imgui/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
free_mem	include/shader.h	/^		void free_mem() {$/;"	f	class:Shader	typeref:typename:void
frexp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType frexp(genType x, int& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
frexp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
front	include/imgui/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	include/imgui/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
frustum	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustum(T left, T right, T bottom, T top, T nearVal, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumNO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumNO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumZO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
funcs	imgui/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && Ge/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	imgui/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && Im/;"	s	function:ShowDemoWindowInputs	file:
funcs	imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowInputs	file:
functor1	include/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 1, R, T, Q>$/;"	s	namespace:glm::detail
functor1	include/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 2, R, T, Q>$/;"	s	namespace:glm::detail
functor1	include/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 3, R, T, Q>$/;"	s	namespace:glm::detail
functor1	include/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 4, R, T, Q>$/;"	s	namespace:glm::detail
functor1	include/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	include/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2	include/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2	include/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2	include/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2	include/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_int	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int {};$/;"	s	namespace:glm::detail
functor2_vec_int	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<1, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<2, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<3, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<4, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	include/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	include/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
fvec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, defaultp> fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
fvec2	include/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
fvec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, defaultp> fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
fvec3	include/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
fvec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, defaultp> fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
fvec4	include/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
fvec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, defaultp> fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
fx	include/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g	include/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500308	typeref:typename:T
g	include/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon622abe50060a	typeref:typename:T
g	include/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10308	typeref:typename:T
g	include/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon623cd6d1060a	typeref:typename:T
g	include/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520308	typeref:typename:T
g	include/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon624eef52060a	typeref:typename:T
gauss	include/glm/gtx/functions.inl	/^	GLM_FUNC_QUALIFIER T gauss$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
gaussRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType gaussRand(genType Mean, genType Deviation)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
gaussRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> gaussRand(vec<L, T, Q> const& Mean, vec<L, T, Q> const& Deviati/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
genTypeEnum	include/glm/detail/qualifier.hpp	/^	enum genTypeEnum$/;"	g	namespace:glm::detail
genTypeTrait	include/glm/detail/qualifier.hpp	/^	struct genTypeTrait$/;"	s	namespace:glm::detail
genTypeTrait	include/glm/detail/qualifier.hpp	/^	struct genTypeTrait<mat<C, R, T> >$/;"	s	namespace:glm::detail
genTypeTrait	include/glm/detail/type_quat.inl	/^	struct genTypeTrait<qua<T> >$/;"	s	namespace:glm::detail	file:
get_exts	glad.c	/^static int get_exts(void) {$/;"	f	typeref:typename:int	file:
get_facet	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER FTy const& get_facet(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER FTy const &
get_line_begin	include/imgui/imgui_internal.h	/^    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_line_end	include/imgui/imgui_internal.h	/^    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_proc	glad.c	/^void* get_proc(const char *namez) {$/;"	f	typeref:typename:void *	file:
get_proc	include/imgui/imgui_impl_opengl3_loader.h	/^static GL3WglProc get_proc(const char *proc)$/;"	f	typeref:typename:GL3WglProc
gl	include/imgui/imgui_impl_opengl3_loader.h	/^    } gl;$/;"	m	union:GL3WProcs	typeref:struct:GL3WProcs::__anon91aaf4b10108
glActiveTexture	include/glad/glad.h	/^#define glActiveTexture glad_glActiveTexture$/;"	d
glActiveTexture	include/imgui/imgui_impl_opengl3_loader.h	/^#define glActiveTexture /;"	d
glAttachShader	include/glad/glad.h	/^#define glAttachShader glad_glAttachShader$/;"	d
glAttachShader	include/imgui/imgui_impl_opengl3_loader.h	/^#define glAttachShader /;"	d
glBeginConditionalRender	include/glad/glad.h	/^#define glBeginConditionalRender glad_glBeginConditionalRender$/;"	d
glBeginQuery	include/glad/glad.h	/^#define glBeginQuery glad_glBeginQuery$/;"	d
glBeginTransformFeedback	include/glad/glad.h	/^#define glBeginTransformFeedback glad_glBeginTransformFeedback$/;"	d
glBindAttribLocation	include/glad/glad.h	/^#define glBindAttribLocation glad_glBindAttribLocation$/;"	d
glBindBuffer	include/glad/glad.h	/^#define glBindBuffer glad_glBindBuffer$/;"	d
glBindBuffer	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBindBuffer /;"	d
glBindBufferBase	include/glad/glad.h	/^#define glBindBufferBase glad_glBindBufferBase$/;"	d
glBindBufferRange	include/glad/glad.h	/^#define glBindBufferRange glad_glBindBufferRange$/;"	d
glBindFragDataLocation	include/glad/glad.h	/^#define glBindFragDataLocation glad_glBindFragDataLocation$/;"	d
glBindFragDataLocationIndexed	include/glad/glad.h	/^#define glBindFragDataLocationIndexed glad_glBindFragDataLocationIndexed$/;"	d
glBindFramebuffer	include/glad/glad.h	/^#define glBindFramebuffer glad_glBindFramebuffer$/;"	d
glBindRenderbuffer	include/glad/glad.h	/^#define glBindRenderbuffer glad_glBindRenderbuffer$/;"	d
glBindSampler	include/glad/glad.h	/^#define glBindSampler glad_glBindSampler$/;"	d
glBindSampler	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBindSampler /;"	d
glBindTexture	include/glad/glad.h	/^#define glBindTexture glad_glBindTexture$/;"	d
glBindTexture	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBindTexture /;"	d
glBindVertexArray	imgui/imgui_impl_opengl3.cpp	/^#define glBindVertexArray       glBindVertexArrayO/;"	d	file:
glBindVertexArray	include/glad/glad.h	/^#define glBindVertexArray glad_glBindVertexArray$/;"	d
glBindVertexArray	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBindVertexArray /;"	d
glBlendColor	include/glad/glad.h	/^#define glBlendColor glad_glBlendColor$/;"	d
glBlendEquation	include/glad/glad.h	/^#define glBlendEquation glad_glBlendEquation$/;"	d
glBlendEquation	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBlendEquation /;"	d
glBlendEquationSeparate	include/glad/glad.h	/^#define glBlendEquationSeparate glad_glBlendEquationSeparate$/;"	d
glBlendEquationSeparate	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBlendEquationSeparate /;"	d
glBlendFunc	include/glad/glad.h	/^#define glBlendFunc glad_glBlendFunc$/;"	d
glBlendFuncSeparate	include/glad/glad.h	/^#define glBlendFuncSeparate glad_glBlendFuncSeparate$/;"	d
glBlendFuncSeparate	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBlendFuncSeparate /;"	d
glBlitFramebuffer	include/glad/glad.h	/^#define glBlitFramebuffer glad_glBlitFramebuffer$/;"	d
glBufferData	include/glad/glad.h	/^#define glBufferData glad_glBufferData$/;"	d
glBufferData	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBufferData /;"	d
glBufferSubData	include/glad/glad.h	/^#define glBufferSubData glad_glBufferSubData$/;"	d
glBufferSubData	include/imgui/imgui_impl_opengl3_loader.h	/^#define glBufferSubData /;"	d
glCheckFramebufferStatus	include/glad/glad.h	/^#define glCheckFramebufferStatus glad_glCheckFramebufferStatus$/;"	d
glClampColor	include/glad/glad.h	/^#define glClampColor glad_glClampColor$/;"	d
glClear	include/glad/glad.h	/^#define glClear glad_glClear$/;"	d
glClear	include/imgui/imgui_impl_opengl3_loader.h	/^#define glClear /;"	d
glClearBufferfi	include/glad/glad.h	/^#define glClearBufferfi glad_glClearBufferfi$/;"	d
glClearBufferfv	include/glad/glad.h	/^#define glClearBufferfv glad_glClearBufferfv$/;"	d
glClearBufferiv	include/glad/glad.h	/^#define glClearBufferiv glad_glClearBufferiv$/;"	d
glClearBufferuiv	include/glad/glad.h	/^#define glClearBufferuiv glad_glClearBufferuiv$/;"	d
glClearColor	include/glad/glad.h	/^#define glClearColor glad_glClearColor$/;"	d
glClearColor	include/imgui/imgui_impl_opengl3_loader.h	/^#define glClearColor /;"	d
glClearDepth	include/glad/glad.h	/^#define glClearDepth glad_glClearDepth$/;"	d
glClearStencil	include/glad/glad.h	/^#define glClearStencil glad_glClearStencil$/;"	d
glClientWaitSync	include/glad/glad.h	/^#define glClientWaitSync glad_glClientWaitSync$/;"	d
glColorMask	include/glad/glad.h	/^#define glColorMask glad_glColorMask$/;"	d
glColorMaski	include/glad/glad.h	/^#define glColorMaski glad_glColorMaski$/;"	d
glColorP3ui	include/glad/glad.h	/^#define glColorP3ui glad_glColorP3ui$/;"	d
glColorP3uiv	include/glad/glad.h	/^#define glColorP3uiv glad_glColorP3uiv$/;"	d
glColorP4ui	include/glad/glad.h	/^#define glColorP4ui glad_glColorP4ui$/;"	d
glColorP4uiv	include/glad/glad.h	/^#define glColorP4uiv glad_glColorP4uiv$/;"	d
glCompileShader	include/glad/glad.h	/^#define glCompileShader glad_glCompileShader$/;"	d
glCompileShader	include/imgui/imgui_impl_opengl3_loader.h	/^#define glCompileShader /;"	d
glCompressedTexImage1D	include/glad/glad.h	/^#define glCompressedTexImage1D glad_glCompressedTexImage1D$/;"	d
glCompressedTexImage2D	include/glad/glad.h	/^#define glCompressedTexImage2D glad_glCompressedTexImage2D$/;"	d
glCompressedTexImage3D	include/glad/glad.h	/^#define glCompressedTexImage3D glad_glCompressedTexImage3D$/;"	d
glCompressedTexSubImage1D	include/glad/glad.h	/^#define glCompressedTexSubImage1D glad_glCompressedTexSubImage1D$/;"	d
glCompressedTexSubImage2D	include/glad/glad.h	/^#define glCompressedTexSubImage2D glad_glCompressedTexSubImage2D$/;"	d
glCompressedTexSubImage3D	include/glad/glad.h	/^#define glCompressedTexSubImage3D glad_glCompressedTexSubImage3D$/;"	d
glCopyBufferSubData	include/glad/glad.h	/^#define glCopyBufferSubData glad_glCopyBufferSubData$/;"	d
glCopyTexImage1D	include/glad/glad.h	/^#define glCopyTexImage1D glad_glCopyTexImage1D$/;"	d
glCopyTexImage2D	include/glad/glad.h	/^#define glCopyTexImage2D glad_glCopyTexImage2D$/;"	d
glCopyTexSubImage1D	include/glad/glad.h	/^#define glCopyTexSubImage1D glad_glCopyTexSubImage1D$/;"	d
glCopyTexSubImage2D	include/glad/glad.h	/^#define glCopyTexSubImage2D glad_glCopyTexSubImage2D$/;"	d
glCopyTexSubImage3D	include/glad/glad.h	/^#define glCopyTexSubImage3D glad_glCopyTexSubImage3D$/;"	d
glCreateProgram	include/glad/glad.h	/^#define glCreateProgram glad_glCreateProgram$/;"	d
glCreateProgram	include/imgui/imgui_impl_opengl3_loader.h	/^#define glCreateProgram /;"	d
glCreateShader	include/glad/glad.h	/^#define glCreateShader glad_glCreateShader$/;"	d
glCreateShader	include/imgui/imgui_impl_opengl3_loader.h	/^#define glCreateShader /;"	d
glCullFace	include/glad/glad.h	/^#define glCullFace glad_glCullFace$/;"	d
glDeleteBuffers	include/glad/glad.h	/^#define glDeleteBuffers glad_glDeleteBuffers$/;"	d
glDeleteBuffers	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDeleteBuffers /;"	d
glDeleteFramebuffers	include/glad/glad.h	/^#define glDeleteFramebuffers glad_glDeleteFramebuffers$/;"	d
glDeleteProgram	include/glad/glad.h	/^#define glDeleteProgram glad_glDeleteProgram$/;"	d
glDeleteProgram	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDeleteProgram /;"	d
glDeleteQueries	include/glad/glad.h	/^#define glDeleteQueries glad_glDeleteQueries$/;"	d
glDeleteRenderbuffers	include/glad/glad.h	/^#define glDeleteRenderbuffers glad_glDeleteRenderbuffers$/;"	d
glDeleteSamplers	include/glad/glad.h	/^#define glDeleteSamplers glad_glDeleteSamplers$/;"	d
glDeleteShader	include/glad/glad.h	/^#define glDeleteShader glad_glDeleteShader$/;"	d
glDeleteShader	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDeleteShader /;"	d
glDeleteSync	include/glad/glad.h	/^#define glDeleteSync glad_glDeleteSync$/;"	d
glDeleteTextures	include/glad/glad.h	/^#define glDeleteTextures glad_glDeleteTextures$/;"	d
glDeleteTextures	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDeleteTextures /;"	d
glDeleteVertexArrays	imgui/imgui_impl_opengl3.cpp	/^#define glDeleteVertexArrays    glDeleteVertexArraysO/;"	d	file:
glDeleteVertexArrays	include/glad/glad.h	/^#define glDeleteVertexArrays glad_glDeleteVertexArrays$/;"	d
glDeleteVertexArrays	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDeleteVertexArrays /;"	d
glDepthFunc	include/glad/glad.h	/^#define glDepthFunc glad_glDepthFunc$/;"	d
glDepthMask	include/glad/glad.h	/^#define glDepthMask glad_glDepthMask$/;"	d
glDepthRange	include/glad/glad.h	/^#define glDepthRange glad_glDepthRange$/;"	d
glDetachShader	include/glad/glad.h	/^#define glDetachShader glad_glDetachShader$/;"	d
glDetachShader	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDetachShader /;"	d
glDisable	include/glad/glad.h	/^#define glDisable glad_glDisable$/;"	d
glDisable	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDisable /;"	d
glDisableVertexAttribArray	include/glad/glad.h	/^#define glDisableVertexAttribArray glad_glDisableVertexAttribArray$/;"	d
glDisableVertexAttribArray	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDisableVertexAttribArray /;"	d
glDisablei	include/glad/glad.h	/^#define glDisablei glad_glDisablei$/;"	d
glDrawArrays	include/glad/glad.h	/^#define glDrawArrays glad_glDrawArrays$/;"	d
glDrawArraysInstanced	include/glad/glad.h	/^#define glDrawArraysInstanced glad_glDrawArraysInstanced$/;"	d
glDrawBuffer	include/glad/glad.h	/^#define glDrawBuffer glad_glDrawBuffer$/;"	d
glDrawBuffers	include/glad/glad.h	/^#define glDrawBuffers glad_glDrawBuffers$/;"	d
glDrawElements	include/glad/glad.h	/^#define glDrawElements glad_glDrawElements$/;"	d
glDrawElements	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDrawElements /;"	d
glDrawElementsBaseVertex	include/glad/glad.h	/^#define glDrawElementsBaseVertex glad_glDrawElementsBaseVertex$/;"	d
glDrawElementsBaseVertex	include/imgui/imgui_impl_opengl3_loader.h	/^#define glDrawElementsBaseVertex /;"	d
glDrawElementsInstanced	include/glad/glad.h	/^#define glDrawElementsInstanced glad_glDrawElementsInstanced$/;"	d
glDrawElementsInstancedBaseVertex	include/glad/glad.h	/^#define glDrawElementsInstancedBaseVertex glad_glDrawElementsInstancedBaseVertex$/;"	d
glDrawRangeElements	include/glad/glad.h	/^#define glDrawRangeElements glad_glDrawRangeElements$/;"	d
glDrawRangeElementsBaseVertex	include/glad/glad.h	/^#define glDrawRangeElementsBaseVertex glad_glDrawRangeElementsBaseVertex$/;"	d
glEnable	include/glad/glad.h	/^#define glEnable glad_glEnable$/;"	d
glEnable	include/imgui/imgui_impl_opengl3_loader.h	/^#define glEnable /;"	d
glEnableVertexAttribArray	include/glad/glad.h	/^#define glEnableVertexAttribArray glad_glEnableVertexAttribArray$/;"	d
glEnableVertexAttribArray	include/imgui/imgui_impl_opengl3_loader.h	/^#define glEnableVertexAttribArray /;"	d
glEnablei	include/glad/glad.h	/^#define glEnablei glad_glEnablei$/;"	d
glEndConditionalRender	include/glad/glad.h	/^#define glEndConditionalRender glad_glEndConditionalRender$/;"	d
glEndQuery	include/glad/glad.h	/^#define glEndQuery glad_glEndQuery$/;"	d
glEndTransformFeedback	include/glad/glad.h	/^#define glEndTransformFeedback glad_glEndTransformFeedback$/;"	d
glFenceSync	include/glad/glad.h	/^#define glFenceSync glad_glFenceSync$/;"	d
glFinish	include/glad/glad.h	/^#define glFinish glad_glFinish$/;"	d
glFlush	include/glad/glad.h	/^#define glFlush glad_glFlush$/;"	d
glFlush	include/imgui/imgui_impl_opengl3_loader.h	/^#define glFlush /;"	d
glFlushMappedBufferRange	include/glad/glad.h	/^#define glFlushMappedBufferRange glad_glFlushMappedBufferRange$/;"	d
glFramebufferRenderbuffer	include/glad/glad.h	/^#define glFramebufferRenderbuffer glad_glFramebufferRenderbuffer$/;"	d
glFramebufferTexture	include/glad/glad.h	/^#define glFramebufferTexture glad_glFramebufferTexture$/;"	d
glFramebufferTexture1D	include/glad/glad.h	/^#define glFramebufferTexture1D glad_glFramebufferTexture1D$/;"	d
glFramebufferTexture2D	include/glad/glad.h	/^#define glFramebufferTexture2D glad_glFramebufferTexture2D$/;"	d
glFramebufferTexture3D	include/glad/glad.h	/^#define glFramebufferTexture3D glad_glFramebufferTexture3D$/;"	d
glFramebufferTextureLayer	include/glad/glad.h	/^#define glFramebufferTextureLayer glad_glFramebufferTextureLayer$/;"	d
glFrontFace	include/glad/glad.h	/^#define glFrontFace glad_glFrontFace$/;"	d
glGenBuffers	include/glad/glad.h	/^#define glGenBuffers glad_glGenBuffers$/;"	d
glGenBuffers	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGenBuffers /;"	d
glGenFramebuffers	include/glad/glad.h	/^#define glGenFramebuffers glad_glGenFramebuffers$/;"	d
glGenQueries	include/glad/glad.h	/^#define glGenQueries glad_glGenQueries$/;"	d
glGenRenderbuffers	include/glad/glad.h	/^#define glGenRenderbuffers glad_glGenRenderbuffers$/;"	d
glGenSamplers	include/glad/glad.h	/^#define glGenSamplers glad_glGenSamplers$/;"	d
glGenTextures	include/glad/glad.h	/^#define glGenTextures glad_glGenTextures$/;"	d
glGenTextures	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGenTextures /;"	d
glGenVertexArrays	imgui/imgui_impl_opengl3.cpp	/^#define glGenVertexArrays       glGenVertexArraysO/;"	d	file:
glGenVertexArrays	include/glad/glad.h	/^#define glGenVertexArrays glad_glGenVertexArrays$/;"	d
glGenVertexArrays	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGenVertexArrays /;"	d
glGenerateMipmap	include/glad/glad.h	/^#define glGenerateMipmap glad_glGenerateMipmap$/;"	d
glGetActiveAttrib	include/glad/glad.h	/^#define glGetActiveAttrib glad_glGetActiveAttrib$/;"	d
glGetActiveUniform	include/glad/glad.h	/^#define glGetActiveUniform glad_glGetActiveUniform$/;"	d
glGetActiveUniformBlockName	include/glad/glad.h	/^#define glGetActiveUniformBlockName glad_glGetActiveUniformBlockName$/;"	d
glGetActiveUniformBlockiv	include/glad/glad.h	/^#define glGetActiveUniformBlockiv glad_glGetActiveUniformBlockiv$/;"	d
glGetActiveUniformName	include/glad/glad.h	/^#define glGetActiveUniformName glad_glGetActiveUniformName$/;"	d
glGetActiveUniformsiv	include/glad/glad.h	/^#define glGetActiveUniformsiv glad_glGetActiveUniformsiv$/;"	d
glGetAttachedShaders	include/glad/glad.h	/^#define glGetAttachedShaders glad_glGetAttachedShaders$/;"	d
glGetAttribLocation	include/glad/glad.h	/^#define glGetAttribLocation glad_glGetAttribLocation$/;"	d
glGetAttribLocation	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetAttribLocation /;"	d
glGetBooleani_v	include/glad/glad.h	/^#define glGetBooleani_v glad_glGetBooleani_v$/;"	d
glGetBooleanv	include/glad/glad.h	/^#define glGetBooleanv glad_glGetBooleanv$/;"	d
glGetBufferParameteri64v	include/glad/glad.h	/^#define glGetBufferParameteri64v glad_glGetBufferParameteri64v$/;"	d
glGetBufferParameteriv	include/glad/glad.h	/^#define glGetBufferParameteriv glad_glGetBufferParameteriv$/;"	d
glGetBufferPointerv	include/glad/glad.h	/^#define glGetBufferPointerv glad_glGetBufferPointerv$/;"	d
glGetBufferSubData	include/glad/glad.h	/^#define glGetBufferSubData glad_glGetBufferSubData$/;"	d
glGetCompressedTexImage	include/glad/glad.h	/^#define glGetCompressedTexImage glad_glGetCompressedTexImage$/;"	d
glGetDoublev	include/glad/glad.h	/^#define glGetDoublev glad_glGetDoublev$/;"	d
glGetError	include/glad/glad.h	/^#define glGetError glad_glGetError$/;"	d
glGetError	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetError /;"	d
glGetFloatv	include/glad/glad.h	/^#define glGetFloatv glad_glGetFloatv$/;"	d
glGetFragDataIndex	include/glad/glad.h	/^#define glGetFragDataIndex glad_glGetFragDataIndex$/;"	d
glGetFragDataLocation	include/glad/glad.h	/^#define glGetFragDataLocation glad_glGetFragDataLocation$/;"	d
glGetFramebufferAttachmentParameteriv	include/glad/glad.h	/^#define glGetFramebufferAttachmentParameteriv glad_glGetFramebufferAttachmentParameteriv$/;"	d
glGetInteger64i_v	include/glad/glad.h	/^#define glGetInteger64i_v glad_glGetInteger64i_v$/;"	d
glGetInteger64v	include/glad/glad.h	/^#define glGetInteger64v glad_glGetInteger64v$/;"	d
glGetIntegeri_v	include/glad/glad.h	/^#define glGetIntegeri_v glad_glGetIntegeri_v$/;"	d
glGetIntegerv	include/glad/glad.h	/^#define glGetIntegerv glad_glGetIntegerv$/;"	d
glGetIntegerv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetIntegerv /;"	d
glGetMultisamplefv	include/glad/glad.h	/^#define glGetMultisamplefv glad_glGetMultisamplefv$/;"	d
glGetProgramInfoLog	include/glad/glad.h	/^#define glGetProgramInfoLog glad_glGetProgramInfoLog$/;"	d
glGetProgramInfoLog	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetProgramInfoLog /;"	d
glGetProgramiv	include/glad/glad.h	/^#define glGetProgramiv glad_glGetProgramiv$/;"	d
glGetProgramiv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetProgramiv /;"	d
glGetQueryObjecti64v	include/glad/glad.h	/^#define glGetQueryObjecti64v glad_glGetQueryObjecti64v$/;"	d
glGetQueryObjectiv	include/glad/glad.h	/^#define glGetQueryObjectiv glad_glGetQueryObjectiv$/;"	d
glGetQueryObjectui64v	include/glad/glad.h	/^#define glGetQueryObjectui64v glad_glGetQueryObjectui64v$/;"	d
glGetQueryObjectuiv	include/glad/glad.h	/^#define glGetQueryObjectuiv glad_glGetQueryObjectuiv$/;"	d
glGetQueryiv	include/glad/glad.h	/^#define glGetQueryiv glad_glGetQueryiv$/;"	d
glGetRenderbufferParameteriv	include/glad/glad.h	/^#define glGetRenderbufferParameteriv glad_glGetRenderbufferParameteriv$/;"	d
glGetSamplerParameterIiv	include/glad/glad.h	/^#define glGetSamplerParameterIiv glad_glGetSamplerParameterIiv$/;"	d
glGetSamplerParameterIuiv	include/glad/glad.h	/^#define glGetSamplerParameterIuiv glad_glGetSamplerParameterIuiv$/;"	d
glGetSamplerParameterfv	include/glad/glad.h	/^#define glGetSamplerParameterfv glad_glGetSamplerParameterfv$/;"	d
glGetSamplerParameteriv	include/glad/glad.h	/^#define glGetSamplerParameteriv glad_glGetSamplerParameteriv$/;"	d
glGetShaderInfoLog	include/glad/glad.h	/^#define glGetShaderInfoLog glad_glGetShaderInfoLog$/;"	d
glGetShaderInfoLog	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetShaderInfoLog /;"	d
glGetShaderSource	include/glad/glad.h	/^#define glGetShaderSource glad_glGetShaderSource$/;"	d
glGetShaderiv	include/glad/glad.h	/^#define glGetShaderiv glad_glGetShaderiv$/;"	d
glGetShaderiv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetShaderiv /;"	d
glGetString	include/glad/glad.h	/^#define glGetString glad_glGetString$/;"	d
glGetString	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetString /;"	d
glGetStringi	include/glad/glad.h	/^#define glGetStringi glad_glGetStringi$/;"	d
glGetStringi	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetStringi /;"	d
glGetSynciv	include/glad/glad.h	/^#define glGetSynciv glad_glGetSynciv$/;"	d
glGetTexImage	include/glad/glad.h	/^#define glGetTexImage glad_glGetTexImage$/;"	d
glGetTexLevelParameterfv	include/glad/glad.h	/^#define glGetTexLevelParameterfv glad_glGetTexLevelParameterfv$/;"	d
glGetTexLevelParameteriv	include/glad/glad.h	/^#define glGetTexLevelParameteriv glad_glGetTexLevelParameteriv$/;"	d
glGetTexParameterIiv	include/glad/glad.h	/^#define glGetTexParameterIiv glad_glGetTexParameterIiv$/;"	d
glGetTexParameterIuiv	include/glad/glad.h	/^#define glGetTexParameterIuiv glad_glGetTexParameterIuiv$/;"	d
glGetTexParameterfv	include/glad/glad.h	/^#define glGetTexParameterfv glad_glGetTexParameterfv$/;"	d
glGetTexParameteriv	include/glad/glad.h	/^#define glGetTexParameteriv glad_glGetTexParameteriv$/;"	d
glGetTransformFeedbackVarying	include/glad/glad.h	/^#define glGetTransformFeedbackVarying glad_glGetTransformFeedbackVarying$/;"	d
glGetUniformBlockIndex	include/glad/glad.h	/^#define glGetUniformBlockIndex glad_glGetUniformBlockIndex$/;"	d
glGetUniformIndices	include/glad/glad.h	/^#define glGetUniformIndices glad_glGetUniformIndices$/;"	d
glGetUniformLocation	include/glad/glad.h	/^#define glGetUniformLocation glad_glGetUniformLocation$/;"	d
glGetUniformLocation	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetUniformLocation /;"	d
glGetUniformfv	include/glad/glad.h	/^#define glGetUniformfv glad_glGetUniformfv$/;"	d
glGetUniformiv	include/glad/glad.h	/^#define glGetUniformiv glad_glGetUniformiv$/;"	d
glGetUniformuiv	include/glad/glad.h	/^#define glGetUniformuiv glad_glGetUniformuiv$/;"	d
glGetVertexAttribIiv	include/glad/glad.h	/^#define glGetVertexAttribIiv glad_glGetVertexAttribIiv$/;"	d
glGetVertexAttribIuiv	include/glad/glad.h	/^#define glGetVertexAttribIuiv glad_glGetVertexAttribIuiv$/;"	d
glGetVertexAttribPointerv	include/glad/glad.h	/^#define glGetVertexAttribPointerv glad_glGetVertexAttribPointerv$/;"	d
glGetVertexAttribPointerv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribPointerv /;"	d
glGetVertexAttribdv	include/glad/glad.h	/^#define glGetVertexAttribdv glad_glGetVertexAttribdv$/;"	d
glGetVertexAttribfv	include/glad/glad.h	/^#define glGetVertexAttribfv glad_glGetVertexAttribfv$/;"	d
glGetVertexAttribiv	include/glad/glad.h	/^#define glGetVertexAttribiv glad_glGetVertexAttribiv$/;"	d
glGetVertexAttribiv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribiv /;"	d
glHint	include/glad/glad.h	/^#define glHint glad_glHint$/;"	d
glIsBuffer	include/glad/glad.h	/^#define glIsBuffer glad_glIsBuffer$/;"	d
glIsEnabled	include/glad/glad.h	/^#define glIsEnabled glad_glIsEnabled$/;"	d
glIsEnabled	include/imgui/imgui_impl_opengl3_loader.h	/^#define glIsEnabled /;"	d
glIsEnabledi	include/glad/glad.h	/^#define glIsEnabledi glad_glIsEnabledi$/;"	d
glIsFramebuffer	include/glad/glad.h	/^#define glIsFramebuffer glad_glIsFramebuffer$/;"	d
glIsProgram	include/glad/glad.h	/^#define glIsProgram glad_glIsProgram$/;"	d
glIsProgram	include/imgui/imgui_impl_opengl3_loader.h	/^#define glIsProgram /;"	d
glIsQuery	include/glad/glad.h	/^#define glIsQuery glad_glIsQuery$/;"	d
glIsRenderbuffer	include/glad/glad.h	/^#define glIsRenderbuffer glad_glIsRenderbuffer$/;"	d
glIsSampler	include/glad/glad.h	/^#define glIsSampler glad_glIsSampler$/;"	d
glIsShader	include/glad/glad.h	/^#define glIsShader glad_glIsShader$/;"	d
glIsSync	include/glad/glad.h	/^#define glIsSync glad_glIsSync$/;"	d
glIsTexture	include/glad/glad.h	/^#define glIsTexture glad_glIsTexture$/;"	d
glIsVertexArray	include/glad/glad.h	/^#define glIsVertexArray glad_glIsVertexArray$/;"	d
glLineWidth	include/glad/glad.h	/^#define glLineWidth glad_glLineWidth$/;"	d
glLinkProgram	include/glad/glad.h	/^#define glLinkProgram glad_glLinkProgram$/;"	d
glLinkProgram	include/imgui/imgui_impl_opengl3_loader.h	/^#define glLinkProgram /;"	d
glLogicOp	include/glad/glad.h	/^#define glLogicOp glad_glLogicOp$/;"	d
glMapBuffer	include/glad/glad.h	/^#define glMapBuffer glad_glMapBuffer$/;"	d
glMapBufferRange	include/glad/glad.h	/^#define glMapBufferRange glad_glMapBufferRange$/;"	d
glMultiDrawArrays	include/glad/glad.h	/^#define glMultiDrawArrays glad_glMultiDrawArrays$/;"	d
glMultiDrawElements	include/glad/glad.h	/^#define glMultiDrawElements glad_glMultiDrawElements$/;"	d
glMultiDrawElementsBaseVertex	include/glad/glad.h	/^#define glMultiDrawElementsBaseVertex glad_glMultiDrawElementsBaseVertex$/;"	d
glMultiTexCoordP1ui	include/glad/glad.h	/^#define glMultiTexCoordP1ui glad_glMultiTexCoordP1ui$/;"	d
glMultiTexCoordP1uiv	include/glad/glad.h	/^#define glMultiTexCoordP1uiv glad_glMultiTexCoordP1uiv$/;"	d
glMultiTexCoordP2ui	include/glad/glad.h	/^#define glMultiTexCoordP2ui glad_glMultiTexCoordP2ui$/;"	d
glMultiTexCoordP2uiv	include/glad/glad.h	/^#define glMultiTexCoordP2uiv glad_glMultiTexCoordP2uiv$/;"	d
glMultiTexCoordP3ui	include/glad/glad.h	/^#define glMultiTexCoordP3ui glad_glMultiTexCoordP3ui$/;"	d
glMultiTexCoordP3uiv	include/glad/glad.h	/^#define glMultiTexCoordP3uiv glad_glMultiTexCoordP3uiv$/;"	d
glMultiTexCoordP4ui	include/glad/glad.h	/^#define glMultiTexCoordP4ui glad_glMultiTexCoordP4ui$/;"	d
glMultiTexCoordP4uiv	include/glad/glad.h	/^#define glMultiTexCoordP4uiv glad_glMultiTexCoordP4uiv$/;"	d
glNormalP3ui	include/glad/glad.h	/^#define glNormalP3ui glad_glNormalP3ui$/;"	d
glNormalP3uiv	include/glad/glad.h	/^#define glNormalP3uiv glad_glNormalP3uiv$/;"	d
glPixelStoref	include/glad/glad.h	/^#define glPixelStoref glad_glPixelStoref$/;"	d
glPixelStorei	include/glad/glad.h	/^#define glPixelStorei glad_glPixelStorei$/;"	d
glPixelStorei	include/imgui/imgui_impl_opengl3_loader.h	/^#define glPixelStorei /;"	d
glPointParameterf	include/glad/glad.h	/^#define glPointParameterf glad_glPointParameterf$/;"	d
glPointParameterfv	include/glad/glad.h	/^#define glPointParameterfv glad_glPointParameterfv$/;"	d
glPointParameteri	include/glad/glad.h	/^#define glPointParameteri glad_glPointParameteri$/;"	d
glPointParameteriv	include/glad/glad.h	/^#define glPointParameteriv glad_glPointParameteriv$/;"	d
glPointSize	include/glad/glad.h	/^#define glPointSize glad_glPointSize$/;"	d
glPolygonMode	include/glad/glad.h	/^#define glPolygonMode glad_glPolygonMode$/;"	d
glPolygonMode	include/imgui/imgui_impl_opengl3_loader.h	/^#define glPolygonMode /;"	d
glPolygonOffset	include/glad/glad.h	/^#define glPolygonOffset glad_glPolygonOffset$/;"	d
glPrimitiveRestartIndex	include/glad/glad.h	/^#define glPrimitiveRestartIndex glad_glPrimitiveRestartIndex$/;"	d
glProvokingVertex	include/glad/glad.h	/^#define glProvokingVertex glad_glProvokingVertex$/;"	d
glQueryCounter	include/glad/glad.h	/^#define glQueryCounter glad_glQueryCounter$/;"	d
glReadBuffer	include/glad/glad.h	/^#define glReadBuffer glad_glReadBuffer$/;"	d
glReadPixels	include/glad/glad.h	/^#define glReadPixels glad_glReadPixels$/;"	d
glReadPixels	include/imgui/imgui_impl_opengl3_loader.h	/^#define glReadPixels /;"	d
glRenderbufferStorage	include/glad/glad.h	/^#define glRenderbufferStorage glad_glRenderbufferStorage$/;"	d
glRenderbufferStorageMultisample	include/glad/glad.h	/^#define glRenderbufferStorageMultisample glad_glRenderbufferStorageMultisample$/;"	d
glSampleCoverage	include/glad/glad.h	/^#define glSampleCoverage glad_glSampleCoverage$/;"	d
glSampleMaski	include/glad/glad.h	/^#define glSampleMaski glad_glSampleMaski$/;"	d
glSamplerParameterIiv	include/glad/glad.h	/^#define glSamplerParameterIiv glad_glSamplerParameterIiv$/;"	d
glSamplerParameterIuiv	include/glad/glad.h	/^#define glSamplerParameterIuiv glad_glSamplerParameterIuiv$/;"	d
glSamplerParameterf	include/glad/glad.h	/^#define glSamplerParameterf glad_glSamplerParameterf$/;"	d
glSamplerParameterfv	include/glad/glad.h	/^#define glSamplerParameterfv glad_glSamplerParameterfv$/;"	d
glSamplerParameteri	include/glad/glad.h	/^#define glSamplerParameteri glad_glSamplerParameteri$/;"	d
glSamplerParameteriv	include/glad/glad.h	/^#define glSamplerParameteriv glad_glSamplerParameteriv$/;"	d
glScissor	include/glad/glad.h	/^#define glScissor glad_glScissor$/;"	d
glScissor	include/imgui/imgui_impl_opengl3_loader.h	/^#define glScissor /;"	d
glSecondaryColorP3ui	include/glad/glad.h	/^#define glSecondaryColorP3ui glad_glSecondaryColorP3ui$/;"	d
glSecondaryColorP3uiv	include/glad/glad.h	/^#define glSecondaryColorP3uiv glad_glSecondaryColorP3uiv$/;"	d
glShaderSource	include/glad/glad.h	/^#define glShaderSource glad_glShaderSource$/;"	d
glShaderSource	include/imgui/imgui_impl_opengl3_loader.h	/^#define glShaderSource /;"	d
glStencilFunc	include/glad/glad.h	/^#define glStencilFunc glad_glStencilFunc$/;"	d
glStencilFuncSeparate	include/glad/glad.h	/^#define glStencilFuncSeparate glad_glStencilFuncSeparate$/;"	d
glStencilMask	include/glad/glad.h	/^#define glStencilMask glad_glStencilMask$/;"	d
glStencilMaskSeparate	include/glad/glad.h	/^#define glStencilMaskSeparate glad_glStencilMaskSeparate$/;"	d
glStencilOp	include/glad/glad.h	/^#define glStencilOp glad_glStencilOp$/;"	d
glStencilOpSeparate	include/glad/glad.h	/^#define glStencilOpSeparate glad_glStencilOpSeparate$/;"	d
glTexBuffer	include/glad/glad.h	/^#define glTexBuffer glad_glTexBuffer$/;"	d
glTexCoordP1ui	include/glad/glad.h	/^#define glTexCoordP1ui glad_glTexCoordP1ui$/;"	d
glTexCoordP1uiv	include/glad/glad.h	/^#define glTexCoordP1uiv glad_glTexCoordP1uiv$/;"	d
glTexCoordP2ui	include/glad/glad.h	/^#define glTexCoordP2ui glad_glTexCoordP2ui$/;"	d
glTexCoordP2uiv	include/glad/glad.h	/^#define glTexCoordP2uiv glad_glTexCoordP2uiv$/;"	d
glTexCoordP3ui	include/glad/glad.h	/^#define glTexCoordP3ui glad_glTexCoordP3ui$/;"	d
glTexCoordP3uiv	include/glad/glad.h	/^#define glTexCoordP3uiv glad_glTexCoordP3uiv$/;"	d
glTexCoordP4ui	include/glad/glad.h	/^#define glTexCoordP4ui glad_glTexCoordP4ui$/;"	d
glTexCoordP4uiv	include/glad/glad.h	/^#define glTexCoordP4uiv glad_glTexCoordP4uiv$/;"	d
glTexImage1D	include/glad/glad.h	/^#define glTexImage1D glad_glTexImage1D$/;"	d
glTexImage2D	include/glad/glad.h	/^#define glTexImage2D glad_glTexImage2D$/;"	d
glTexImage2D	include/imgui/imgui_impl_opengl3_loader.h	/^#define glTexImage2D /;"	d
glTexImage2DMultisample	include/glad/glad.h	/^#define glTexImage2DMultisample glad_glTexImage2DMultisample$/;"	d
glTexImage3D	include/glad/glad.h	/^#define glTexImage3D glad_glTexImage3D$/;"	d
glTexImage3DMultisample	include/glad/glad.h	/^#define glTexImage3DMultisample glad_glTexImage3DMultisample$/;"	d
glTexParameterIiv	include/glad/glad.h	/^#define glTexParameterIiv glad_glTexParameterIiv$/;"	d
glTexParameterIuiv	include/glad/glad.h	/^#define glTexParameterIuiv glad_glTexParameterIuiv$/;"	d
glTexParameterf	include/glad/glad.h	/^#define glTexParameterf glad_glTexParameterf$/;"	d
glTexParameterfv	include/glad/glad.h	/^#define glTexParameterfv glad_glTexParameterfv$/;"	d
glTexParameteri	include/glad/glad.h	/^#define glTexParameteri glad_glTexParameteri$/;"	d
glTexParameteri	include/imgui/imgui_impl_opengl3_loader.h	/^#define glTexParameteri /;"	d
glTexParameteriv	include/glad/glad.h	/^#define glTexParameteriv glad_glTexParameteriv$/;"	d
glTexSubImage1D	include/glad/glad.h	/^#define glTexSubImage1D glad_glTexSubImage1D$/;"	d
glTexSubImage2D	include/glad/glad.h	/^#define glTexSubImage2D glad_glTexSubImage2D$/;"	d
glTexSubImage3D	include/glad/glad.h	/^#define glTexSubImage3D glad_glTexSubImage3D$/;"	d
glTransformFeedbackVaryings	include/glad/glad.h	/^#define glTransformFeedbackVaryings glad_glTransformFeedbackVaryings$/;"	d
glUniform1f	include/glad/glad.h	/^#define glUniform1f glad_glUniform1f$/;"	d
glUniform1fv	include/glad/glad.h	/^#define glUniform1fv glad_glUniform1fv$/;"	d
glUniform1i	include/glad/glad.h	/^#define glUniform1i glad_glUniform1i$/;"	d
glUniform1i	include/imgui/imgui_impl_opengl3_loader.h	/^#define glUniform1i /;"	d
glUniform1iv	include/glad/glad.h	/^#define glUniform1iv glad_glUniform1iv$/;"	d
glUniform1ui	include/glad/glad.h	/^#define glUniform1ui glad_glUniform1ui$/;"	d
glUniform1uiv	include/glad/glad.h	/^#define glUniform1uiv glad_glUniform1uiv$/;"	d
glUniform2f	include/glad/glad.h	/^#define glUniform2f glad_glUniform2f$/;"	d
glUniform2fv	include/glad/glad.h	/^#define glUniform2fv glad_glUniform2fv$/;"	d
glUniform2i	include/glad/glad.h	/^#define glUniform2i glad_glUniform2i$/;"	d
glUniform2iv	include/glad/glad.h	/^#define glUniform2iv glad_glUniform2iv$/;"	d
glUniform2ui	include/glad/glad.h	/^#define glUniform2ui glad_glUniform2ui$/;"	d
glUniform2uiv	include/glad/glad.h	/^#define glUniform2uiv glad_glUniform2uiv$/;"	d
glUniform3f	include/glad/glad.h	/^#define glUniform3f glad_glUniform3f$/;"	d
glUniform3fv	include/glad/glad.h	/^#define glUniform3fv glad_glUniform3fv$/;"	d
glUniform3i	include/glad/glad.h	/^#define glUniform3i glad_glUniform3i$/;"	d
glUniform3iv	include/glad/glad.h	/^#define glUniform3iv glad_glUniform3iv$/;"	d
glUniform3ui	include/glad/glad.h	/^#define glUniform3ui glad_glUniform3ui$/;"	d
glUniform3uiv	include/glad/glad.h	/^#define glUniform3uiv glad_glUniform3uiv$/;"	d
glUniform4f	include/glad/glad.h	/^#define glUniform4f glad_glUniform4f$/;"	d
glUniform4fv	include/glad/glad.h	/^#define glUniform4fv glad_glUniform4fv$/;"	d
glUniform4i	include/glad/glad.h	/^#define glUniform4i glad_glUniform4i$/;"	d
glUniform4iv	include/glad/glad.h	/^#define glUniform4iv glad_glUniform4iv$/;"	d
glUniform4ui	include/glad/glad.h	/^#define glUniform4ui glad_glUniform4ui$/;"	d
glUniform4uiv	include/glad/glad.h	/^#define glUniform4uiv glad_glUniform4uiv$/;"	d
glUniformBlockBinding	include/glad/glad.h	/^#define glUniformBlockBinding glad_glUniformBlockBinding$/;"	d
glUniformMatrix2fv	include/glad/glad.h	/^#define glUniformMatrix2fv glad_glUniformMatrix2fv$/;"	d
glUniformMatrix2x3fv	include/glad/glad.h	/^#define glUniformMatrix2x3fv glad_glUniformMatrix2x3fv$/;"	d
glUniformMatrix2x4fv	include/glad/glad.h	/^#define glUniformMatrix2x4fv glad_glUniformMatrix2x4fv$/;"	d
glUniformMatrix3fv	include/glad/glad.h	/^#define glUniformMatrix3fv glad_glUniformMatrix3fv$/;"	d
glUniformMatrix3x2fv	include/glad/glad.h	/^#define glUniformMatrix3x2fv glad_glUniformMatrix3x2fv$/;"	d
glUniformMatrix3x4fv	include/glad/glad.h	/^#define glUniformMatrix3x4fv glad_glUniformMatrix3x4fv$/;"	d
glUniformMatrix4fv	include/glad/glad.h	/^#define glUniformMatrix4fv glad_glUniformMatrix4fv$/;"	d
glUniformMatrix4fv	include/imgui/imgui_impl_opengl3_loader.h	/^#define glUniformMatrix4fv /;"	d
glUniformMatrix4x2fv	include/glad/glad.h	/^#define glUniformMatrix4x2fv glad_glUniformMatrix4x2fv$/;"	d
glUniformMatrix4x3fv	include/glad/glad.h	/^#define glUniformMatrix4x3fv glad_glUniformMatrix4x3fv$/;"	d
glUnmapBuffer	include/glad/glad.h	/^#define glUnmapBuffer glad_glUnmapBuffer$/;"	d
glUseProgram	include/glad/glad.h	/^#define glUseProgram glad_glUseProgram$/;"	d
glUseProgram	include/imgui/imgui_impl_opengl3_loader.h	/^#define glUseProgram /;"	d
glValidateProgram	include/glad/glad.h	/^#define glValidateProgram glad_glValidateProgram$/;"	d
glVertexAttrib1d	include/glad/glad.h	/^#define glVertexAttrib1d glad_glVertexAttrib1d$/;"	d
glVertexAttrib1dv	include/glad/glad.h	/^#define glVertexAttrib1dv glad_glVertexAttrib1dv$/;"	d
glVertexAttrib1f	include/glad/glad.h	/^#define glVertexAttrib1f glad_glVertexAttrib1f$/;"	d
glVertexAttrib1fv	include/glad/glad.h	/^#define glVertexAttrib1fv glad_glVertexAttrib1fv$/;"	d
glVertexAttrib1s	include/glad/glad.h	/^#define glVertexAttrib1s glad_glVertexAttrib1s$/;"	d
glVertexAttrib1sv	include/glad/glad.h	/^#define glVertexAttrib1sv glad_glVertexAttrib1sv$/;"	d
glVertexAttrib2d	include/glad/glad.h	/^#define glVertexAttrib2d glad_glVertexAttrib2d$/;"	d
glVertexAttrib2dv	include/glad/glad.h	/^#define glVertexAttrib2dv glad_glVertexAttrib2dv$/;"	d
glVertexAttrib2f	include/glad/glad.h	/^#define glVertexAttrib2f glad_glVertexAttrib2f$/;"	d
glVertexAttrib2fv	include/glad/glad.h	/^#define glVertexAttrib2fv glad_glVertexAttrib2fv$/;"	d
glVertexAttrib2s	include/glad/glad.h	/^#define glVertexAttrib2s glad_glVertexAttrib2s$/;"	d
glVertexAttrib2sv	include/glad/glad.h	/^#define glVertexAttrib2sv glad_glVertexAttrib2sv$/;"	d
glVertexAttrib3d	include/glad/glad.h	/^#define glVertexAttrib3d glad_glVertexAttrib3d$/;"	d
glVertexAttrib3dv	include/glad/glad.h	/^#define glVertexAttrib3dv glad_glVertexAttrib3dv$/;"	d
glVertexAttrib3f	include/glad/glad.h	/^#define glVertexAttrib3f glad_glVertexAttrib3f$/;"	d
glVertexAttrib3fv	include/glad/glad.h	/^#define glVertexAttrib3fv glad_glVertexAttrib3fv$/;"	d
glVertexAttrib3s	include/glad/glad.h	/^#define glVertexAttrib3s glad_glVertexAttrib3s$/;"	d
glVertexAttrib3sv	include/glad/glad.h	/^#define glVertexAttrib3sv glad_glVertexAttrib3sv$/;"	d
glVertexAttrib4Nbv	include/glad/glad.h	/^#define glVertexAttrib4Nbv glad_glVertexAttrib4Nbv$/;"	d
glVertexAttrib4Niv	include/glad/glad.h	/^#define glVertexAttrib4Niv glad_glVertexAttrib4Niv$/;"	d
glVertexAttrib4Nsv	include/glad/glad.h	/^#define glVertexAttrib4Nsv glad_glVertexAttrib4Nsv$/;"	d
glVertexAttrib4Nub	include/glad/glad.h	/^#define glVertexAttrib4Nub glad_glVertexAttrib4Nub$/;"	d
glVertexAttrib4Nubv	include/glad/glad.h	/^#define glVertexAttrib4Nubv glad_glVertexAttrib4Nubv$/;"	d
glVertexAttrib4Nuiv	include/glad/glad.h	/^#define glVertexAttrib4Nuiv glad_glVertexAttrib4Nuiv$/;"	d
glVertexAttrib4Nusv	include/glad/glad.h	/^#define glVertexAttrib4Nusv glad_glVertexAttrib4Nusv$/;"	d
glVertexAttrib4bv	include/glad/glad.h	/^#define glVertexAttrib4bv glad_glVertexAttrib4bv$/;"	d
glVertexAttrib4d	include/glad/glad.h	/^#define glVertexAttrib4d glad_glVertexAttrib4d$/;"	d
glVertexAttrib4dv	include/glad/glad.h	/^#define glVertexAttrib4dv glad_glVertexAttrib4dv$/;"	d
glVertexAttrib4f	include/glad/glad.h	/^#define glVertexAttrib4f glad_glVertexAttrib4f$/;"	d
glVertexAttrib4fv	include/glad/glad.h	/^#define glVertexAttrib4fv glad_glVertexAttrib4fv$/;"	d
glVertexAttrib4iv	include/glad/glad.h	/^#define glVertexAttrib4iv glad_glVertexAttrib4iv$/;"	d
glVertexAttrib4s	include/glad/glad.h	/^#define glVertexAttrib4s glad_glVertexAttrib4s$/;"	d
glVertexAttrib4sv	include/glad/glad.h	/^#define glVertexAttrib4sv glad_glVertexAttrib4sv$/;"	d
glVertexAttrib4ubv	include/glad/glad.h	/^#define glVertexAttrib4ubv glad_glVertexAttrib4ubv$/;"	d
glVertexAttrib4uiv	include/glad/glad.h	/^#define glVertexAttrib4uiv glad_glVertexAttrib4uiv$/;"	d
glVertexAttrib4usv	include/glad/glad.h	/^#define glVertexAttrib4usv glad_glVertexAttrib4usv$/;"	d
glVertexAttribDivisor	include/glad/glad.h	/^#define glVertexAttribDivisor glad_glVertexAttribDivisor$/;"	d
glVertexAttribI1i	include/glad/glad.h	/^#define glVertexAttribI1i glad_glVertexAttribI1i$/;"	d
glVertexAttribI1iv	include/glad/glad.h	/^#define glVertexAttribI1iv glad_glVertexAttribI1iv$/;"	d
glVertexAttribI1ui	include/glad/glad.h	/^#define glVertexAttribI1ui glad_glVertexAttribI1ui$/;"	d
glVertexAttribI1uiv	include/glad/glad.h	/^#define glVertexAttribI1uiv glad_glVertexAttribI1uiv$/;"	d
glVertexAttribI2i	include/glad/glad.h	/^#define glVertexAttribI2i glad_glVertexAttribI2i$/;"	d
glVertexAttribI2iv	include/glad/glad.h	/^#define glVertexAttribI2iv glad_glVertexAttribI2iv$/;"	d
glVertexAttribI2ui	include/glad/glad.h	/^#define glVertexAttribI2ui glad_glVertexAttribI2ui$/;"	d
glVertexAttribI2uiv	include/glad/glad.h	/^#define glVertexAttribI2uiv glad_glVertexAttribI2uiv$/;"	d
glVertexAttribI3i	include/glad/glad.h	/^#define glVertexAttribI3i glad_glVertexAttribI3i$/;"	d
glVertexAttribI3iv	include/glad/glad.h	/^#define glVertexAttribI3iv glad_glVertexAttribI3iv$/;"	d
glVertexAttribI3ui	include/glad/glad.h	/^#define glVertexAttribI3ui glad_glVertexAttribI3ui$/;"	d
glVertexAttribI3uiv	include/glad/glad.h	/^#define glVertexAttribI3uiv glad_glVertexAttribI3uiv$/;"	d
glVertexAttribI4bv	include/glad/glad.h	/^#define glVertexAttribI4bv glad_glVertexAttribI4bv$/;"	d
glVertexAttribI4i	include/glad/glad.h	/^#define glVertexAttribI4i glad_glVertexAttribI4i$/;"	d
glVertexAttribI4iv	include/glad/glad.h	/^#define glVertexAttribI4iv glad_glVertexAttribI4iv$/;"	d
glVertexAttribI4sv	include/glad/glad.h	/^#define glVertexAttribI4sv glad_glVertexAttribI4sv$/;"	d
glVertexAttribI4ubv	include/glad/glad.h	/^#define glVertexAttribI4ubv glad_glVertexAttribI4ubv$/;"	d
glVertexAttribI4ui	include/glad/glad.h	/^#define glVertexAttribI4ui glad_glVertexAttribI4ui$/;"	d
glVertexAttribI4uiv	include/glad/glad.h	/^#define glVertexAttribI4uiv glad_glVertexAttribI4uiv$/;"	d
glVertexAttribI4usv	include/glad/glad.h	/^#define glVertexAttribI4usv glad_glVertexAttribI4usv$/;"	d
glVertexAttribIPointer	include/glad/glad.h	/^#define glVertexAttribIPointer glad_glVertexAttribIPointer$/;"	d
glVertexAttribP1ui	include/glad/glad.h	/^#define glVertexAttribP1ui glad_glVertexAttribP1ui$/;"	d
glVertexAttribP1uiv	include/glad/glad.h	/^#define glVertexAttribP1uiv glad_glVertexAttribP1uiv$/;"	d
glVertexAttribP2ui	include/glad/glad.h	/^#define glVertexAttribP2ui glad_glVertexAttribP2ui$/;"	d
glVertexAttribP2uiv	include/glad/glad.h	/^#define glVertexAttribP2uiv glad_glVertexAttribP2uiv$/;"	d
glVertexAttribP3ui	include/glad/glad.h	/^#define glVertexAttribP3ui glad_glVertexAttribP3ui$/;"	d
glVertexAttribP3uiv	include/glad/glad.h	/^#define glVertexAttribP3uiv glad_glVertexAttribP3uiv$/;"	d
glVertexAttribP4ui	include/glad/glad.h	/^#define glVertexAttribP4ui glad_glVertexAttribP4ui$/;"	d
glVertexAttribP4uiv	include/glad/glad.h	/^#define glVertexAttribP4uiv glad_glVertexAttribP4uiv$/;"	d
glVertexAttribPointer	include/glad/glad.h	/^#define glVertexAttribPointer glad_glVertexAttribPointer$/;"	d
glVertexAttribPointer	include/imgui/imgui_impl_opengl3_loader.h	/^#define glVertexAttribPointer /;"	d
glVertexP2ui	include/glad/glad.h	/^#define glVertexP2ui glad_glVertexP2ui$/;"	d
glVertexP2uiv	include/glad/glad.h	/^#define glVertexP2uiv glad_glVertexP2uiv$/;"	d
glVertexP3ui	include/glad/glad.h	/^#define glVertexP3ui glad_glVertexP3ui$/;"	d
glVertexP3uiv	include/glad/glad.h	/^#define glVertexP3uiv glad_glVertexP3uiv$/;"	d
glVertexP4ui	include/glad/glad.h	/^#define glVertexP4ui glad_glVertexP4ui$/;"	d
glVertexP4uiv	include/glad/glad.h	/^#define glVertexP4uiv glad_glVertexP4uiv$/;"	d
glViewport	include/glad/glad.h	/^#define glViewport glad_glViewport$/;"	d
glViewport	include/imgui/imgui_impl_opengl3_loader.h	/^#define glViewport /;"	d
glWaitSync	include/glad/glad.h	/^#define glWaitSync glad_glWaitSync$/;"	d
glad.c.i	Makefile	/^glad.c.i:$/;"	t
glad.c.i	cmake-build/Makefile	/^glad.c.i:$/;"	t
glad.c.o	Makefile	/^glad.c.o:$/;"	t
glad.c.o	cmake-build/Makefile	/^glad.c.o:$/;"	t
glad.c.s	Makefile	/^glad.c.s:$/;"	t
glad.c.s	cmake-build/Makefile	/^glad.c.s:$/;"	t
glad.i	Makefile	/^glad.i: glad.c.i$/;"	t
glad.i	cmake-build/Makefile	/^glad.i: glad.c.i$/;"	t
glad.o	Makefile	/^glad.o: glad.c.o$/;"	t
glad.o	cmake-build/Makefile	/^glad.o: glad.c.o$/;"	t
glad.s	Makefile	/^glad.s: glad.c.s$/;"	t
glad.s	cmake-build/Makefile	/^glad.s: glad.c.s$/;"	t
gladGLversionStruct	include/glad/glad.h	/^struct gladGLversionStruct {$/;"	s
gladGetProcAddressPtr	glad.c	/^static PFNGLXGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	typeref:typename:PFNGLXGETPROCADDRESSPROC_PRIVATE	file:
gladGetProcAddressPtr	glad.c	/^static PFNWGLGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	typeref:typename:PFNWGLGETPROCADDRESSPROC_PRIVATE	file:
gladLoadGL	glad.c	/^int gladLoadGL(void) {$/;"	f	typeref:typename:int
gladLoadGLLoader	glad.c	/^int gladLoadGLLoader(GLADloadproc load) {$/;"	f	typeref:typename:int
glad_glActiveTexture	glad.c	/^PFNGLACTIVETEXTUREPROC glad_glActiveTexture = NULL;$/;"	v	typeref:typename:PFNGLACTIVETEXTUREPROC
glad_glActiveTexture	include/glad/glad.h	/^GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;$/;"	v	typeref:typename:GLAPI PFNGLACTIVETEXTUREPROC
glad_glAttachShader	glad.c	/^PFNGLATTACHSHADERPROC glad_glAttachShader = NULL;$/;"	v	typeref:typename:PFNGLATTACHSHADERPROC
glad_glAttachShader	include/glad/glad.h	/^GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;$/;"	v	typeref:typename:GLAPI PFNGLATTACHSHADERPROC
glad_glBeginConditionalRender	glad.c	/^PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = NULL;$/;"	v	typeref:typename:PFNGLBEGINCONDITIONALRENDERPROC
glad_glBeginConditionalRender	include/glad/glad.h	/^GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;$/;"	v	typeref:typename:GLAPI PFNGLBEGINCONDITIONALRENDERPROC
glad_glBeginQuery	glad.c	/^PFNGLBEGINQUERYPROC glad_glBeginQuery = NULL;$/;"	v	typeref:typename:PFNGLBEGINQUERYPROC
glad_glBeginQuery	include/glad/glad.h	/^GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;$/;"	v	typeref:typename:GLAPI PFNGLBEGINQUERYPROC
glad_glBeginTransformFeedback	glad.c	/^PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLBEGINTRANSFORMFEEDBACKPROC
glad_glBeginTransformFeedback	include/glad/glad.h	/^GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;$/;"	v	typeref:typename:GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC
glad_glBindAttribLocation	glad.c	/^PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = NULL;$/;"	v	typeref:typename:PFNGLBINDATTRIBLOCATIONPROC
glad_glBindAttribLocation	include/glad/glad.h	/^GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;$/;"	v	typeref:typename:GLAPI PFNGLBINDATTRIBLOCATIONPROC
glad_glBindBuffer	glad.c	/^PFNGLBINDBUFFERPROC glad_glBindBuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERPROC
glad_glBindBuffer	include/glad/glad.h	/^GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;$/;"	v	typeref:typename:GLAPI PFNGLBINDBUFFERPROC
glad_glBindBufferBase	glad.c	/^PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERBASEPROC
glad_glBindBufferBase	include/glad/glad.h	/^GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;$/;"	v	typeref:typename:GLAPI PFNGLBINDBUFFERBASEPROC
glad_glBindBufferRange	glad.c	/^PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERRANGEPROC
glad_glBindBufferRange	include/glad/glad.h	/^GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;$/;"	v	typeref:typename:GLAPI PFNGLBINDBUFFERRANGEPROC
glad_glBindFragDataLocation	glad.c	/^PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONPROC
glad_glBindFragDataLocation	include/glad/glad.h	/^GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;$/;"	v	typeref:typename:GLAPI PFNGLBINDFRAGDATALOCATIONPROC
glad_glBindFragDataLocationIndexed	glad.c	/^PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
glad_glBindFragDataLocationIndexed	include/glad/glad.h	/^GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;$/;"	v	typeref:typename:GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
glad_glBindFramebuffer	glad.c	/^PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAMEBUFFERPROC
glad_glBindFramebuffer	include/glad/glad.h	/^GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;$/;"	v	typeref:typename:GLAPI PFNGLBINDFRAMEBUFFERPROC
glad_glBindRenderbuffer	glad.c	/^PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDRENDERBUFFERPROC
glad_glBindRenderbuffer	include/glad/glad.h	/^GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;$/;"	v	typeref:typename:GLAPI PFNGLBINDRENDERBUFFERPROC
glad_glBindSampler	glad.c	/^PFNGLBINDSAMPLERPROC glad_glBindSampler = NULL;$/;"	v	typeref:typename:PFNGLBINDSAMPLERPROC
glad_glBindSampler	include/glad/glad.h	/^GLAPI PFNGLBINDSAMPLERPROC glad_glBindSampler;$/;"	v	typeref:typename:GLAPI PFNGLBINDSAMPLERPROC
glad_glBindTexture	glad.c	/^PFNGLBINDTEXTUREPROC glad_glBindTexture = NULL;$/;"	v	typeref:typename:PFNGLBINDTEXTUREPROC
glad_glBindTexture	include/glad/glad.h	/^GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;$/;"	v	typeref:typename:GLAPI PFNGLBINDTEXTUREPROC
glad_glBindVertexArray	glad.c	/^PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYPROC
glad_glBindVertexArray	include/glad/glad.h	/^GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;$/;"	v	typeref:typename:GLAPI PFNGLBINDVERTEXARRAYPROC
glad_glBlendColor	glad.c	/^PFNGLBLENDCOLORPROC glad_glBlendColor = NULL;$/;"	v	typeref:typename:PFNGLBLENDCOLORPROC
glad_glBlendColor	include/glad/glad.h	/^GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;$/;"	v	typeref:typename:GLAPI PFNGLBLENDCOLORPROC
glad_glBlendEquation	glad.c	/^PFNGLBLENDEQUATIONPROC glad_glBlendEquation = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONPROC
glad_glBlendEquation	include/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;$/;"	v	typeref:typename:GLAPI PFNGLBLENDEQUATIONPROC
glad_glBlendEquationSeparate	glad.c	/^PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
glad_glBlendEquationSeparate	include/glad/glad.h	/^GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;$/;"	v	typeref:typename:GLAPI PFNGLBLENDEQUATIONSEPARATEPROC
glad_glBlendFunc	glad.c	/^PFNGLBLENDFUNCPROC glad_glBlendFunc = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCPROC
glad_glBlendFunc	include/glad/glad.h	/^GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;$/;"	v	typeref:typename:GLAPI PFNGLBLENDFUNCPROC
glad_glBlendFuncSeparate	glad.c	/^PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
glad_glBlendFuncSeparate	include/glad/glad.h	/^GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;$/;"	v	typeref:typename:GLAPI PFNGLBLENDFUNCSEPARATEPROC
glad_glBlitFramebuffer	glad.c	/^PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLBLITFRAMEBUFFERPROC
glad_glBlitFramebuffer	include/glad/glad.h	/^GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;$/;"	v	typeref:typename:GLAPI PFNGLBLITFRAMEBUFFERPROC
glad_glBufferData	glad.c	/^PFNGLBUFFERDATAPROC glad_glBufferData = NULL;$/;"	v	typeref:typename:PFNGLBUFFERDATAPROC
glad_glBufferData	include/glad/glad.h	/^GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;$/;"	v	typeref:typename:GLAPI PFNGLBUFFERDATAPROC
glad_glBufferSubData	glad.c	/^PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLBUFFERSUBDATAPROC
glad_glBufferSubData	include/glad/glad.h	/^GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;$/;"	v	typeref:typename:GLAPI PFNGLBUFFERSUBDATAPROC
glad_glCheckFramebufferStatus	glad.c	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = NULL;$/;"	v	typeref:typename:PFNGLCHECKFRAMEBUFFERSTATUSPROC
glad_glCheckFramebufferStatus	include/glad/glad.h	/^GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;$/;"	v	typeref:typename:GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC
glad_glClampColor	glad.c	/^PFNGLCLAMPCOLORPROC glad_glClampColor = NULL;$/;"	v	typeref:typename:PFNGLCLAMPCOLORPROC
glad_glClampColor	include/glad/glad.h	/^GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;$/;"	v	typeref:typename:GLAPI PFNGLCLAMPCOLORPROC
glad_glClear	glad.c	/^PFNGLCLEARPROC glad_glClear = NULL;$/;"	v	typeref:typename:PFNGLCLEARPROC
glad_glClear	include/glad/glad.h	/^GLAPI PFNGLCLEARPROC glad_glClear;$/;"	v	typeref:typename:GLAPI PFNGLCLEARPROC
glad_glClearBufferfi	glad.c	/^PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFIPROC
glad_glClearBufferfi	include/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;$/;"	v	typeref:typename:GLAPI PFNGLCLEARBUFFERFIPROC
glad_glClearBufferfv	glad.c	/^PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFVPROC
glad_glClearBufferfv	include/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;$/;"	v	typeref:typename:GLAPI PFNGLCLEARBUFFERFVPROC
glad_glClearBufferiv	glad.c	/^PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERIVPROC
glad_glClearBufferiv	include/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;$/;"	v	typeref:typename:GLAPI PFNGLCLEARBUFFERIVPROC
glad_glClearBufferuiv	glad.c	/^PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERUIVPROC
glad_glClearBufferuiv	include/glad/glad.h	/^GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;$/;"	v	typeref:typename:GLAPI PFNGLCLEARBUFFERUIVPROC
glad_glClearColor	glad.c	/^PFNGLCLEARCOLORPROC glad_glClearColor = NULL;$/;"	v	typeref:typename:PFNGLCLEARCOLORPROC
glad_glClearColor	include/glad/glad.h	/^GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;$/;"	v	typeref:typename:GLAPI PFNGLCLEARCOLORPROC
glad_glClearDepth	glad.c	/^PFNGLCLEARDEPTHPROC glad_glClearDepth = NULL;$/;"	v	typeref:typename:PFNGLCLEARDEPTHPROC
glad_glClearDepth	include/glad/glad.h	/^GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;$/;"	v	typeref:typename:GLAPI PFNGLCLEARDEPTHPROC
glad_glClearStencil	glad.c	/^PFNGLCLEARSTENCILPROC glad_glClearStencil = NULL;$/;"	v	typeref:typename:PFNGLCLEARSTENCILPROC
glad_glClearStencil	include/glad/glad.h	/^GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;$/;"	v	typeref:typename:GLAPI PFNGLCLEARSTENCILPROC
glad_glClientWaitSync	glad.c	/^PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = NULL;$/;"	v	typeref:typename:PFNGLCLIENTWAITSYNCPROC
glad_glClientWaitSync	include/glad/glad.h	/^GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;$/;"	v	typeref:typename:GLAPI PFNGLCLIENTWAITSYNCPROC
glad_glColorMask	glad.c	/^PFNGLCOLORMASKPROC glad_glColorMask = NULL;$/;"	v	typeref:typename:PFNGLCOLORMASKPROC
glad_glColorMask	include/glad/glad.h	/^GLAPI PFNGLCOLORMASKPROC glad_glColorMask;$/;"	v	typeref:typename:GLAPI PFNGLCOLORMASKPROC
glad_glColorMaski	glad.c	/^PFNGLCOLORMASKIPROC glad_glColorMaski = NULL;$/;"	v	typeref:typename:PFNGLCOLORMASKIPROC
glad_glColorMaski	include/glad/glad.h	/^GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;$/;"	v	typeref:typename:GLAPI PFNGLCOLORMASKIPROC
glad_glColorP3ui	glad.c	/^PFNGLCOLORP3UIPROC glad_glColorP3ui = NULL;$/;"	v	typeref:typename:PFNGLCOLORP3UIPROC
glad_glColorP3ui	include/glad/glad.h	/^GLAPI PFNGLCOLORP3UIPROC glad_glColorP3ui;$/;"	v	typeref:typename:GLAPI PFNGLCOLORP3UIPROC
glad_glColorP3uiv	glad.c	/^PFNGLCOLORP3UIVPROC glad_glColorP3uiv = NULL;$/;"	v	typeref:typename:PFNGLCOLORP3UIVPROC
glad_glColorP3uiv	include/glad/glad.h	/^GLAPI PFNGLCOLORP3UIVPROC glad_glColorP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLCOLORP3UIVPROC
glad_glColorP4ui	glad.c	/^PFNGLCOLORP4UIPROC glad_glColorP4ui = NULL;$/;"	v	typeref:typename:PFNGLCOLORP4UIPROC
glad_glColorP4ui	include/glad/glad.h	/^GLAPI PFNGLCOLORP4UIPROC glad_glColorP4ui;$/;"	v	typeref:typename:GLAPI PFNGLCOLORP4UIPROC
glad_glColorP4uiv	glad.c	/^PFNGLCOLORP4UIVPROC glad_glColorP4uiv = NULL;$/;"	v	typeref:typename:PFNGLCOLORP4UIVPROC
glad_glColorP4uiv	include/glad/glad.h	/^GLAPI PFNGLCOLORP4UIVPROC glad_glColorP4uiv;$/;"	v	typeref:typename:GLAPI PFNGLCOLORP4UIVPROC
glad_glCompileShader	glad.c	/^PFNGLCOMPILESHADERPROC glad_glCompileShader = NULL;$/;"	v	typeref:typename:PFNGLCOMPILESHADERPROC
glad_glCompileShader	include/glad/glad.h	/^GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;$/;"	v	typeref:typename:GLAPI PFNGLCOMPILESHADERPROC
glad_glCompressedTexImage1D	glad.c	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE1DPROC
glad_glCompressedTexImage1D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC
glad_glCompressedTexImage2D	glad.c	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE2DPROC
glad_glCompressedTexImage2D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC
glad_glCompressedTexImage3D	glad.c	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE3DPROC
glad_glCompressedTexImage3D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC
glad_glCompressedTexSubImage1D	glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
glad_glCompressedTexSubImage1D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
glad_glCompressedTexSubImage2D	glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
glad_glCompressedTexSubImage2D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
glad_glCompressedTexSubImage3D	glad.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
glad_glCompressedTexSubImage3D	include/glad/glad.h	/^GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;$/;"	v	typeref:typename:GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
glad_glCopyBufferSubData	glad.c	/^PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLCOPYBUFFERSUBDATAPROC
glad_glCopyBufferSubData	include/glad/glad.h	/^GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;$/;"	v	typeref:typename:GLAPI PFNGLCOPYBUFFERSUBDATAPROC
glad_glCopyTexImage1D	glad.c	/^PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE1DPROC
glad_glCopyTexImage1D	include/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;$/;"	v	typeref:typename:GLAPI PFNGLCOPYTEXIMAGE1DPROC
glad_glCopyTexImage2D	glad.c	/^PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE2DPROC
glad_glCopyTexImage2D	include/glad/glad.h	/^GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;$/;"	v	typeref:typename:GLAPI PFNGLCOPYTEXIMAGE2DPROC
glad_glCopyTexSubImage1D	glad.c	/^PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE1DPROC
glad_glCopyTexSubImage1D	include/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;$/;"	v	typeref:typename:GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC
glad_glCopyTexSubImage2D	glad.c	/^PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE2DPROC
glad_glCopyTexSubImage2D	include/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;$/;"	v	typeref:typename:GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC
glad_glCopyTexSubImage3D	glad.c	/^PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE3DPROC
glad_glCopyTexSubImage3D	include/glad/glad.h	/^GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;$/;"	v	typeref:typename:GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC
glad_glCreateProgram	glad.c	/^PFNGLCREATEPROGRAMPROC glad_glCreateProgram = NULL;$/;"	v	typeref:typename:PFNGLCREATEPROGRAMPROC
glad_glCreateProgram	include/glad/glad.h	/^GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;$/;"	v	typeref:typename:GLAPI PFNGLCREATEPROGRAMPROC
glad_glCreateShader	glad.c	/^PFNGLCREATESHADERPROC glad_glCreateShader = NULL;$/;"	v	typeref:typename:PFNGLCREATESHADERPROC
glad_glCreateShader	include/glad/glad.h	/^GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;$/;"	v	typeref:typename:GLAPI PFNGLCREATESHADERPROC
glad_glCullFace	glad.c	/^PFNGLCULLFACEPROC glad_glCullFace = NULL;$/;"	v	typeref:typename:PFNGLCULLFACEPROC
glad_glCullFace	include/glad/glad.h	/^GLAPI PFNGLCULLFACEPROC glad_glCullFace;$/;"	v	typeref:typename:GLAPI PFNGLCULLFACEPROC
glad_glDeleteBuffers	glad.c	/^PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETEBUFFERSPROC
glad_glDeleteBuffers	include/glad/glad.h	/^GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;$/;"	v	typeref:typename:GLAPI PFNGLDELETEBUFFERSPROC
glad_glDeleteFramebuffers	glad.c	/^PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETEFRAMEBUFFERSPROC
glad_glDeleteFramebuffers	include/glad/glad.h	/^GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;$/;"	v	typeref:typename:GLAPI PFNGLDELETEFRAMEBUFFERSPROC
glad_glDeleteProgram	glad.c	/^PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = NULL;$/;"	v	typeref:typename:PFNGLDELETEPROGRAMPROC
glad_glDeleteProgram	include/glad/glad.h	/^GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;$/;"	v	typeref:typename:GLAPI PFNGLDELETEPROGRAMPROC
glad_glDeleteQueries	glad.c	/^PFNGLDELETEQUERIESPROC glad_glDeleteQueries = NULL;$/;"	v	typeref:typename:PFNGLDELETEQUERIESPROC
glad_glDeleteQueries	include/glad/glad.h	/^GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;$/;"	v	typeref:typename:GLAPI PFNGLDELETEQUERIESPROC
glad_glDeleteRenderbuffers	glad.c	/^PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETERENDERBUFFERSPROC
glad_glDeleteRenderbuffers	include/glad/glad.h	/^GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;$/;"	v	typeref:typename:GLAPI PFNGLDELETERENDERBUFFERSPROC
glad_glDeleteSamplers	glad.c	/^PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = NULL;$/;"	v	typeref:typename:PFNGLDELETESAMPLERSPROC
glad_glDeleteSamplers	include/glad/glad.h	/^GLAPI PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;$/;"	v	typeref:typename:GLAPI PFNGLDELETESAMPLERSPROC
glad_glDeleteShader	glad.c	/^PFNGLDELETESHADERPROC glad_glDeleteShader = NULL;$/;"	v	typeref:typename:PFNGLDELETESHADERPROC
glad_glDeleteShader	include/glad/glad.h	/^GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;$/;"	v	typeref:typename:GLAPI PFNGLDELETESHADERPROC
glad_glDeleteSync	glad.c	/^PFNGLDELETESYNCPROC glad_glDeleteSync = NULL;$/;"	v	typeref:typename:PFNGLDELETESYNCPROC
glad_glDeleteSync	include/glad/glad.h	/^GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;$/;"	v	typeref:typename:GLAPI PFNGLDELETESYNCPROC
glad_glDeleteTextures	glad.c	/^PFNGLDELETETEXTURESPROC glad_glDeleteTextures = NULL;$/;"	v	typeref:typename:PFNGLDELETETEXTURESPROC
glad_glDeleteTextures	include/glad/glad.h	/^GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;$/;"	v	typeref:typename:GLAPI PFNGLDELETETEXTURESPROC
glad_glDeleteVertexArrays	glad.c	/^PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
glad_glDeleteVertexArrays	include/glad/glad.h	/^GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;$/;"	v	typeref:typename:GLAPI PFNGLDELETEVERTEXARRAYSPROC
glad_glDepthFunc	glad.c	/^PFNGLDEPTHFUNCPROC glad_glDepthFunc = NULL;$/;"	v	typeref:typename:PFNGLDEPTHFUNCPROC
glad_glDepthFunc	include/glad/glad.h	/^GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;$/;"	v	typeref:typename:GLAPI PFNGLDEPTHFUNCPROC
glad_glDepthMask	glad.c	/^PFNGLDEPTHMASKPROC glad_glDepthMask = NULL;$/;"	v	typeref:typename:PFNGLDEPTHMASKPROC
glad_glDepthMask	include/glad/glad.h	/^GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;$/;"	v	typeref:typename:GLAPI PFNGLDEPTHMASKPROC
glad_glDepthRange	glad.c	/^PFNGLDEPTHRANGEPROC glad_glDepthRange = NULL;$/;"	v	typeref:typename:PFNGLDEPTHRANGEPROC
glad_glDepthRange	include/glad/glad.h	/^GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;$/;"	v	typeref:typename:GLAPI PFNGLDEPTHRANGEPROC
glad_glDetachShader	glad.c	/^PFNGLDETACHSHADERPROC glad_glDetachShader = NULL;$/;"	v	typeref:typename:PFNGLDETACHSHADERPROC
glad_glDetachShader	include/glad/glad.h	/^GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;$/;"	v	typeref:typename:GLAPI PFNGLDETACHSHADERPROC
glad_glDisable	glad.c	/^PFNGLDISABLEPROC glad_glDisable = NULL;$/;"	v	typeref:typename:PFNGLDISABLEPROC
glad_glDisable	include/glad/glad.h	/^GLAPI PFNGLDISABLEPROC glad_glDisable;$/;"	v	typeref:typename:GLAPI PFNGLDISABLEPROC
glad_glDisableVertexAttribArray	glad.c	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = NULL;$/;"	v	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
glad_glDisableVertexAttribArray	include/glad/glad.h	/^GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;$/;"	v	typeref:typename:GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC
glad_glDisablei	glad.c	/^PFNGLDISABLEIPROC glad_glDisablei = NULL;$/;"	v	typeref:typename:PFNGLDISABLEIPROC
glad_glDisablei	include/glad/glad.h	/^GLAPI PFNGLDISABLEIPROC glad_glDisablei;$/;"	v	typeref:typename:GLAPI PFNGLDISABLEIPROC
glad_glDrawArrays	glad.c	/^PFNGLDRAWARRAYSPROC glad_glDrawArrays = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSPROC
glad_glDrawArrays	include/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;$/;"	v	typeref:typename:GLAPI PFNGLDRAWARRAYSPROC
glad_glDrawArraysInstanced	glad.c	/^PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDPROC
glad_glDrawArraysInstanced	include/glad/glad.h	/^GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;$/;"	v	typeref:typename:GLAPI PFNGLDRAWARRAYSINSTANCEDPROC
glad_glDrawBuffer	glad.c	/^PFNGLDRAWBUFFERPROC glad_glDrawBuffer = NULL;$/;"	v	typeref:typename:PFNGLDRAWBUFFERPROC
glad_glDrawBuffer	include/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;$/;"	v	typeref:typename:GLAPI PFNGLDRAWBUFFERPROC
glad_glDrawBuffers	glad.c	/^PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = NULL;$/;"	v	typeref:typename:PFNGLDRAWBUFFERSPROC
glad_glDrawBuffers	include/glad/glad.h	/^GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;$/;"	v	typeref:typename:GLAPI PFNGLDRAWBUFFERSPROC
glad_glDrawElements	glad.c	/^PFNGLDRAWELEMENTSPROC glad_glDrawElements = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSPROC
glad_glDrawElements	include/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;$/;"	v	typeref:typename:GLAPI PFNGLDRAWELEMENTSPROC
glad_glDrawElementsBaseVertex	glad.c	/^PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
glad_glDrawElementsBaseVertex	include/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;$/;"	v	typeref:typename:GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC
glad_glDrawElementsInstanced	glad.c	/^PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDPROC
glad_glDrawElementsInstanced	include/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;$/;"	v	typeref:typename:GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC
glad_glDrawElementsInstancedBaseVertex	glad.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
glad_glDrawElementsInstancedBaseVertex	include/glad/glad.h	/^GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;$/;"	v	typeref:typename:GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
glad_glDrawRangeElements	glad.c	/^PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = NULL;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSPROC
glad_glDrawRangeElements	include/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;$/;"	v	typeref:typename:GLAPI PFNGLDRAWRANGEELEMENTSPROC
glad_glDrawRangeElementsBaseVertex	glad.c	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
glad_glDrawRangeElementsBaseVertex	include/glad/glad.h	/^GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;$/;"	v	typeref:typename:GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
glad_glEnable	glad.c	/^PFNGLENABLEPROC glad_glEnable = NULL;$/;"	v	typeref:typename:PFNGLENABLEPROC
glad_glEnable	include/glad/glad.h	/^GLAPI PFNGLENABLEPROC glad_glEnable;$/;"	v	typeref:typename:GLAPI PFNGLENABLEPROC
glad_glEnableVertexAttribArray	glad.c	/^PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = NULL;$/;"	v	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
glad_glEnableVertexAttribArray	include/glad/glad.h	/^GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;$/;"	v	typeref:typename:GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC
glad_glEnablei	glad.c	/^PFNGLENABLEIPROC glad_glEnablei = NULL;$/;"	v	typeref:typename:PFNGLENABLEIPROC
glad_glEnablei	include/glad/glad.h	/^GLAPI PFNGLENABLEIPROC glad_glEnablei;$/;"	v	typeref:typename:GLAPI PFNGLENABLEIPROC
glad_glEndConditionalRender	glad.c	/^PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = NULL;$/;"	v	typeref:typename:PFNGLENDCONDITIONALRENDERPROC
glad_glEndConditionalRender	include/glad/glad.h	/^GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;$/;"	v	typeref:typename:GLAPI PFNGLENDCONDITIONALRENDERPROC
glad_glEndQuery	glad.c	/^PFNGLENDQUERYPROC glad_glEndQuery = NULL;$/;"	v	typeref:typename:PFNGLENDQUERYPROC
glad_glEndQuery	include/glad/glad.h	/^GLAPI PFNGLENDQUERYPROC glad_glEndQuery;$/;"	v	typeref:typename:GLAPI PFNGLENDQUERYPROC
glad_glEndTransformFeedback	glad.c	/^PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLENDTRANSFORMFEEDBACKPROC
glad_glEndTransformFeedback	include/glad/glad.h	/^GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;$/;"	v	typeref:typename:GLAPI PFNGLENDTRANSFORMFEEDBACKPROC
glad_glFenceSync	glad.c	/^PFNGLFENCESYNCPROC glad_glFenceSync = NULL;$/;"	v	typeref:typename:PFNGLFENCESYNCPROC
glad_glFenceSync	include/glad/glad.h	/^GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;$/;"	v	typeref:typename:GLAPI PFNGLFENCESYNCPROC
glad_glFinish	glad.c	/^PFNGLFINISHPROC glad_glFinish = NULL;$/;"	v	typeref:typename:PFNGLFINISHPROC
glad_glFinish	include/glad/glad.h	/^GLAPI PFNGLFINISHPROC glad_glFinish;$/;"	v	typeref:typename:GLAPI PFNGLFINISHPROC
glad_glFlush	glad.c	/^PFNGLFLUSHPROC glad_glFlush = NULL;$/;"	v	typeref:typename:PFNGLFLUSHPROC
glad_glFlush	include/glad/glad.h	/^GLAPI PFNGLFLUSHPROC glad_glFlush;$/;"	v	typeref:typename:GLAPI PFNGLFLUSHPROC
glad_glFlushMappedBufferRange	glad.c	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = NULL;$/;"	v	typeref:typename:PFNGLFLUSHMAPPEDBUFFERRANGEPROC
glad_glFlushMappedBufferRange	include/glad/glad.h	/^GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;$/;"	v	typeref:typename:GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC
glad_glFramebufferRenderbuffer	glad.c	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERRENDERBUFFERPROC
glad_glFramebufferRenderbuffer	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC
glad_glFramebufferTexture	glad.c	/^PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTUREPROC
glad_glFramebufferTexture	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERTEXTUREPROC
glad_glFramebufferTexture1D	glad.c	/^PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE1DPROC
glad_glFramebufferTexture1D	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC
glad_glFramebufferTexture2D	glad.c	/^PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE2DPROC
glad_glFramebufferTexture2D	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC
glad_glFramebufferTexture3D	glad.c	/^PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE3DPROC
glad_glFramebufferTexture3D	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC
glad_glFramebufferTextureLayer	glad.c	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURELAYERPROC
glad_glFramebufferTextureLayer	include/glad/glad.h	/^GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;$/;"	v	typeref:typename:GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC
glad_glFrontFace	glad.c	/^PFNGLFRONTFACEPROC glad_glFrontFace = NULL;$/;"	v	typeref:typename:PFNGLFRONTFACEPROC
glad_glFrontFace	include/glad/glad.h	/^GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;$/;"	v	typeref:typename:GLAPI PFNGLFRONTFACEPROC
glad_glGenBuffers	glad.c	/^PFNGLGENBUFFERSPROC glad_glGenBuffers = NULL;$/;"	v	typeref:typename:PFNGLGENBUFFERSPROC
glad_glGenBuffers	include/glad/glad.h	/^GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;$/;"	v	typeref:typename:GLAPI PFNGLGENBUFFERSPROC
glad_glGenFramebuffers	glad.c	/^PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = NULL;$/;"	v	typeref:typename:PFNGLGENFRAMEBUFFERSPROC
glad_glGenFramebuffers	include/glad/glad.h	/^GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;$/;"	v	typeref:typename:GLAPI PFNGLGENFRAMEBUFFERSPROC
glad_glGenQueries	glad.c	/^PFNGLGENQUERIESPROC glad_glGenQueries = NULL;$/;"	v	typeref:typename:PFNGLGENQUERIESPROC
glad_glGenQueries	include/glad/glad.h	/^GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;$/;"	v	typeref:typename:GLAPI PFNGLGENQUERIESPROC
glad_glGenRenderbuffers	glad.c	/^PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = NULL;$/;"	v	typeref:typename:PFNGLGENRENDERBUFFERSPROC
glad_glGenRenderbuffers	include/glad/glad.h	/^GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;$/;"	v	typeref:typename:GLAPI PFNGLGENRENDERBUFFERSPROC
glad_glGenSamplers	glad.c	/^PFNGLGENSAMPLERSPROC glad_glGenSamplers = NULL;$/;"	v	typeref:typename:PFNGLGENSAMPLERSPROC
glad_glGenSamplers	include/glad/glad.h	/^GLAPI PFNGLGENSAMPLERSPROC glad_glGenSamplers;$/;"	v	typeref:typename:GLAPI PFNGLGENSAMPLERSPROC
glad_glGenTextures	glad.c	/^PFNGLGENTEXTURESPROC glad_glGenTextures = NULL;$/;"	v	typeref:typename:PFNGLGENTEXTURESPROC
glad_glGenTextures	include/glad/glad.h	/^GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;$/;"	v	typeref:typename:GLAPI PFNGLGENTEXTURESPROC
glad_glGenVertexArrays	glad.c	/^PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSPROC
glad_glGenVertexArrays	include/glad/glad.h	/^GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;$/;"	v	typeref:typename:GLAPI PFNGLGENVERTEXARRAYSPROC
glad_glGenerateMipmap	glad.c	/^PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = NULL;$/;"	v	typeref:typename:PFNGLGENERATEMIPMAPPROC
glad_glGenerateMipmap	include/glad/glad.h	/^GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;$/;"	v	typeref:typename:GLAPI PFNGLGENERATEMIPMAPPROC
glad_glGetActiveAttrib	glad.c	/^PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEATTRIBPROC
glad_glGetActiveAttrib	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEATTRIBPROC
glad_glGetActiveUniform	glad.c	/^PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMPROC
glad_glGetActiveUniform	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEUNIFORMPROC
glad_glGetActiveUniformBlockName	glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
glad_glGetActiveUniformBlockName	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
glad_glGetActiveUniformBlockiv	glad.c	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKIVPROC
glad_glGetActiveUniformBlockiv	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC
glad_glGetActiveUniformName	glad.c	/^PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMNAMEPROC
glad_glGetActiveUniformName	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC
glad_glGetActiveUniformsiv	glad.c	/^PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMSIVPROC
glad_glGetActiveUniformsiv	include/glad/glad.h	/^GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;$/;"	v	typeref:typename:GLAPI PFNGLGETACTIVEUNIFORMSIVPROC
glad_glGetAttachedShaders	glad.c	/^PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = NULL;$/;"	v	typeref:typename:PFNGLGETATTACHEDSHADERSPROC
glad_glGetAttachedShaders	include/glad/glad.h	/^GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;$/;"	v	typeref:typename:GLAPI PFNGLGETATTACHEDSHADERSPROC
glad_glGetAttribLocation	glad.c	/^PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = NULL;$/;"	v	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
glad_glGetAttribLocation	include/glad/glad.h	/^GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;$/;"	v	typeref:typename:GLAPI PFNGLGETATTRIBLOCATIONPROC
glad_glGetBooleani_v	glad.c	/^PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = NULL;$/;"	v	typeref:typename:PFNGLGETBOOLEANI_VPROC
glad_glGetBooleani_v	include/glad/glad.h	/^GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;$/;"	v	typeref:typename:GLAPI PFNGLGETBOOLEANI_VPROC
glad_glGetBooleanv	glad.c	/^PFNGLGETBOOLEANVPROC glad_glGetBooleanv = NULL;$/;"	v	typeref:typename:PFNGLGETBOOLEANVPROC
glad_glGetBooleanv	include/glad/glad.h	/^GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;$/;"	v	typeref:typename:GLAPI PFNGLGETBOOLEANVPROC
glad_glGetBufferParameteri64v	glad.c	/^PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERI64VPROC
glad_glGetBufferParameteri64v	include/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;$/;"	v	typeref:typename:GLAPI PFNGLGETBUFFERPARAMETERI64VPROC
glad_glGetBufferParameteriv	glad.c	/^PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERIVPROC
glad_glGetBufferParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETBUFFERPARAMETERIVPROC
glad_glGetBufferPointerv	glad.c	/^PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPOINTERVPROC
glad_glGetBufferPointerv	include/glad/glad.h	/^GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;$/;"	v	typeref:typename:GLAPI PFNGLGETBUFFERPOINTERVPROC
glad_glGetBufferSubData	glad.c	/^PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERSUBDATAPROC
glad_glGetBufferSubData	include/glad/glad.h	/^GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;$/;"	v	typeref:typename:GLAPI PFNGLGETBUFFERSUBDATAPROC
glad_glGetCompressedTexImage	glad.c	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETCOMPRESSEDTEXIMAGEPROC
glad_glGetCompressedTexImage	include/glad/glad.h	/^GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;$/;"	v	typeref:typename:GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC
glad_glGetDoublev	glad.c	/^PFNGLGETDOUBLEVPROC glad_glGetDoublev = NULL;$/;"	v	typeref:typename:PFNGLGETDOUBLEVPROC
glad_glGetDoublev	include/glad/glad.h	/^GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;$/;"	v	typeref:typename:GLAPI PFNGLGETDOUBLEVPROC
glad_glGetError	glad.c	/^PFNGLGETERRORPROC glad_glGetError = NULL;$/;"	v	typeref:typename:PFNGLGETERRORPROC
glad_glGetError	include/glad/glad.h	/^GLAPI PFNGLGETERRORPROC glad_glGetError;$/;"	v	typeref:typename:GLAPI PFNGLGETERRORPROC
glad_glGetFloatv	glad.c	/^PFNGLGETFLOATVPROC glad_glGetFloatv = NULL;$/;"	v	typeref:typename:PFNGLGETFLOATVPROC
glad_glGetFloatv	include/glad/glad.h	/^GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;$/;"	v	typeref:typename:GLAPI PFNGLGETFLOATVPROC
glad_glGetFragDataIndex	glad.c	/^PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = NULL;$/;"	v	typeref:typename:PFNGLGETFRAGDATAINDEXPROC
glad_glGetFragDataIndex	include/glad/glad.h	/^GLAPI PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;$/;"	v	typeref:typename:GLAPI PFNGLGETFRAGDATAINDEXPROC
glad_glGetFragDataLocation	glad.c	/^PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = NULL;$/;"	v	typeref:typename:PFNGLGETFRAGDATALOCATIONPROC
glad_glGetFragDataLocation	include/glad/glad.h	/^GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;$/;"	v	typeref:typename:GLAPI PFNGLGETFRAGDATALOCATIONPROC
glad_glGetFramebufferAttachmentParameteriv	glad.c	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
glad_glGetFramebufferAttachmentParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
glad_glGetInteger64i_v	glad.c	/^PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGER64I_VPROC
glad_glGetInteger64i_v	include/glad/glad.h	/^GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;$/;"	v	typeref:typename:GLAPI PFNGLGETINTEGER64I_VPROC
glad_glGetInteger64v	glad.c	/^PFNGLGETINTEGER64VPROC glad_glGetInteger64v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGER64VPROC
glad_glGetInteger64v	include/glad/glad.h	/^GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;$/;"	v	typeref:typename:GLAPI PFNGLGETINTEGER64VPROC
glad_glGetIntegeri_v	glad.c	/^PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGERI_VPROC
glad_glGetIntegeri_v	include/glad/glad.h	/^GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;$/;"	v	typeref:typename:GLAPI PFNGLGETINTEGERI_VPROC
glad_glGetIntegerv	glad.c	/^PFNGLGETINTEGERVPROC glad_glGetIntegerv = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGERVPROC
glad_glGetIntegerv	include/glad/glad.h	/^GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;$/;"	v	typeref:typename:GLAPI PFNGLGETINTEGERVPROC
glad_glGetMultisamplefv	glad.c	/^PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = NULL;$/;"	v	typeref:typename:PFNGLGETMULTISAMPLEFVPROC
glad_glGetMultisamplefv	include/glad/glad.h	/^GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;$/;"	v	typeref:typename:GLAPI PFNGLGETMULTISAMPLEFVPROC
glad_glGetProgramInfoLog	glad.c	/^PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
glad_glGetProgramInfoLog	include/glad/glad.h	/^GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;$/;"	v	typeref:typename:GLAPI PFNGLGETPROGRAMINFOLOGPROC
glad_glGetProgramiv	glad.c	/^PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMIVPROC
glad_glGetProgramiv	include/glad/glad.h	/^GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;$/;"	v	typeref:typename:GLAPI PFNGLGETPROGRAMIVPROC
glad_glGetQueryObjecti64v	glad.c	/^PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTI64VPROC
glad_glGetQueryObjecti64v	include/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;$/;"	v	typeref:typename:GLAPI PFNGLGETQUERYOBJECTI64VPROC
glad_glGetQueryObjectiv	glad.c	/^PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTIVPROC
glad_glGetQueryObjectiv	include/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;$/;"	v	typeref:typename:GLAPI PFNGLGETQUERYOBJECTIVPROC
glad_glGetQueryObjectui64v	glad.c	/^PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUI64VPROC
glad_glGetQueryObjectui64v	include/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;$/;"	v	typeref:typename:GLAPI PFNGLGETQUERYOBJECTUI64VPROC
glad_glGetQueryObjectuiv	glad.c	/^PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUIVPROC
glad_glGetQueryObjectuiv	include/glad/glad.h	/^GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;$/;"	v	typeref:typename:GLAPI PFNGLGETQUERYOBJECTUIVPROC
glad_glGetQueryiv	glad.c	/^PFNGLGETQUERYIVPROC glad_glGetQueryiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYIVPROC
glad_glGetQueryiv	include/glad/glad.h	/^GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;$/;"	v	typeref:typename:GLAPI PFNGLGETQUERYIVPROC
glad_glGetRenderbufferParameteriv	glad.c	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETRENDERBUFFERPARAMETERIVPROC
glad_glGetRenderbufferParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC
glad_glGetSamplerParameterIiv	glad.c	/^PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIIVPROC
glad_glGetSamplerParameterIiv	include/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;$/;"	v	typeref:typename:GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC
glad_glGetSamplerParameterIuiv	glad.c	/^PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIUIVPROC
glad_glGetSamplerParameterIuiv	include/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;$/;"	v	typeref:typename:GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC
glad_glGetSamplerParameterfv	glad.c	/^PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERFVPROC
glad_glGetSamplerParameterfv	include/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLGETSAMPLERPARAMETERFVPROC
glad_glGetSamplerParameteriv	glad.c	/^PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIVPROC
glad_glGetSamplerParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETSAMPLERPARAMETERIVPROC
glad_glGetShaderInfoLog	glad.c	/^PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERINFOLOGPROC
glad_glGetShaderInfoLog	include/glad/glad.h	/^GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;$/;"	v	typeref:typename:GLAPI PFNGLGETSHADERINFOLOGPROC
glad_glGetShaderSource	glad.c	/^PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERSOURCEPROC
glad_glGetShaderSource	include/glad/glad.h	/^GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;$/;"	v	typeref:typename:GLAPI PFNGLGETSHADERSOURCEPROC
glad_glGetShaderiv	glad.c	/^PFNGLGETSHADERIVPROC glad_glGetShaderiv = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERIVPROC
glad_glGetShaderiv	include/glad/glad.h	/^GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;$/;"	v	typeref:typename:GLAPI PFNGLGETSHADERIVPROC
glad_glGetString	glad.c	/^PFNGLGETSTRINGPROC glad_glGetString = NULL;$/;"	v	typeref:typename:PFNGLGETSTRINGPROC
glad_glGetString	include/glad/glad.h	/^GLAPI PFNGLGETSTRINGPROC glad_glGetString;$/;"	v	typeref:typename:GLAPI PFNGLGETSTRINGPROC
glad_glGetStringi	glad.c	/^PFNGLGETSTRINGIPROC glad_glGetStringi = NULL;$/;"	v	typeref:typename:PFNGLGETSTRINGIPROC
glad_glGetStringi	include/glad/glad.h	/^GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;$/;"	v	typeref:typename:GLAPI PFNGLGETSTRINGIPROC
glad_glGetSynciv	glad.c	/^PFNGLGETSYNCIVPROC glad_glGetSynciv = NULL;$/;"	v	typeref:typename:PFNGLGETSYNCIVPROC
glad_glGetSynciv	include/glad/glad.h	/^GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;$/;"	v	typeref:typename:GLAPI PFNGLGETSYNCIVPROC
glad_glGetTexImage	glad.c	/^PFNGLGETTEXIMAGEPROC glad_glGetTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETTEXIMAGEPROC
glad_glGetTexImage	include/glad/glad.h	/^GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXIMAGEPROC
glad_glGetTexLevelParameterfv	glad.c	/^PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERFVPROC
glad_glGetTexLevelParameterfv	include/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC
glad_glGetTexLevelParameteriv	glad.c	/^PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERIVPROC
glad_glGetTexLevelParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC
glad_glGetTexParameterIiv	glad.c	/^PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIIVPROC
glad_glGetTexParameterIiv	include/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXPARAMETERIIVPROC
glad_glGetTexParameterIuiv	glad.c	/^PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIUIVPROC
glad_glGetTexParameterIuiv	include/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXPARAMETERIUIVPROC
glad_glGetTexParameterfv	glad.c	/^PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERFVPROC
glad_glGetTexParameterfv	include/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXPARAMETERFVPROC
glad_glGetTexParameteriv	glad.c	/^PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIVPROC
glad_glGetTexParameteriv	include/glad/glad.h	/^GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLGETTEXPARAMETERIVPROC
glad_glGetTransformFeedbackVarying	glad.c	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = NULL;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
glad_glGetTransformFeedbackVarying	include/glad/glad.h	/^GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;$/;"	v	typeref:typename:GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
glad_glGetUniformBlockIndex	glad.c	/^PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMBLOCKINDEXPROC
glad_glGetUniformBlockIndex	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC
glad_glGetUniformIndices	glad.c	/^PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMINDICESPROC
glad_glGetUniformIndices	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMINDICESPROC
glad_glGetUniformLocation	glad.c	/^PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
glad_glGetUniformLocation	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMLOCATIONPROC
glad_glGetUniformfv	glad.c	/^PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMFVPROC
glad_glGetUniformfv	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMFVPROC
glad_glGetUniformiv	glad.c	/^PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMIVPROC
glad_glGetUniformiv	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMIVPROC
glad_glGetUniformuiv	glad.c	/^PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMUIVPROC
glad_glGetUniformuiv	include/glad/glad.h	/^GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;$/;"	v	typeref:typename:GLAPI PFNGLGETUNIFORMUIVPROC
glad_glGetVertexAttribIiv	glad.c	/^PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIIVPROC
glad_glGetVertexAttribIiv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBIIVPROC
glad_glGetVertexAttribIuiv	glad.c	/^PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIUIVPROC
glad_glGetVertexAttribIuiv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBIUIVPROC
glad_glGetVertexAttribPointerv	glad.c	/^PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
glad_glGetVertexAttribPointerv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC
glad_glGetVertexAttribdv	glad.c	/^PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBDVPROC
glad_glGetVertexAttribdv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBDVPROC
glad_glGetVertexAttribfv	glad.c	/^PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBFVPROC
glad_glGetVertexAttribfv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBFVPROC
glad_glGetVertexAttribiv	glad.c	/^PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
glad_glGetVertexAttribiv	include/glad/glad.h	/^GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;$/;"	v	typeref:typename:GLAPI PFNGLGETVERTEXATTRIBIVPROC
glad_glHint	glad.c	/^PFNGLHINTPROC glad_glHint = NULL;$/;"	v	typeref:typename:PFNGLHINTPROC
glad_glHint	include/glad/glad.h	/^GLAPI PFNGLHINTPROC glad_glHint;$/;"	v	typeref:typename:GLAPI PFNGLHINTPROC
glad_glIsBuffer	glad.c	/^PFNGLISBUFFERPROC glad_glIsBuffer = NULL;$/;"	v	typeref:typename:PFNGLISBUFFERPROC
glad_glIsBuffer	include/glad/glad.h	/^GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;$/;"	v	typeref:typename:GLAPI PFNGLISBUFFERPROC
glad_glIsEnabled	glad.c	/^PFNGLISENABLEDPROC glad_glIsEnabled = NULL;$/;"	v	typeref:typename:PFNGLISENABLEDPROC
glad_glIsEnabled	include/glad/glad.h	/^GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;$/;"	v	typeref:typename:GLAPI PFNGLISENABLEDPROC
glad_glIsEnabledi	glad.c	/^PFNGLISENABLEDIPROC glad_glIsEnabledi = NULL;$/;"	v	typeref:typename:PFNGLISENABLEDIPROC
glad_glIsEnabledi	include/glad/glad.h	/^GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;$/;"	v	typeref:typename:GLAPI PFNGLISENABLEDIPROC
glad_glIsFramebuffer	glad.c	/^PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLISFRAMEBUFFERPROC
glad_glIsFramebuffer	include/glad/glad.h	/^GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;$/;"	v	typeref:typename:GLAPI PFNGLISFRAMEBUFFERPROC
glad_glIsProgram	glad.c	/^PFNGLISPROGRAMPROC glad_glIsProgram = NULL;$/;"	v	typeref:typename:PFNGLISPROGRAMPROC
glad_glIsProgram	include/glad/glad.h	/^GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;$/;"	v	typeref:typename:GLAPI PFNGLISPROGRAMPROC
glad_glIsQuery	glad.c	/^PFNGLISQUERYPROC glad_glIsQuery = NULL;$/;"	v	typeref:typename:PFNGLISQUERYPROC
glad_glIsQuery	include/glad/glad.h	/^GLAPI PFNGLISQUERYPROC glad_glIsQuery;$/;"	v	typeref:typename:GLAPI PFNGLISQUERYPROC
glad_glIsRenderbuffer	glad.c	/^PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLISRENDERBUFFERPROC
glad_glIsRenderbuffer	include/glad/glad.h	/^GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;$/;"	v	typeref:typename:GLAPI PFNGLISRENDERBUFFERPROC
glad_glIsSampler	glad.c	/^PFNGLISSAMPLERPROC glad_glIsSampler = NULL;$/;"	v	typeref:typename:PFNGLISSAMPLERPROC
glad_glIsSampler	include/glad/glad.h	/^GLAPI PFNGLISSAMPLERPROC glad_glIsSampler;$/;"	v	typeref:typename:GLAPI PFNGLISSAMPLERPROC
glad_glIsShader	glad.c	/^PFNGLISSHADERPROC glad_glIsShader = NULL;$/;"	v	typeref:typename:PFNGLISSHADERPROC
glad_glIsShader	include/glad/glad.h	/^GLAPI PFNGLISSHADERPROC glad_glIsShader;$/;"	v	typeref:typename:GLAPI PFNGLISSHADERPROC
glad_glIsSync	glad.c	/^PFNGLISSYNCPROC glad_glIsSync = NULL;$/;"	v	typeref:typename:PFNGLISSYNCPROC
glad_glIsSync	include/glad/glad.h	/^GLAPI PFNGLISSYNCPROC glad_glIsSync;$/;"	v	typeref:typename:GLAPI PFNGLISSYNCPROC
glad_glIsTexture	glad.c	/^PFNGLISTEXTUREPROC glad_glIsTexture = NULL;$/;"	v	typeref:typename:PFNGLISTEXTUREPROC
glad_glIsTexture	include/glad/glad.h	/^GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;$/;"	v	typeref:typename:GLAPI PFNGLISTEXTUREPROC
glad_glIsVertexArray	glad.c	/^PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = NULL;$/;"	v	typeref:typename:PFNGLISVERTEXARRAYPROC
glad_glIsVertexArray	include/glad/glad.h	/^GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;$/;"	v	typeref:typename:GLAPI PFNGLISVERTEXARRAYPROC
glad_glLineWidth	glad.c	/^PFNGLLINEWIDTHPROC glad_glLineWidth = NULL;$/;"	v	typeref:typename:PFNGLLINEWIDTHPROC
glad_glLineWidth	include/glad/glad.h	/^GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;$/;"	v	typeref:typename:GLAPI PFNGLLINEWIDTHPROC
glad_glLinkProgram	glad.c	/^PFNGLLINKPROGRAMPROC glad_glLinkProgram = NULL;$/;"	v	typeref:typename:PFNGLLINKPROGRAMPROC
glad_glLinkProgram	include/glad/glad.h	/^GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;$/;"	v	typeref:typename:GLAPI PFNGLLINKPROGRAMPROC
glad_glLogicOp	glad.c	/^PFNGLLOGICOPPROC glad_glLogicOp = NULL;$/;"	v	typeref:typename:PFNGLLOGICOPPROC
glad_glLogicOp	include/glad/glad.h	/^GLAPI PFNGLLOGICOPPROC glad_glLogicOp;$/;"	v	typeref:typename:GLAPI PFNGLLOGICOPPROC
glad_glMapBuffer	glad.c	/^PFNGLMAPBUFFERPROC glad_glMapBuffer = NULL;$/;"	v	typeref:typename:PFNGLMAPBUFFERPROC
glad_glMapBuffer	include/glad/glad.h	/^GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;$/;"	v	typeref:typename:GLAPI PFNGLMAPBUFFERPROC
glad_glMapBufferRange	glad.c	/^PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = NULL;$/;"	v	typeref:typename:PFNGLMAPBUFFERRANGEPROC
glad_glMapBufferRange	include/glad/glad.h	/^GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;$/;"	v	typeref:typename:GLAPI PFNGLMAPBUFFERRANGEPROC
glad_glMultiDrawArrays	glad.c	/^PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWARRAYSPROC
glad_glMultiDrawArrays	include/glad/glad.h	/^GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;$/;"	v	typeref:typename:GLAPI PFNGLMULTIDRAWARRAYSPROC
glad_glMultiDrawElements	glad.c	/^PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSPROC
glad_glMultiDrawElements	include/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;$/;"	v	typeref:typename:GLAPI PFNGLMULTIDRAWELEMENTSPROC
glad_glMultiDrawElementsBaseVertex	glad.c	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
glad_glMultiDrawElementsBaseVertex	include/glad/glad.h	/^GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;$/;"	v	typeref:typename:GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
glad_glMultiTexCoordP1ui	glad.c	/^PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIPROC
glad_glMultiTexCoordP1ui	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP1UIPROC
glad_glMultiTexCoordP1uiv	glad.c	/^PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIVPROC
glad_glMultiTexCoordP1uiv	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP1UIVPROC
glad_glMultiTexCoordP2ui	glad.c	/^PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIPROC
glad_glMultiTexCoordP2ui	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP2UIPROC
glad_glMultiTexCoordP2uiv	glad.c	/^PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIVPROC
glad_glMultiTexCoordP2uiv	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP2UIVPROC
glad_glMultiTexCoordP3ui	glad.c	/^PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIPROC
glad_glMultiTexCoordP3ui	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP3UIPROC
glad_glMultiTexCoordP3uiv	glad.c	/^PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIVPROC
glad_glMultiTexCoordP3uiv	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP3UIVPROC
glad_glMultiTexCoordP4ui	glad.c	/^PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIPROC
glad_glMultiTexCoordP4ui	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP4UIPROC
glad_glMultiTexCoordP4uiv	glad.c	/^PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIVPROC
glad_glMultiTexCoordP4uiv	include/glad/glad.h	/^GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;$/;"	v	typeref:typename:GLAPI PFNGLMULTITEXCOORDP4UIVPROC
glad_glNormalP3ui	glad.c	/^PFNGLNORMALP3UIPROC glad_glNormalP3ui = NULL;$/;"	v	typeref:typename:PFNGLNORMALP3UIPROC
glad_glNormalP3ui	include/glad/glad.h	/^GLAPI PFNGLNORMALP3UIPROC glad_glNormalP3ui;$/;"	v	typeref:typename:GLAPI PFNGLNORMALP3UIPROC
glad_glNormalP3uiv	glad.c	/^PFNGLNORMALP3UIVPROC glad_glNormalP3uiv = NULL;$/;"	v	typeref:typename:PFNGLNORMALP3UIVPROC
glad_glNormalP3uiv	include/glad/glad.h	/^GLAPI PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLNORMALP3UIVPROC
glad_glPixelStoref	glad.c	/^PFNGLPIXELSTOREFPROC glad_glPixelStoref = NULL;$/;"	v	typeref:typename:PFNGLPIXELSTOREFPROC
glad_glPixelStoref	include/glad/glad.h	/^GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;$/;"	v	typeref:typename:GLAPI PFNGLPIXELSTOREFPROC
glad_glPixelStorei	glad.c	/^PFNGLPIXELSTOREIPROC glad_glPixelStorei = NULL;$/;"	v	typeref:typename:PFNGLPIXELSTOREIPROC
glad_glPixelStorei	include/glad/glad.h	/^GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;$/;"	v	typeref:typename:GLAPI PFNGLPIXELSTOREIPROC
glad_glPointParameterf	glad.c	/^PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFPROC
glad_glPointParameterf	include/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;$/;"	v	typeref:typename:GLAPI PFNGLPOINTPARAMETERFPROC
glad_glPointParameterfv	glad.c	/^PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFVPROC
glad_glPointParameterfv	include/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLPOINTPARAMETERFVPROC
glad_glPointParameteri	glad.c	/^PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIPROC
glad_glPointParameteri	include/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;$/;"	v	typeref:typename:GLAPI PFNGLPOINTPARAMETERIPROC
glad_glPointParameteriv	glad.c	/^PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIVPROC
glad_glPointParameteriv	include/glad/glad.h	/^GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLPOINTPARAMETERIVPROC
glad_glPointSize	glad.c	/^PFNGLPOINTSIZEPROC glad_glPointSize = NULL;$/;"	v	typeref:typename:PFNGLPOINTSIZEPROC
glad_glPointSize	include/glad/glad.h	/^GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;$/;"	v	typeref:typename:GLAPI PFNGLPOINTSIZEPROC
glad_glPolygonMode	glad.c	/^PFNGLPOLYGONMODEPROC glad_glPolygonMode = NULL;$/;"	v	typeref:typename:PFNGLPOLYGONMODEPROC
glad_glPolygonMode	include/glad/glad.h	/^GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;$/;"	v	typeref:typename:GLAPI PFNGLPOLYGONMODEPROC
glad_glPolygonOffset	glad.c	/^PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = NULL;$/;"	v	typeref:typename:PFNGLPOLYGONOFFSETPROC
glad_glPolygonOffset	include/glad/glad.h	/^GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;$/;"	v	typeref:typename:GLAPI PFNGLPOLYGONOFFSETPROC
glad_glPrimitiveRestartIndex	glad.c	/^PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = NULL;$/;"	v	typeref:typename:PFNGLPRIMITIVERESTARTINDEXPROC
glad_glPrimitiveRestartIndex	include/glad/glad.h	/^GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;$/;"	v	typeref:typename:GLAPI PFNGLPRIMITIVERESTARTINDEXPROC
glad_glProvokingVertex	glad.c	/^PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = NULL;$/;"	v	typeref:typename:PFNGLPROVOKINGVERTEXPROC
glad_glProvokingVertex	include/glad/glad.h	/^GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;$/;"	v	typeref:typename:GLAPI PFNGLPROVOKINGVERTEXPROC
glad_glQueryCounter	glad.c	/^PFNGLQUERYCOUNTERPROC glad_glQueryCounter = NULL;$/;"	v	typeref:typename:PFNGLQUERYCOUNTERPROC
glad_glQueryCounter	include/glad/glad.h	/^GLAPI PFNGLQUERYCOUNTERPROC glad_glQueryCounter;$/;"	v	typeref:typename:GLAPI PFNGLQUERYCOUNTERPROC
glad_glReadBuffer	glad.c	/^PFNGLREADBUFFERPROC glad_glReadBuffer = NULL;$/;"	v	typeref:typename:PFNGLREADBUFFERPROC
glad_glReadBuffer	include/glad/glad.h	/^GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;$/;"	v	typeref:typename:GLAPI PFNGLREADBUFFERPROC
glad_glReadPixels	glad.c	/^PFNGLREADPIXELSPROC glad_glReadPixels = NULL;$/;"	v	typeref:typename:PFNGLREADPIXELSPROC
glad_glReadPixels	include/glad/glad.h	/^GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;$/;"	v	typeref:typename:GLAPI PFNGLREADPIXELSPROC
glad_glRenderbufferStorage	glad.c	/^PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = NULL;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEPROC
glad_glRenderbufferStorage	include/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;$/;"	v	typeref:typename:GLAPI PFNGLRENDERBUFFERSTORAGEPROC
glad_glRenderbufferStorageMultisample	glad.c	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = NULL;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
glad_glRenderbufferStorageMultisample	include/glad/glad.h	/^GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;$/;"	v	typeref:typename:GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
glad_glSampleCoverage	glad.c	/^PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = NULL;$/;"	v	typeref:typename:PFNGLSAMPLECOVERAGEPROC
glad_glSampleCoverage	include/glad/glad.h	/^GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLECOVERAGEPROC
glad_glSampleMaski	glad.c	/^PFNGLSAMPLEMASKIPROC glad_glSampleMaski = NULL;$/;"	v	typeref:typename:PFNGLSAMPLEMASKIPROC
glad_glSampleMaski	include/glad/glad.h	/^GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLEMASKIPROC
glad_glSamplerParameterIiv	glad.c	/^PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIIVPROC
glad_glSamplerParameterIiv	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERIIVPROC
glad_glSamplerParameterIuiv	glad.c	/^PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIUIVPROC
glad_glSamplerParameterIuiv	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERIUIVPROC
glad_glSamplerParameterf	glad.c	/^PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFPROC
glad_glSamplerParameterf	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERFPROC
glad_glSamplerParameterfv	glad.c	/^PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFVPROC
glad_glSamplerParameterfv	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERFVPROC
glad_glSamplerParameteri	glad.c	/^PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIPROC
glad_glSamplerParameteri	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERIPROC
glad_glSamplerParameteriv	glad.c	/^PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIVPROC
glad_glSamplerParameteriv	include/glad/glad.h	/^GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLSAMPLERPARAMETERIVPROC
glad_glScissor	glad.c	/^PFNGLSCISSORPROC glad_glScissor = NULL;$/;"	v	typeref:typename:PFNGLSCISSORPROC
glad_glScissor	include/glad/glad.h	/^GLAPI PFNGLSCISSORPROC glad_glScissor;$/;"	v	typeref:typename:GLAPI PFNGLSCISSORPROC
glad_glSecondaryColorP3ui	glad.c	/^PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui = NULL;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIPROC
glad_glSecondaryColorP3ui	include/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;$/;"	v	typeref:typename:GLAPI PFNGLSECONDARYCOLORP3UIPROC
glad_glSecondaryColorP3uiv	glad.c	/^PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv = NULL;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIVPROC
glad_glSecondaryColorP3uiv	include/glad/glad.h	/^GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLSECONDARYCOLORP3UIVPROC
glad_glShaderSource	glad.c	/^PFNGLSHADERSOURCEPROC glad_glShaderSource = NULL;$/;"	v	typeref:typename:PFNGLSHADERSOURCEPROC
glad_glShaderSource	include/glad/glad.h	/^GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;$/;"	v	typeref:typename:GLAPI PFNGLSHADERSOURCEPROC
glad_glStencilFunc	glad.c	/^PFNGLSTENCILFUNCPROC glad_glStencilFunc = NULL;$/;"	v	typeref:typename:PFNGLSTENCILFUNCPROC
glad_glStencilFunc	include/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILFUNCPROC
glad_glStencilFuncSeparate	glad.c	/^PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILFUNCSEPARATEPROC
glad_glStencilFuncSeparate	include/glad/glad.h	/^GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILFUNCSEPARATEPROC
glad_glStencilMask	glad.c	/^PFNGLSTENCILMASKPROC glad_glStencilMask = NULL;$/;"	v	typeref:typename:PFNGLSTENCILMASKPROC
glad_glStencilMask	include/glad/glad.h	/^GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILMASKPROC
glad_glStencilMaskSeparate	glad.c	/^PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILMASKSEPARATEPROC
glad_glStencilMaskSeparate	include/glad/glad.h	/^GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILMASKSEPARATEPROC
glad_glStencilOp	glad.c	/^PFNGLSTENCILOPPROC glad_glStencilOp = NULL;$/;"	v	typeref:typename:PFNGLSTENCILOPPROC
glad_glStencilOp	include/glad/glad.h	/^GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILOPPROC
glad_glStencilOpSeparate	glad.c	/^PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILOPSEPARATEPROC
glad_glStencilOpSeparate	include/glad/glad.h	/^GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;$/;"	v	typeref:typename:GLAPI PFNGLSTENCILOPSEPARATEPROC
glad_glTexBuffer	glad.c	/^PFNGLTEXBUFFERPROC glad_glTexBuffer = NULL;$/;"	v	typeref:typename:PFNGLTEXBUFFERPROC
glad_glTexBuffer	include/glad/glad.h	/^GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;$/;"	v	typeref:typename:GLAPI PFNGLTEXBUFFERPROC
glad_glTexCoordP1ui	glad.c	/^PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIPROC
glad_glTexCoordP1ui	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP1UIPROC
glad_glTexCoordP1uiv	glad.c	/^PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIVPROC
glad_glTexCoordP1uiv	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP1UIVPROC
glad_glTexCoordP2ui	glad.c	/^PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIPROC
glad_glTexCoordP2ui	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP2UIPROC
glad_glTexCoordP2uiv	glad.c	/^PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIVPROC
glad_glTexCoordP2uiv	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP2UIVPROC
glad_glTexCoordP3ui	glad.c	/^PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIPROC
glad_glTexCoordP3ui	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP3UIPROC
glad_glTexCoordP3uiv	glad.c	/^PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIVPROC
glad_glTexCoordP3uiv	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP3UIVPROC
glad_glTexCoordP4ui	glad.c	/^PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIPROC
glad_glTexCoordP4ui	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP4UIPROC
glad_glTexCoordP4uiv	glad.c	/^PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIVPROC
glad_glTexCoordP4uiv	include/glad/glad.h	/^GLAPI PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXCOORDP4UIVPROC
glad_glTexImage1D	glad.c	/^PFNGLTEXIMAGE1DPROC glad_glTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE1DPROC
glad_glTexImage1D	include/glad/glad.h	/^GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;$/;"	v	typeref:typename:GLAPI PFNGLTEXIMAGE1DPROC
glad_glTexImage2D	glad.c	/^PFNGLTEXIMAGE2DPROC glad_glTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DPROC
glad_glTexImage2D	include/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;$/;"	v	typeref:typename:GLAPI PFNGLTEXIMAGE2DPROC
glad_glTexImage2DMultisample	glad.c	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DMULTISAMPLEPROC
glad_glTexImage2DMultisample	include/glad/glad.h	/^GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;$/;"	v	typeref:typename:GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC
glad_glTexImage3D	glad.c	/^PFNGLTEXIMAGE3DPROC glad_glTexImage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DPROC
glad_glTexImage3D	include/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;$/;"	v	typeref:typename:GLAPI PFNGLTEXIMAGE3DPROC
glad_glTexImage3DMultisample	glad.c	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DMULTISAMPLEPROC
glad_glTexImage3DMultisample	include/glad/glad.h	/^GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;$/;"	v	typeref:typename:GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC
glad_glTexParameterIiv	glad.c	/^PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIIVPROC
glad_glTexParameterIiv	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERIIVPROC
glad_glTexParameterIuiv	glad.c	/^PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIUIVPROC
glad_glTexParameterIuiv	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERIUIVPROC
glad_glTexParameterf	glad.c	/^PFNGLTEXPARAMETERFPROC glad_glTexParameterf = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFPROC
glad_glTexParameterf	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERFPROC
glad_glTexParameterfv	glad.c	/^PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFVPROC
glad_glTexParameterfv	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERFVPROC
glad_glTexParameteri	glad.c	/^PFNGLTEXPARAMETERIPROC glad_glTexParameteri = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIPROC
glad_glTexParameteri	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERIPROC
glad_glTexParameteriv	glad.c	/^PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIVPROC
glad_glTexParameteriv	include/glad/glad.h	/^GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;$/;"	v	typeref:typename:GLAPI PFNGLTEXPARAMETERIVPROC
glad_glTexSubImage1D	glad.c	/^PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE1DPROC
glad_glTexSubImage1D	include/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;$/;"	v	typeref:typename:GLAPI PFNGLTEXSUBIMAGE1DPROC
glad_glTexSubImage2D	glad.c	/^PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE2DPROC
glad_glTexSubImage2D	include/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;$/;"	v	typeref:typename:GLAPI PFNGLTEXSUBIMAGE2DPROC
glad_glTexSubImage3D	glad.c	/^PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE3DPROC
glad_glTexSubImage3D	include/glad/glad.h	/^GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;$/;"	v	typeref:typename:GLAPI PFNGLTEXSUBIMAGE3DPROC
glad_glTransformFeedbackVaryings	glad.c	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = NULL;$/;"	v	typeref:typename:PFNGLTRANSFORMFEEDBACKVARYINGSPROC
glad_glTransformFeedbackVaryings	include/glad/glad.h	/^GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;$/;"	v	typeref:typename:GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC
glad_glUniform1f	glad.c	/^PFNGLUNIFORM1FPROC glad_glUniform1f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1FPROC
glad_glUniform1f	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1FPROC
glad_glUniform1fv	glad.c	/^PFNGLUNIFORM1FVPROC glad_glUniform1fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1FVPROC
glad_glUniform1fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1FVPROC
glad_glUniform1i	glad.c	/^PFNGLUNIFORM1IPROC glad_glUniform1i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1IPROC
glad_glUniform1i	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1IPROC
glad_glUniform1iv	glad.c	/^PFNGLUNIFORM1IVPROC glad_glUniform1iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1IVPROC
glad_glUniform1iv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1IVPROC
glad_glUniform1ui	glad.c	/^PFNGLUNIFORM1UIPROC glad_glUniform1ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1UIPROC
glad_glUniform1ui	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1UIPROC
glad_glUniform1uiv	glad.c	/^PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1UIVPROC
glad_glUniform1uiv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM1UIVPROC
glad_glUniform2f	glad.c	/^PFNGLUNIFORM2FPROC glad_glUniform2f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2FPROC
glad_glUniform2f	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2FPROC
glad_glUniform2fv	glad.c	/^PFNGLUNIFORM2FVPROC glad_glUniform2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2FVPROC
glad_glUniform2fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2FVPROC
glad_glUniform2i	glad.c	/^PFNGLUNIFORM2IPROC glad_glUniform2i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2IPROC
glad_glUniform2i	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2IPROC
glad_glUniform2iv	glad.c	/^PFNGLUNIFORM2IVPROC glad_glUniform2iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2IVPROC
glad_glUniform2iv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2IVPROC
glad_glUniform2ui	glad.c	/^PFNGLUNIFORM2UIPROC glad_glUniform2ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2UIPROC
glad_glUniform2ui	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2UIPROC
glad_glUniform2uiv	glad.c	/^PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2UIVPROC
glad_glUniform2uiv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM2UIVPROC
glad_glUniform3f	glad.c	/^PFNGLUNIFORM3FPROC glad_glUniform3f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3FPROC
glad_glUniform3f	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3FPROC
glad_glUniform3fv	glad.c	/^PFNGLUNIFORM3FVPROC glad_glUniform3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3FVPROC
glad_glUniform3fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3FVPROC
glad_glUniform3i	glad.c	/^PFNGLUNIFORM3IPROC glad_glUniform3i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3IPROC
glad_glUniform3i	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3IPROC
glad_glUniform3iv	glad.c	/^PFNGLUNIFORM3IVPROC glad_glUniform3iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3IVPROC
glad_glUniform3iv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3IVPROC
glad_glUniform3ui	glad.c	/^PFNGLUNIFORM3UIPROC glad_glUniform3ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3UIPROC
glad_glUniform3ui	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3UIPROC
glad_glUniform3uiv	glad.c	/^PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3UIVPROC
glad_glUniform3uiv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM3UIVPROC
glad_glUniform4f	glad.c	/^PFNGLUNIFORM4FPROC glad_glUniform4f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4FPROC
glad_glUniform4f	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4FPROC
glad_glUniform4fv	glad.c	/^PFNGLUNIFORM4FVPROC glad_glUniform4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4FVPROC
glad_glUniform4fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4FVPROC
glad_glUniform4i	glad.c	/^PFNGLUNIFORM4IPROC glad_glUniform4i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4IPROC
glad_glUniform4i	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4IPROC
glad_glUniform4iv	glad.c	/^PFNGLUNIFORM4IVPROC glad_glUniform4iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4IVPROC
glad_glUniform4iv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4IVPROC
glad_glUniform4ui	glad.c	/^PFNGLUNIFORM4UIPROC glad_glUniform4ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4UIPROC
glad_glUniform4ui	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4UIPROC
glad_glUniform4uiv	glad.c	/^PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4UIVPROC
glad_glUniform4uiv	include/glad/glad.h	/^GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORM4UIVPROC
glad_glUniformBlockBinding	glad.c	/^PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMBLOCKBINDINGPROC
glad_glUniformBlockBinding	include/glad/glad.h	/^GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMBLOCKBINDINGPROC
glad_glUniformMatrix2fv	glad.c	/^PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2FVPROC
glad_glUniformMatrix2fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX2FVPROC
glad_glUniformMatrix2x3fv	glad.c	/^PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X3FVPROC
glad_glUniformMatrix2x3fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX2X3FVPROC
glad_glUniformMatrix2x4fv	glad.c	/^PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X4FVPROC
glad_glUniformMatrix2x4fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX2X4FVPROC
glad_glUniformMatrix3fv	glad.c	/^PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3FVPROC
glad_glUniformMatrix3fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX3FVPROC
glad_glUniformMatrix3x2fv	glad.c	/^PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X2FVPROC
glad_glUniformMatrix3x2fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX3X2FVPROC
glad_glUniformMatrix3x4fv	glad.c	/^PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X4FVPROC
glad_glUniformMatrix3x4fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX3X4FVPROC
glad_glUniformMatrix4fv	glad.c	/^PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
glad_glUniformMatrix4fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX4FVPROC
glad_glUniformMatrix4x2fv	glad.c	/^PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X2FVPROC
glad_glUniformMatrix4x2fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX4X2FVPROC
glad_glUniformMatrix4x3fv	glad.c	/^PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X3FVPROC
glad_glUniformMatrix4x3fv	include/glad/glad.h	/^GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;$/;"	v	typeref:typename:GLAPI PFNGLUNIFORMMATRIX4X3FVPROC
glad_glUnmapBuffer	glad.c	/^PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = NULL;$/;"	v	typeref:typename:PFNGLUNMAPBUFFERPROC
glad_glUnmapBuffer	include/glad/glad.h	/^GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;$/;"	v	typeref:typename:GLAPI PFNGLUNMAPBUFFERPROC
glad_glUseProgram	glad.c	/^PFNGLUSEPROGRAMPROC glad_glUseProgram = NULL;$/;"	v	typeref:typename:PFNGLUSEPROGRAMPROC
glad_glUseProgram	include/glad/glad.h	/^GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;$/;"	v	typeref:typename:GLAPI PFNGLUSEPROGRAMPROC
glad_glValidateProgram	glad.c	/^PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = NULL;$/;"	v	typeref:typename:PFNGLVALIDATEPROGRAMPROC
glad_glValidateProgram	include/glad/glad.h	/^GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;$/;"	v	typeref:typename:GLAPI PFNGLVALIDATEPROGRAMPROC
glad_glVertexAttrib1d	glad.c	/^PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DPROC
glad_glVertexAttrib1d	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1DPROC
glad_glVertexAttrib1dv	glad.c	/^PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DVPROC
glad_glVertexAttrib1dv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1DVPROC
glad_glVertexAttrib1f	glad.c	/^PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FPROC
glad_glVertexAttrib1f	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1FPROC
glad_glVertexAttrib1fv	glad.c	/^PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FVPROC
glad_glVertexAttrib1fv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1FVPROC
glad_glVertexAttrib1s	glad.c	/^PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SPROC
glad_glVertexAttrib1s	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1SPROC
glad_glVertexAttrib1sv	glad.c	/^PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SVPROC
glad_glVertexAttrib1sv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB1SVPROC
glad_glVertexAttrib2d	glad.c	/^PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DPROC
glad_glVertexAttrib2d	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2DPROC
glad_glVertexAttrib2dv	glad.c	/^PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DVPROC
glad_glVertexAttrib2dv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2DVPROC
glad_glVertexAttrib2f	glad.c	/^PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FPROC
glad_glVertexAttrib2f	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2FPROC
glad_glVertexAttrib2fv	glad.c	/^PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FVPROC
glad_glVertexAttrib2fv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2FVPROC
glad_glVertexAttrib2s	glad.c	/^PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SPROC
glad_glVertexAttrib2s	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2SPROC
glad_glVertexAttrib2sv	glad.c	/^PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SVPROC
glad_glVertexAttrib2sv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB2SVPROC
glad_glVertexAttrib3d	glad.c	/^PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DPROC
glad_glVertexAttrib3d	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3DPROC
glad_glVertexAttrib3dv	glad.c	/^PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DVPROC
glad_glVertexAttrib3dv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3DVPROC
glad_glVertexAttrib3f	glad.c	/^PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FPROC
glad_glVertexAttrib3f	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3FPROC
glad_glVertexAttrib3fv	glad.c	/^PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FVPROC
glad_glVertexAttrib3fv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3FVPROC
glad_glVertexAttrib3s	glad.c	/^PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SPROC
glad_glVertexAttrib3s	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3SPROC
glad_glVertexAttrib3sv	glad.c	/^PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SVPROC
glad_glVertexAttrib3sv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB3SVPROC
glad_glVertexAttrib4Nbv	glad.c	/^PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NBVPROC
glad_glVertexAttrib4Nbv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NBVPROC
glad_glVertexAttrib4Niv	glad.c	/^PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NIVPROC
glad_glVertexAttrib4Niv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NIVPROC
glad_glVertexAttrib4Nsv	glad.c	/^PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NSVPROC
glad_glVertexAttrib4Nsv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NSVPROC
glad_glVertexAttrib4Nub	glad.c	/^PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBPROC
glad_glVertexAttrib4Nub	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NUBPROC
glad_glVertexAttrib4Nubv	glad.c	/^PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBVPROC
glad_glVertexAttrib4Nubv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NUBVPROC
glad_glVertexAttrib4Nuiv	glad.c	/^PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUIVPROC
glad_glVertexAttrib4Nuiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NUIVPROC
glad_glVertexAttrib4Nusv	glad.c	/^PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUSVPROC
glad_glVertexAttrib4Nusv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4NUSVPROC
glad_glVertexAttrib4bv	glad.c	/^PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4BVPROC
glad_glVertexAttrib4bv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4BVPROC
glad_glVertexAttrib4d	glad.c	/^PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DPROC
glad_glVertexAttrib4d	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4DPROC
glad_glVertexAttrib4dv	glad.c	/^PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DVPROC
glad_glVertexAttrib4dv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4DVPROC
glad_glVertexAttrib4f	glad.c	/^PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FPROC
glad_glVertexAttrib4f	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4FPROC
glad_glVertexAttrib4fv	glad.c	/^PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FVPROC
glad_glVertexAttrib4fv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4FVPROC
glad_glVertexAttrib4iv	glad.c	/^PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4IVPROC
glad_glVertexAttrib4iv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4IVPROC
glad_glVertexAttrib4s	glad.c	/^PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SPROC
glad_glVertexAttrib4s	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4SPROC
glad_glVertexAttrib4sv	glad.c	/^PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SVPROC
glad_glVertexAttrib4sv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4SVPROC
glad_glVertexAttrib4ubv	glad.c	/^PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UBVPROC
glad_glVertexAttrib4ubv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4UBVPROC
glad_glVertexAttrib4uiv	glad.c	/^PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UIVPROC
glad_glVertexAttrib4uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4UIVPROC
glad_glVertexAttrib4usv	glad.c	/^PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4USVPROC
glad_glVertexAttrib4usv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIB4USVPROC
glad_glVertexAttribDivisor	glad.c	/^PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISORPROC
glad_glVertexAttribDivisor	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBDIVISORPROC
glad_glVertexAttribI1i	glad.c	/^PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IPROC
glad_glVertexAttribI1i	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI1IPROC
glad_glVertexAttribI1iv	glad.c	/^PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IVPROC
glad_glVertexAttribI1iv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI1IVPROC
glad_glVertexAttribI1ui	glad.c	/^PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIPROC
glad_glVertexAttribI1ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI1UIPROC
glad_glVertexAttribI1uiv	glad.c	/^PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIVPROC
glad_glVertexAttribI1uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI1UIVPROC
glad_glVertexAttribI2i	glad.c	/^PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IPROC
glad_glVertexAttribI2i	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI2IPROC
glad_glVertexAttribI2iv	glad.c	/^PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IVPROC
glad_glVertexAttribI2iv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI2IVPROC
glad_glVertexAttribI2ui	glad.c	/^PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIPROC
glad_glVertexAttribI2ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI2UIPROC
glad_glVertexAttribI2uiv	glad.c	/^PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIVPROC
glad_glVertexAttribI2uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI2UIVPROC
glad_glVertexAttribI3i	glad.c	/^PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IPROC
glad_glVertexAttribI3i	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI3IPROC
glad_glVertexAttribI3iv	glad.c	/^PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IVPROC
glad_glVertexAttribI3iv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI3IVPROC
glad_glVertexAttribI3ui	glad.c	/^PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIPROC
glad_glVertexAttribI3ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI3UIPROC
glad_glVertexAttribI3uiv	glad.c	/^PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIVPROC
glad_glVertexAttribI3uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI3UIVPROC
glad_glVertexAttribI4bv	glad.c	/^PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4BVPROC
glad_glVertexAttribI4bv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4BVPROC
glad_glVertexAttribI4i	glad.c	/^PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IPROC
glad_glVertexAttribI4i	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4IPROC
glad_glVertexAttribI4iv	glad.c	/^PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IVPROC
glad_glVertexAttribI4iv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4IVPROC
glad_glVertexAttribI4sv	glad.c	/^PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4SVPROC
glad_glVertexAttribI4sv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4SVPROC
glad_glVertexAttribI4ubv	glad.c	/^PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UBVPROC
glad_glVertexAttribI4ubv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4UBVPROC
glad_glVertexAttribI4ui	glad.c	/^PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIPROC
glad_glVertexAttribI4ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4UIPROC
glad_glVertexAttribI4uiv	glad.c	/^PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIVPROC
glad_glVertexAttribI4uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4UIVPROC
glad_glVertexAttribI4usv	glad.c	/^PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4USVPROC
glad_glVertexAttribI4usv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBI4USVPROC
glad_glVertexAttribIPointer	glad.c	/^PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBIPOINTERPROC
glad_glVertexAttribIPointer	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBIPOINTERPROC
glad_glVertexAttribP1ui	glad.c	/^PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIPROC
glad_glVertexAttribP1ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP1UIPROC
glad_glVertexAttribP1uiv	glad.c	/^PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIVPROC
glad_glVertexAttribP1uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP1UIVPROC
glad_glVertexAttribP2ui	glad.c	/^PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIPROC
glad_glVertexAttribP2ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP2UIPROC
glad_glVertexAttribP2uiv	glad.c	/^PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIVPROC
glad_glVertexAttribP2uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP2UIVPROC
glad_glVertexAttribP3ui	glad.c	/^PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIPROC
glad_glVertexAttribP3ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP3UIPROC
glad_glVertexAttribP3uiv	glad.c	/^PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIVPROC
glad_glVertexAttribP3uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP3UIVPROC
glad_glVertexAttribP4ui	glad.c	/^PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIPROC
glad_glVertexAttribP4ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP4UIPROC
glad_glVertexAttribP4uiv	glad.c	/^PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIVPROC
glad_glVertexAttribP4uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBP4UIVPROC
glad_glVertexAttribPointer	glad.c	/^PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
glad_glVertexAttribPointer	include/glad/glad.h	/^GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXATTRIBPOINTERPROC
glad_glVertexP2ui	glad.c	/^PFNGLVERTEXP2UIPROC glad_glVertexP2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP2UIPROC
glad_glVertexP2ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXP2UIPROC glad_glVertexP2ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP2UIPROC
glad_glVertexP2uiv	glad.c	/^PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP2UIVPROC
glad_glVertexP2uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP2UIVPROC
glad_glVertexP3ui	glad.c	/^PFNGLVERTEXP3UIPROC glad_glVertexP3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP3UIPROC
glad_glVertexP3ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXP3UIPROC glad_glVertexP3ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP3UIPROC
glad_glVertexP3uiv	glad.c	/^PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP3UIVPROC
glad_glVertexP3uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP3UIVPROC
glad_glVertexP4ui	glad.c	/^PFNGLVERTEXP4UIPROC glad_glVertexP4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP4UIPROC
glad_glVertexP4ui	include/glad/glad.h	/^GLAPI PFNGLVERTEXP4UIPROC glad_glVertexP4ui;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP4UIPROC
glad_glVertexP4uiv	glad.c	/^PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP4UIVPROC
glad_glVertexP4uiv	include/glad/glad.h	/^GLAPI PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;$/;"	v	typeref:typename:GLAPI PFNGLVERTEXP4UIVPROC
glad_glViewport	glad.c	/^PFNGLVIEWPORTPROC glad_glViewport = NULL;$/;"	v	typeref:typename:PFNGLVIEWPORTPROC
glad_glViewport	include/glad/glad.h	/^GLAPI PFNGLVIEWPORTPROC glad_glViewport;$/;"	v	typeref:typename:GLAPI PFNGLVIEWPORTPROC
glad_glWaitSync	glad.c	/^PFNGLWAITSYNCPROC glad_glWaitSync = NULL;$/;"	v	typeref:typename:PFNGLWAITSYNCPROC
glad_glWaitSync	include/glad/glad.h	/^GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;$/;"	v	typeref:typename:GLAPI PFNGLWAITSYNCPROC
glm	include/glm/CMakeLists.txt	/^add_library(glm INTERFACE)$/;"	t
glm	include/glm/common.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/compute_common.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/compute_vector_relational.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/func_common.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/func_common.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_exponential.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_exponential_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_geometric.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_geometric_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_integer.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_integer_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_matrix.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_matrix_simd.inl	/^namespace glm {$/;"	n	file:
glm	include/glm/detail/func_matrix_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_packing.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/func_packing_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/func_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/func_vector_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/func_vector_relational_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	include/glm/detail/qualifier.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	include/glm/detail/setup.hpp	/^namespace glm {$/;"	n
glm	include/glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/setup.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	include/glm/detail/type_half.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat2x2.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat2x3.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat2x4.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat3x2.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat3x3.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat3x4.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat4x2.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat4x3.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_mat4x4.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_mat4x4_simd.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_quat.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_quat.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/type_quat_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_vec1.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_vec2.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_vec3.inl	/^namespace glm$/;"	n	file:
glm	include/glm/detail/type_vec4.hpp	/^namespace glm$/;"	n
glm	include/glm/detail/type_vec4.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/detail/type_vec4_simd.inl	/^namespace glm {$/;"	n	file:
glm	include/glm/detail/type_vec4_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/exponential.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_clip_space.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_clip_space.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/matrix_common.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_common.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/matrix_double2x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double2x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double2x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double2x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double2x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double2x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double3x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_double4x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float2x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float3x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_float4x4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_projection.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_projection.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/matrix_relational.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/matrix_transform.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/matrix_transform.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_common.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_common.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/ext/quaternion_double.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_double_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_exponential.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_exponential.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_float.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_float_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_geometric.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_geometric.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_relational.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_transform.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_transform.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/quaternion_trigonometric.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/quaternion_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/scalar_common.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/scalar_common.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/scalar_constants.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/scalar_constants.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/scalar_int_sized.hpp	/^namespace glm{$/;"	n
glm	include/glm/ext/scalar_integer.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/scalar_integer.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/ext/scalar_relational.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/scalar_uint_sized.hpp	/^namespace glm{$/;"	n
glm	include/glm/ext/scalar_ulp.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/scalar_ulp.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/scalar_ulp.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/ext/vector_bool1.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool1_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_bool4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_common.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_common.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/vector_double1.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double1_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_double4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float1.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float1_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_float4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int1.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int1_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_int4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_integer.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_integer.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/vector_relational.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/ext/vector_uint1.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint1_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint2.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint2_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint3.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint3_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint4.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_uint4_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_ulp.hpp	/^namespace glm$/;"	n
glm	include/glm/ext/vector_ulp.inl	/^namespace glm$/;"	n	file:
glm	include/glm/fwd.hpp	/^namespace glm$/;"	n
glm	include/glm/geometric.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/bitfield.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/color_space.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/constants.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/epsilon.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/integer.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/matrix_access.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/matrix_inverse.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/noise.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/packing.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/quaternion.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/random.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/reciprocal.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/round.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtc/type_aligned.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/type_precision.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/type_ptr.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	include/glm/gtc/ulp.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/associated_min_max.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/bit.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/closest_point.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/color_encoding.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/color_encoding.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/color_space.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/color_space_YCoCg.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/common.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/compatibility.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/component_wise.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/dual_quaternion.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/easing.hpp	/^namespace glm{$/;"	n
glm	include/glm/gtx/easing.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/euler_angles.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/extend.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/extended_min_max.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/extended_min_max.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/exterior_product.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/exterior_product.inl	/^namespace glm {$/;"	n	file:
glm	include/glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/fast_exponential.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/fast_square_root.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/fast_trigonometry.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/float_notmalize.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/functions.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/functions.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/gradient_paint.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/handed_coordinate_space.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/hash.inl	/^namespace glm {$/;"	n	file:
glm	include/glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/integer.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/intersect.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/io.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/log_base.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_cross_product.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_decompose.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/matrix_factorisation.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_factorisation.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_interpolation.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_major_storage.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_operation.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_query.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/matrix_transform_2d.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/mixed_product.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/norm.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/normal.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/normalize_dot.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	include/glm/gtx/number_precision.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	include/glm/gtx/optimum_pow.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/orthonormalize.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/perpendicular.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/polar_coordinates.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/projection.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/quaternion.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/range.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/rotate_normalized_axis.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/rotate_vector.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/spline.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/std_based_type.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/string_cast.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/texture.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/texture.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/transform.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/transform2.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/type_aligned.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/type_trait.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/type_trait.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/vec_swizzle.hpp	/^namespace glm {$/;"	n
glm	include/glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/vector_angle.inl	/^namespace glm$/;"	n	file:
glm	include/glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/vector_query.inl	/^namespace glm{$/;"	n	file:
glm	include/glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	include/glm/gtx/wrap.inl	/^namespace glm$/;"	n	file:
glm	include/glm/integer.hpp	/^namespace glm$/;"	n
glm	include/glm/matrix.hpp	/^namespace glm {$/;"	n
glm	include/glm/packing.hpp	/^namespace glm$/;"	n
glm	include/glm/simd/neon.h	/^namespace glm {$/;"	n
glm	include/glm/trigonometric.hpp	/^namespace glm$/;"	n
glm	include/glm/vector_relational.hpp	/^namespace glm$/;"	n
glm_dvec2	include/glm/simd/platform.h	/^	typedef glm_f64vec2		glm_dvec2;$/;"	t	typeref:typename:glm_f64vec2
glm_dvec4	include/glm/simd/platform.h	/^	typedef glm_f64vec4		glm_dvec4;$/;"	t	typeref:typename:glm_f64vec4
glm_f32vec4	include/glm/simd/platform.h	/^	typedef __m128			glm_f32vec4;$/;"	t	typeref:typename:__m128
glm_f32vec4	include/glm/simd/platform.h	/^	typedef float32x4_t			glm_f32vec4;$/;"	t	typeref:typename:float32x4_t
glm_f64vec2	include/glm/simd/platform.h	/^	typedef __m128d			glm_f64vec2;$/;"	t	typeref:typename:__m128d
glm_f64vec4	include/glm/simd/platform.h	/^	typedef __m256d			glm_f64vec4;$/;"	t	typeref:typename:__m256d
glm_i128_interleave	include/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave(glm_uvec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i128_interleave2	include/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave2(glm_uvec4 x, glm_uvec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i32vec4	include/glm/simd/platform.h	/^	typedef __m128i			glm_i32vec4;$/;"	t	typeref:typename:__m128i
glm_i32vec4	include/glm/simd/platform.h	/^	typedef int32x4_t			glm_i32vec4;$/;"	t	typeref:typename:int32x4_t
glm_i64vec2	include/glm/simd/platform.h	/^	typedef __m128i			glm_i64vec2;$/;"	t	typeref:typename:__m128i
glm_i64vec4	include/glm/simd/platform.h	/^	typedef __m256i			glm_i64vec4;$/;"	t	typeref:typename:__m256i
glm_ivec4	include/glm/simd/platform.h	/^	typedef glm_i32vec4		glm_ivec4;$/;"	t	typeref:typename:glm_i32vec4
glm_ivec4_abs	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_ivec4 glm_ivec4_abs(glm_ivec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_ivec4
glm_mat4_add	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_add(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_determinant	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_highp	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_highp(glm_vec4 const in[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_lowp	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_lowp(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_inverse	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_inverse_lowp	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse_lowp(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_matrixCompMult	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_matrixCompMult(glm_vec4 const in1[4], glm_vec4 const in2[4], gl/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_mul(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul_vec4	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_mul_vec4(glm_vec4 const m[4], glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_outerProduct	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_outerProduct(__m128 const& c, __m128 const& r, __m128 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_sub	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_sub(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_transpose	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_transpose(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_shared	include/glm/CMakeLists.txt	/^add_library(glm_shared SHARED ${ROOT_TEXT} ${ROOT_MD} ${ROOT_NAT}$/;"	t
glm_static	include/glm/CMakeLists.txt	/^add_library(glm_static STATIC ${ROOT_TEXT} ${ROOT_MD} ${ROOT_NAT}$/;"	t
glm_u32vec4	include/glm/simd/platform.h	/^	typedef __m128i			glm_u32vec4;$/;"	t	typeref:typename:__m128i
glm_u32vec4	include/glm/simd/platform.h	/^	typedef uint32x4_t			glm_u32vec4;$/;"	t	typeref:typename:uint32x4_t
glm_u64vec2	include/glm/simd/platform.h	/^	typedef __m128i			glm_u64vec2;$/;"	t	typeref:typename:__m128i
glm_u64vec4	include/glm/simd/platform.h	/^	typedef __m256i			glm_u64vec4;$/;"	t	typeref:typename:__m256i
glm_uvec4	include/glm/simd/platform.h	/^	typedef glm_u32vec4		glm_uvec4;$/;"	t	typeref:typename:glm_u32vec4
glm_vec1_add	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_div	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_dot	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec1_fma	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_mul	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sqrt_lowp	include/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sub	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4	include/glm/simd/platform.h	/^	typedef glm_f32vec4		glm_vec4;$/;"	t	typeref:typename:glm_f32vec4
glm_vec4_abs	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_abs(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_add	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_ceil	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_ceil(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_clamp	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_clamp(glm_vec4 v, glm_vec4 minVal, glm_vec4 maxVal)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_cross	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_cross(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_distance	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_distance(glm_vec4 p0, glm_vec4 p1)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_div	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_div_lowp	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div_lowp(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_dot	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_faceforward	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_faceforward(glm_vec4 N, glm_vec4 I, glm_vec4 Nref)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_floor	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_floor(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_fma	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_fract	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_fract(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_inf	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_inf(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_length	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_length(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mix	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mix(glm_vec4 v1, glm_vec4 v2, glm_vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mod	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mod(glm_vec4 x, glm_vec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mul	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_mul_mat4	include/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_mul_mat4(glm_vec4 v, glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_nan	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_nan(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_normalize	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_normalize(glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_reflect	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_reflect(glm_vec4 I, glm_vec4 N)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_refract	include/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_refract(glm_vec4 I, glm_vec4 N, glm_vec4 eta)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_round	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_round(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_roundEven	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_roundEven(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sign	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sign(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_smoothstep	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_smoothstep(glm_vec4 edge0, glm_vec4 edge1, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sqrt_lowp	include/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_step	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_step(glm_vec4 edge, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sub	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_swizzle_xyzw	include/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_swizzle_xyzw(glm_f32vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glyf	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	include/imgui/imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	include/imgui/imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
golden_ratio	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType golden_ratio()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
gpos	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
grad4	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> grad4(T const& j, vec<4, T, Q> const& ip)$/;"	f	namespace:glm::gtc	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
greaterThan	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThan	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> greaterThan(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
greaterThan	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
greaterThanEqual	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThanEqual	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> greaterThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
greaterThanEqual	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
gsubrs	include/imgui/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
gtc	include/glm/gtc/noise.inl	/^namespace gtc$/;"	n	namespace:glm	file:
gtx	include/glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	include/glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
h	include/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	include/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	include/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anona175a7780808	typeref:typename:int
h	include/rectangle.h	/^    float w , h, x , y;$/;"	m	class:Rectangle	typeref:typename:float
h_oversample	include/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anona175a7780508	typeref:typename:unsigned char
h_oversample	include/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
half2float	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint half2float(glm::uint h)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
half_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
has_ext	glad.c	/^static int has_ext(const char *ext) {$/;"	f	typeref:typename:int	file:
has_preferred_x	include/imgui/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 2, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 3, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 4, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 2, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 3, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 4, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 2, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 3, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 4, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::qua<T,Q>>$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::vec<1, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::vec<2, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::vec<3, T,Q> >$/;"	s	namespace:std
hash	include/glm/gtx/hash.hpp	/^	struct hash<glm::vec<4, T,Q> >$/;"	s	namespace:std
hash_combine	include/glm/gtx/hash.inl	/^	GLM_INLINE void hash_combine(size_t &seed, size_t hash)$/;"	f	namespace:glm::detail	typeref:typename:GLM_INLINE void
hdata	include/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail	typeref:typename:short
head	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	include/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	include/imgui/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	include/imgui/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anonda15fd810508	typeref:typename:float
height	include/imgui/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	include/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anona175a7781108	typeref:typename:int
help	Makefile	/^help:$/;"	t
help	cmake-build/Makefile	/^help:$/;"	t
hermite	include/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType hermite$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
heuristic	include/imgui/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
highestBitValue	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType highestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
highestBitValue	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> highestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
highp	include/glm/detail/qualifier.hpp	/^		highp = packed_highp, \/\/\/< By default highp qualifier is also packed$/;"	e	enum:glm::qualifier
highp_bvec1	include/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, highp>			highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec1	include/glm/fwd.hpp	/^	typedef vec<1, bool, highp>		highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec2	include/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec2	include/glm/fwd.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec3	include/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec3	include/glm/fwd.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec4	include/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_bvec4	include/glm/fwd.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,highp>
highp_dmat2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_dmat2x2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x3	include/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x4	include/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_dmat3x2	include/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x4	include/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_dmat4x2	include/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x3	include/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dquat	include/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, highp>		highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dquat	include/glm/fwd.hpp	/^	typedef qua<double, highp>			highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_dvec1	include/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, highp>		highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,highp>
highp_dvec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_dvec2	include/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, highp>		highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
highp_dvec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_dvec3	include/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, highp>		highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
highp_dvec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_dvec4	include/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, highp>		highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
highp_dvec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f32	include/glm/fwd.hpp	/^	typedef float					highp_f32;$/;"	t	namespace:glm	typeref:typename:float
highp_f32	include/glm/gtc/type_precision.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm	typeref:typename:float32
highp_f32mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2	include/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
highp_f32mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3	include/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
highp_f32mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4	include/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
highp_f32mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32quat	include/glm/fwd.hpp	/^	typedef qua<f32, highp>				highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f32, highp> highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32vec1	include/glm/fwd.hpp	/^	typedef vec<1, f32, highp>			highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, highp> highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec2	include/glm/fwd.hpp	/^	typedef vec<2, f32, highp>			highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, highp> highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec3	include/glm/fwd.hpp	/^	typedef vec<3, f32, highp>			highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, highp> highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec4	include/glm/fwd.hpp	/^	typedef vec<4, f32, highp>			highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, highp> highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f64	include/glm/fwd.hpp	/^	typedef double					highp_f64;$/;"	t	namespace:glm	typeref:typename:double
highp_f64	include/glm/gtc/type_precision.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm	typeref:typename:float64
highp_f64mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2	include/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x2
highp_f64mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f64, highp>		highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f64, highp>		highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3	include/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x3
highp_f64mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f64, highp>		highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f64, highp>		highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4	include/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x4
highp_f64mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f64, highp>		highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f64, highp>		highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64quat	include/glm/fwd.hpp	/^	typedef qua<f64, highp>				highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f64, highp> highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64vec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, highp> highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, highp> highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, highp> highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, highp> highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_float32	include/glm/fwd.hpp	/^	typedef float					highp_float32;$/;"	t	namespace:glm	typeref:typename:float
highp_float32	include/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32;$/;"	t	namespace:glm	typeref:typename:float32
highp_float32_t	include/glm/fwd.hpp	/^	typedef float					highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
highp_float32_t	include/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
highp_float64	include/glm/fwd.hpp	/^	typedef double					highp_float64;$/;"	t	namespace:glm	typeref:typename:double
highp_float64	include/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64;$/;"	t	namespace:glm	typeref:typename:float64
highp_float64_t	include/glm/fwd.hpp	/^	typedef double					highp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
highp_float64_t	include/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
highp_fmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2	include/glm/gtc/type_precision.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm	typeref:typename:highp_fmat2x2
highp_fmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3	include/glm/gtc/type_precision.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm	typeref:typename:highp_fmat3x3
highp_fmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4	include/glm/gtc/type_precision.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm	typeref:typename:highp_fmat4x4
highp_fmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fquat	include/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_fvec1	include/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, highp> highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec2	include/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, highp> highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec3	include/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, highp> highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec4	include/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_fvec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, highp> highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_i16	include/glm/fwd.hpp	/^	typedef int16					highp_i16;$/;"	t	namespace:glm	typeref:typename:int16
highp_i16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_i16vec1	include/glm/fwd.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec2	include/glm/fwd.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec3	include/glm/fwd.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec4	include/glm/fwd.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i32	include/glm/fwd.hpp	/^	typedef int32					highp_i32;$/;"	t	namespace:glm	typeref:typename:int32
highp_i32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_i32vec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i64	include/glm/fwd.hpp	/^	typedef int64					highp_i64;$/;"	t	namespace:glm	typeref:typename:int64
highp_i64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_i64vec1	include/glm/fwd.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec2	include/glm/fwd.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec3	include/glm/fwd.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec4	include/glm/fwd.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i8	include/glm/fwd.hpp	/^	typedef int8					highp_i8;$/;"	t	namespace:glm	typeref:typename:int8
highp_i8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_i8vec1	include/glm/fwd.hpp	/^	typedef vec<1, i8, highp>		highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, highp> highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec2	include/glm/fwd.hpp	/^	typedef vec<2, i8, highp>		highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, highp> highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec3	include/glm/fwd.hpp	/^	typedef vec<3, i8, highp>		highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, highp> highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec4	include/glm/fwd.hpp	/^	typedef vec<4, i8, highp>		highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_i8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, highp> highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, highp>				highp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
highp_imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, highp>				highp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
highp_imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, highp>				highp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
highp_imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, highp>				highp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
highp_imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, highp>				highp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
highp_imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, highp>				highp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
highp_imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_int16	include/glm/fwd.hpp	/^	typedef int16					highp_int16;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16_t	include/glm/fwd.hpp	/^	typedef int16					highp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int32	include/glm/fwd.hpp	/^	typedef int32					highp_int32;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32_t	include/glm/fwd.hpp	/^	typedef int32					highp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int64	include/glm/fwd.hpp	/^	typedef int64					highp_int64;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64_t	include/glm/fwd.hpp	/^	typedef int64					highp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int8	include/glm/fwd.hpp	/^	typedef int8					highp_int8;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8_t	include/glm/fwd.hpp	/^	typedef int8					highp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_ivec1	include/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, highp>			highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,highp>
highp_ivec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_ivec2	include/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
highp_ivec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_ivec3	include/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
highp_ivec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_ivec4	include/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
highp_ivec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_mat2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x3	include/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
highp_mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_mat2x4	include/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
highp_mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_mat3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x2	include/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
highp_mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_mat3x3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x4	include/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
highp_mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_mat4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_mat4x2	include/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
highp_mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_mat4x3	include/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
highp_mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_mat4x4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_quat	include/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, highp>		highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_quat	include/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_u16	include/glm/fwd.hpp	/^	typedef uint16					highp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_u16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_u16vec1	include/glm/fwd.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec2	include/glm/fwd.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec3	include/glm/fwd.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec4	include/glm/fwd.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u32	include/glm/fwd.hpp	/^	typedef uint32					highp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_u32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_u32vec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u64	include/glm/fwd.hpp	/^	typedef uint64					highp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_u64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_u64vec1	include/glm/fwd.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec2	include/glm/fwd.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec3	include/glm/fwd.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec4	include/glm/fwd.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u8	include/glm/fwd.hpp	/^	typedef uint8					highp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_u8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_u8vec1	include/glm/fwd.hpp	/^	typedef vec<1, u8, highp>		highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, highp> highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec2	include/glm/fwd.hpp	/^	typedef vec<2, u8, highp>		highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, highp> highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec3	include/glm/fwd.hpp	/^	typedef vec<3, u8, highp>		highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, highp> highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec4	include/glm/fwd.hpp	/^	typedef vec<4, u8, highp>		highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_u8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, highp> highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_uint16	include/glm/fwd.hpp	/^	typedef uint16					highp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16_t	include/glm/fwd.hpp	/^	typedef uint16					highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint32	include/glm/fwd.hpp	/^	typedef uint32					highp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32_t	include/glm/fwd.hpp	/^	typedef uint32					highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint64	include/glm/fwd.hpp	/^	typedef uint64					highp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64_t	include/glm/fwd.hpp	/^	typedef uint64					highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint8	include/glm/fwd.hpp	/^	typedef uint8					highp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8_t	include/glm/fwd.hpp	/^	typedef uint8					highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, highp>				highp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,highp>
highp_umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, highp>				highp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,highp>
highp_umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, highp>				highp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,highp>
highp_umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, highp>				highp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,highp>
highp_umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, highp>				highp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,highp>
highp_umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, highp>				highp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,highp>
highp_umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_uvec1	include/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, highp>			highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,highp>
highp_uvec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_uvec2	include/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,highp>
highp_uvec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_uvec3	include/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,highp>
highp_uvec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_uvec4	include/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,highp>
highp_uvec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_vec1	include/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec1	include/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec2	include/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec2	include/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec3	include/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec3	include/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec4	include/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_vec4	include/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
hmtx	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hsvColor	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> hsvColor(const vec<3, T, Q>& rgbColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
i	include/glm/detail/type_float.hpp	/^		int_type i;$/;"	m	union:glm::detail::float_t	typeref:typename:int_type
i	include/glm/detail/type_half.inl	/^		unsigned int i;$/;"	m	union:glm::detail::uif32	typeref:typename:unsigned int	file:
i	include/glm/gtc/bitfield.inl	/^			int16 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int16	file:
i	include/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int32	file:
i	include/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:int32	file:
i	include/glm/gtc/bitfield.inl	/^			int64 i;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:int64	file:
i	include/glm/gtc/bitfield.inl	/^			int8 i;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:int8	file:
i10i10i10i2	include/glm/gtc/packing.inl	/^	union i10i10i10i2$/;"	u	namespace:glm::detail	file:
i16	include/glm/fwd.hpp	/^	typedef int16					i16;$/;"	t	namespace:glm	typeref:typename:int16
i16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
i16vec1	include/glm/fwd.hpp	/^	typedef vec<1, i16, defaultp>	i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,defaultp>
i16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, defaultp> i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,defaultp>
i16vec2	include/glm/fwd.hpp	/^	typedef vec<2, i16, defaultp>	i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,defaultp>
i16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, defaultp> i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,defaultp>
i16vec3	include/glm/fwd.hpp	/^	typedef vec<3, i16, defaultp>	i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,defaultp>
i16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, defaultp> i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,defaultp>
i16vec4	include/glm/fwd.hpp	/^	typedef vec<4, i16, defaultp>	i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,defaultp>
i16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, defaultp> i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,defaultp>
i32	include/glm/fwd.hpp	/^	typedef int32					i32;$/;"	t	namespace:glm	typeref:typename:int32
i32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
i32vec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, defaultp>	i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
i32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, defaultp> i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
i32vec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, defaultp>	i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
i32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, defaultp> i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
i32vec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, defaultp>	i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
i32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, defaultp> i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
i32vec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, defaultp>	i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
i32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, defaultp> i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
i64	include/glm/fwd.hpp	/^	typedef int64					i64;$/;"	t	namespace:glm	typeref:typename:int64
i64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
i64vec1	include/glm/fwd.hpp	/^	typedef vec<1, i64, defaultp>	i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,defaultp>
i64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, defaultp> i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,defaultp>
i64vec2	include/glm/fwd.hpp	/^	typedef vec<2, i64, defaultp>	i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,defaultp>
i64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, defaultp> i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,defaultp>
i64vec3	include/glm/fwd.hpp	/^	typedef vec<3, i64, defaultp>	i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,defaultp>
i64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, defaultp> i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,defaultp>
i64vec4	include/glm/fwd.hpp	/^	typedef vec<4, i64, defaultp>	i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,defaultp>
i64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, defaultp> i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,defaultp>
i8	include/glm/fwd.hpp	/^	typedef int8					i8;$/;"	t	namespace:glm	typeref:typename:int8
i8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
i8vec1	include/glm/fwd.hpp	/^	typedef vec<1, i8, defaultp>	i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,defaultp>
i8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, defaultp> i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,defaultp>
i8vec2	include/glm/fwd.hpp	/^	typedef vec<2, i8, defaultp>	i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,defaultp>
i8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, defaultp> i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,defaultp>
i8vec3	include/glm/fwd.hpp	/^	typedef vec<3, i8, defaultp>	i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,defaultp>
i8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, defaultp> i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,defaultp>
i8vec4	include/glm/fwd.hpp	/^	typedef vec<4, i8, defaultp>	i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,defaultp>
i8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, defaultp> i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,defaultp>
id	include/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	typeref:typename:std::locale::id
id	include/glm/gtx/io.inl	/^	template<typename CTy> std::locale::id format_punct<CTy>::id;$/;"	m	class:glm::io::format_punct<CTy>	typeref:typename:std::locale::id
id	include/imgui/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	include/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	include/shader.h	/^		uint32_t id;$/;"	m	class:Shader	typeref:typename:uint32_t
identity	include/glm/detail/qualifier.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genType identity()$/;"	f	struct:glm::detail::init_gentype	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
identity	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ieee_double_shape_type	include/glm/ext/scalar_ulp.inl	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anon6c3ce53e020a	file:
ieee_float_shape_type	include/glm/ext/scalar_ulp.inl	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anon6c3ce53e010a	file:
imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:highp_imat2
imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2
imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2
imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:highp_imat2x2
imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x2
imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x2
imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:highp_imat2x3
imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x3
imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x3
imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:highp_imat2x4
imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x4
imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x4
imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:highp_imat3
imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3
imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3
imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:highp_imat3x2
imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x2
imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x2
imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:highp_imat3x3
imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x3
imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x3
imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:highp_imat3x4
imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x4
imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x4
imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:highp_imat4
imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4
imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4
imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:highp_imat4x2
imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x2
imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x2
imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:highp_imat4x3
imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x3
imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x3
imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:highp_imat4x4
imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x4
imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x4
imgl3wGetProcAddress	include/imgui/imgui_impl_opengl3_loader.h	/^GL3WglProc imgl3wGetProcAddress(const char *proc) { return get_proc(proc); }$/;"	f	typeref:typename:GL3WglProc
imgl3wInit	include/imgui/imgui_impl_opengl3_loader.h	/^int imgl3wInit(void)$/;"	f	typeref:typename:int
imgl3wInit2	include/imgui/imgui_impl_opengl3_loader.h	/^int imgl3wInit2(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:int
imgl3wIsSupported	include/imgui/imgui_impl_opengl3_loader.h	/^int imgl3wIsSupported(int major, int minor)$/;"	f	typeref:typename:int
imgl3wProcs	include/imgui/imgui_impl_opengl3_loader.h	/^GL3W_API union GL3WProcs imgl3wProcs;$/;"	v	typeref:union:GL3WProcs
imgs	readme.md	/^# imgs$/;"	c
imgui/imgui.cpp.i	Makefile	/^imgui\/imgui.cpp.i:$/;"	t
imgui/imgui.cpp.i	cmake-build/Makefile	/^imgui\/imgui.cpp.i:$/;"	t
imgui/imgui.cpp.o	Makefile	/^imgui\/imgui.cpp.o:$/;"	t
imgui/imgui.cpp.o	cmake-build/Makefile	/^imgui\/imgui.cpp.o:$/;"	t
imgui/imgui.cpp.s	Makefile	/^imgui\/imgui.cpp.s:$/;"	t
imgui/imgui.cpp.s	cmake-build/Makefile	/^imgui\/imgui.cpp.s:$/;"	t
imgui/imgui.i	Makefile	/^imgui\/imgui.i: imgui\/imgui.cpp.i$/;"	t
imgui/imgui.i	cmake-build/Makefile	/^imgui\/imgui.i: imgui\/imgui.cpp.i$/;"	t
imgui/imgui.o	Makefile	/^imgui\/imgui.o: imgui\/imgui.cpp.o$/;"	t
imgui/imgui.o	cmake-build/Makefile	/^imgui\/imgui.o: imgui\/imgui.cpp.o$/;"	t
imgui/imgui.s	Makefile	/^imgui\/imgui.s: imgui\/imgui.cpp.s$/;"	t
imgui/imgui.s	cmake-build/Makefile	/^imgui\/imgui.s: imgui\/imgui.cpp.s$/;"	t
imgui/imgui_demo.cpp.i	Makefile	/^imgui\/imgui_demo.cpp.i:$/;"	t
imgui/imgui_demo.cpp.i	cmake-build/Makefile	/^imgui\/imgui_demo.cpp.i:$/;"	t
imgui/imgui_demo.cpp.o	Makefile	/^imgui\/imgui_demo.cpp.o:$/;"	t
imgui/imgui_demo.cpp.o	cmake-build/Makefile	/^imgui\/imgui_demo.cpp.o:$/;"	t
imgui/imgui_demo.cpp.s	Makefile	/^imgui\/imgui_demo.cpp.s:$/;"	t
imgui/imgui_demo.cpp.s	cmake-build/Makefile	/^imgui\/imgui_demo.cpp.s:$/;"	t
imgui/imgui_demo.i	Makefile	/^imgui\/imgui_demo.i: imgui\/imgui_demo.cpp.i$/;"	t
imgui/imgui_demo.i	cmake-build/Makefile	/^imgui\/imgui_demo.i: imgui\/imgui_demo.cpp.i$/;"	t
imgui/imgui_demo.o	Makefile	/^imgui\/imgui_demo.o: imgui\/imgui_demo.cpp.o$/;"	t
imgui/imgui_demo.o	cmake-build/Makefile	/^imgui\/imgui_demo.o: imgui\/imgui_demo.cpp.o$/;"	t
imgui/imgui_demo.s	Makefile	/^imgui\/imgui_demo.s: imgui\/imgui_demo.cpp.s$/;"	t
imgui/imgui_demo.s	cmake-build/Makefile	/^imgui\/imgui_demo.s: imgui\/imgui_demo.cpp.s$/;"	t
imgui/imgui_draw.cpp.i	Makefile	/^imgui\/imgui_draw.cpp.i:$/;"	t
imgui/imgui_draw.cpp.i	cmake-build/Makefile	/^imgui\/imgui_draw.cpp.i:$/;"	t
imgui/imgui_draw.cpp.o	Makefile	/^imgui\/imgui_draw.cpp.o:$/;"	t
imgui/imgui_draw.cpp.o	cmake-build/Makefile	/^imgui\/imgui_draw.cpp.o:$/;"	t
imgui/imgui_draw.cpp.s	Makefile	/^imgui\/imgui_draw.cpp.s:$/;"	t
imgui/imgui_draw.cpp.s	cmake-build/Makefile	/^imgui\/imgui_draw.cpp.s:$/;"	t
imgui/imgui_draw.i	Makefile	/^imgui\/imgui_draw.i: imgui\/imgui_draw.cpp.i$/;"	t
imgui/imgui_draw.i	cmake-build/Makefile	/^imgui\/imgui_draw.i: imgui\/imgui_draw.cpp.i$/;"	t
imgui/imgui_draw.o	Makefile	/^imgui\/imgui_draw.o: imgui\/imgui_draw.cpp.o$/;"	t
imgui/imgui_draw.o	cmake-build/Makefile	/^imgui\/imgui_draw.o: imgui\/imgui_draw.cpp.o$/;"	t
imgui/imgui_draw.s	Makefile	/^imgui\/imgui_draw.s: imgui\/imgui_draw.cpp.s$/;"	t
imgui/imgui_draw.s	cmake-build/Makefile	/^imgui\/imgui_draw.s: imgui\/imgui_draw.cpp.s$/;"	t
imgui/imgui_impl_glfw.cpp.i	Makefile	/^imgui\/imgui_impl_glfw.cpp.i:$/;"	t
imgui/imgui_impl_glfw.cpp.i	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.cpp.i:$/;"	t
imgui/imgui_impl_glfw.cpp.o	Makefile	/^imgui\/imgui_impl_glfw.cpp.o:$/;"	t
imgui/imgui_impl_glfw.cpp.o	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.cpp.o:$/;"	t
imgui/imgui_impl_glfw.cpp.s	Makefile	/^imgui\/imgui_impl_glfw.cpp.s:$/;"	t
imgui/imgui_impl_glfw.cpp.s	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.cpp.s:$/;"	t
imgui/imgui_impl_glfw.i	Makefile	/^imgui\/imgui_impl_glfw.i: imgui\/imgui_impl_glfw.cpp.i$/;"	t
imgui/imgui_impl_glfw.i	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.i: imgui\/imgui_impl_glfw.cpp.i$/;"	t
imgui/imgui_impl_glfw.o	Makefile	/^imgui\/imgui_impl_glfw.o: imgui\/imgui_impl_glfw.cpp.o$/;"	t
imgui/imgui_impl_glfw.o	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.o: imgui\/imgui_impl_glfw.cpp.o$/;"	t
imgui/imgui_impl_glfw.s	Makefile	/^imgui\/imgui_impl_glfw.s: imgui\/imgui_impl_glfw.cpp.s$/;"	t
imgui/imgui_impl_glfw.s	cmake-build/Makefile	/^imgui\/imgui_impl_glfw.s: imgui\/imgui_impl_glfw.cpp.s$/;"	t
imgui/imgui_impl_opengl3.cpp.i	Makefile	/^imgui\/imgui_impl_opengl3.cpp.i:$/;"	t
imgui/imgui_impl_opengl3.cpp.i	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.cpp.i:$/;"	t
imgui/imgui_impl_opengl3.cpp.o	Makefile	/^imgui\/imgui_impl_opengl3.cpp.o:$/;"	t
imgui/imgui_impl_opengl3.cpp.o	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.cpp.o:$/;"	t
imgui/imgui_impl_opengl3.cpp.s	Makefile	/^imgui\/imgui_impl_opengl3.cpp.s:$/;"	t
imgui/imgui_impl_opengl3.cpp.s	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.cpp.s:$/;"	t
imgui/imgui_impl_opengl3.i	Makefile	/^imgui\/imgui_impl_opengl3.i: imgui\/imgui_impl_opengl3.cpp.i$/;"	t
imgui/imgui_impl_opengl3.i	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.i: imgui\/imgui_impl_opengl3.cpp.i$/;"	t
imgui/imgui_impl_opengl3.o	Makefile	/^imgui\/imgui_impl_opengl3.o: imgui\/imgui_impl_opengl3.cpp.o$/;"	t
imgui/imgui_impl_opengl3.o	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.o: imgui\/imgui_impl_opengl3.cpp.o$/;"	t
imgui/imgui_impl_opengl3.s	Makefile	/^imgui\/imgui_impl_opengl3.s: imgui\/imgui_impl_opengl3.cpp.s$/;"	t
imgui/imgui_impl_opengl3.s	cmake-build/Makefile	/^imgui\/imgui_impl_opengl3.s: imgui\/imgui_impl_opengl3.cpp.s$/;"	t
imgui/imgui_tables.cpp.i	Makefile	/^imgui\/imgui_tables.cpp.i:$/;"	t
imgui/imgui_tables.cpp.i	cmake-build/Makefile	/^imgui\/imgui_tables.cpp.i:$/;"	t
imgui/imgui_tables.cpp.o	Makefile	/^imgui\/imgui_tables.cpp.o:$/;"	t
imgui/imgui_tables.cpp.o	cmake-build/Makefile	/^imgui\/imgui_tables.cpp.o:$/;"	t
imgui/imgui_tables.cpp.s	Makefile	/^imgui\/imgui_tables.cpp.s:$/;"	t
imgui/imgui_tables.cpp.s	cmake-build/Makefile	/^imgui\/imgui_tables.cpp.s:$/;"	t
imgui/imgui_tables.i	Makefile	/^imgui\/imgui_tables.i: imgui\/imgui_tables.cpp.i$/;"	t
imgui/imgui_tables.i	cmake-build/Makefile	/^imgui\/imgui_tables.i: imgui\/imgui_tables.cpp.i$/;"	t
imgui/imgui_tables.o	Makefile	/^imgui\/imgui_tables.o: imgui\/imgui_tables.cpp.o$/;"	t
imgui/imgui_tables.o	cmake-build/Makefile	/^imgui\/imgui_tables.o: imgui\/imgui_tables.cpp.o$/;"	t
imgui/imgui_tables.s	Makefile	/^imgui\/imgui_tables.s: imgui\/imgui_tables.cpp.s$/;"	t
imgui/imgui_tables.s	cmake-build/Makefile	/^imgui\/imgui_tables.s: imgui\/imgui_tables.cpp.s$/;"	t
imgui/imgui_widgets.cpp.i	Makefile	/^imgui\/imgui_widgets.cpp.i:$/;"	t
imgui/imgui_widgets.cpp.i	cmake-build/Makefile	/^imgui\/imgui_widgets.cpp.i:$/;"	t
imgui/imgui_widgets.cpp.o	Makefile	/^imgui\/imgui_widgets.cpp.o:$/;"	t
imgui/imgui_widgets.cpp.o	cmake-build/Makefile	/^imgui\/imgui_widgets.cpp.o:$/;"	t
imgui/imgui_widgets.cpp.s	Makefile	/^imgui\/imgui_widgets.cpp.s:$/;"	t
imgui/imgui_widgets.cpp.s	cmake-build/Makefile	/^imgui\/imgui_widgets.cpp.s:$/;"	t
imgui/imgui_widgets.i	Makefile	/^imgui\/imgui_widgets.i: imgui\/imgui_widgets.cpp.i$/;"	t
imgui/imgui_widgets.i	cmake-build/Makefile	/^imgui\/imgui_widgets.i: imgui\/imgui_widgets.cpp.i$/;"	t
imgui/imgui_widgets.o	Makefile	/^imgui\/imgui_widgets.o: imgui\/imgui_widgets.cpp.o$/;"	t
imgui/imgui_widgets.o	cmake-build/Makefile	/^imgui\/imgui_widgets.o: imgui\/imgui_widgets.cpp.o$/;"	t
imgui/imgui_widgets.s	Makefile	/^imgui\/imgui_widgets.s: imgui\/imgui_widgets.cpp.s$/;"	t
imgui/imgui_widgets.s	cmake-build/Makefile	/^imgui\/imgui_widgets.s: imgui\/imgui_widgets.cpp.s$/;"	t
imulExtended	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(int x, int y, int& msb, int& lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
imulExtended	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(vec<L, int, Q> const& x, vec<L, int, Q> const& y, vec<L, i/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
in	include/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToInt::__anon8c7f770e010a	typeref:typename:float	file:
in	include/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToUint::__anon8c7f770e020a	typeref:typename:float	file:
in	include/glm/detail/func_common.inl	/^			int in;$/;"	m	union:glm::intBitsToFloat::__anon8c7f770e030a	typeref:typename:int	file:
in	include/glm/detail/func_common.inl	/^			uint in;$/;"	m	union:glm::uintBitsToFloat::__anon8c7f770e040a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			double in;$/;"	m	union:glm::unpackDouble2x32::__anon7a3922c20a0a	typeref:typename:double	file:
in	include/glm/detail/func_packing.inl	/^			signed char in[4];$/;"	m	union:glm::packSnorm4x8::__anon7a3922c2070a	typeref:typename:signed char[4]	file:
in	include/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packHalf2x16::__anon7a3922c20b0a	typeref:typename:signed short[2]	file:
in	include/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packSnorm2x16::__anon7a3922c2030a	typeref:typename:signed short[2]	file:
in	include/glm/detail/func_packing.inl	/^			uint   in[2];$/;"	m	union:glm::packDouble2x32::__anon7a3922c2090a	typeref:typename:uint[2]	file:
in	include/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackHalf2x16::__anon7a3922c20c0a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm2x16::__anon7a3922c2040a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm4x8::__anon7a3922c2080a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm2x16::__anon7a3922c2020a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm4x8::__anon7a3922c2060a	typeref:typename:uint	file:
in	include/glm/detail/func_packing.inl	/^			unsigned char in[4];$/;"	m	union:glm::packUnorm4x8::__anon7a3922c2050a	typeref:typename:unsigned char[4]	file:
in	include/glm/detail/func_packing.inl	/^			unsigned short in[2];$/;"	m	union:glm::packUnorm2x16::__anon7a3922c2010a	typeref:typename:unsigned short[2]	file:
indexToLocFormat	include/imgui/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	include/imgui/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_from_ptr	include/imgui/imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	include/imgui/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_of	cubic_utils.h	/^int index_of(std::vector<std::vector<float>> colors, float* color) {$/;"	f	typeref:typename:int
indices	include/cube.h	/^    std::vector<uint32_t> indices;$/;"	m	class:Cube	typeref:typename:std::vector<uint32_t>
indices	include/rectangle.h	/^    std::vector<uint32_t> indices;$/;"	m	class:Rectangle	typeref:typename:std::vector<uint32_t>
infinitePerspective	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveLH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveLH(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveRH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveRH(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
info_arch	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
init	include/cubic.h	/^void Cubic::init() {$/;"	f	class:Cubic	typeref:typename:void
init_anim	include/cubic.h	/^void Cubic::init_anim(std::array<int,4> p,Operation op,int axis,int inv) {$/;"	f	class:Cubic	typeref:typename:void
init_gentype	include/glm/detail/qualifier.hpp	/^	struct init_gentype$/;"	s	namespace:glm::detail
init_gentype	include/glm/detail/qualifier.hpp	/^	struct init_gentype<genType, GENTYPE_MAT>$/;"	s	namespace:glm::detail
init_gentype	include/glm/detail/qualifier.hpp	/^	struct init_gentype<genType, GENTYPE_QUAT>$/;"	s	namespace:glm::detail
init_imGUI	main.cpp	/^void init_imGUI(GLFWwindow* window) {$/;"	f	typeref:typename:void
init_mode	include/imgui/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	include/imgui/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
input	include/cubic.h	/^void Cubic::input(GLFWwindow* window) {$/;"	f	class:Cubic	typeref:typename:void
insert	include/imgui/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert_length	include/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anonda15fd810108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
insert_mode	include/imgui/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
int1	include/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compati/;"	t	namespace:glm	typeref:typename:int
int16	include/glm/ext/scalar_int_sized.hpp	/^		typedef std::int16_t		int16;$/;"	t	namespace:glm::detail	typeref:typename:std::int16_t
int16	include/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int16		int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16	include/glm/fwd.hpp	/^	typedef std::int16_t			int16;$/;"	t	namespace:glm	typeref:typename:std::int16_t
int16_t	include/glm/fwd.hpp	/^	typedef int16					int16_t;$/;"	t	namespace:glm	typeref:typename:int16
int16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
int1x1	include/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compa/;"	t	namespace:glm	typeref:typename:int
int2	include/glm/gtx/compatibility.hpp	/^	typedef vec<2, int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
int2x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
int2x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
int2x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
int3	include/glm/gtx/compatibility.hpp	/^	typedef vec<3, int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
int32	include/glm/ext/scalar_int_sized.hpp	/^		typedef std::int32_t		int32;$/;"	t	namespace:glm::detail	typeref:typename:std::int32_t
int32	include/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int32		int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32	include/glm/fwd.hpp	/^	typedef std::int32_t			int32;$/;"	t	namespace:glm	typeref:typename:std::int32_t
int32_t	include/glm/fwd.hpp	/^	typedef int32					int32_t;$/;"	t	namespace:glm	typeref:typename:int32
int32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
int3x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
int3x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
int3x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
int4	include/glm/gtx/compatibility.hpp	/^	typedef vec<4, int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
int4x2	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
int4x3	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
int4x4	include/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
int64	include/glm/detail/setup.hpp	/^		typedef std::int64_t						int64;$/;"	t	namespace:glm::detail	typeref:typename:std::int64_t
int64	include/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int64		int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64	include/glm/fwd.hpp	/^	typedef std::int64_t			int64;$/;"	t	namespace:glm	typeref:typename:std::int64_t
int64_t	include/glm/fwd.hpp	/^	typedef int64					int64_t;$/;"	t	namespace:glm	typeref:typename:int64
int64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
int8	include/glm/ext/scalar_int_sized.hpp	/^		typedef std::int8_t			int8;$/;"	t	namespace:glm::detail	typeref:typename:std::int8_t
int8	include/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int8		int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8	include/glm/fwd.hpp	/^	typedef std::int8_t				int8;$/;"	t	namespace:glm	typeref:typename:std::int8_t
int8_t	include/glm/fwd.hpp	/^	typedef int8					int8_t;$/;"	t	namespace:glm	typeref:typename:int8
int8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
intBitsToFloat	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float intBitsToFloat(int const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
intBitsToFloat	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
int_type	include/glm/detail/type_float.hpp	/^		typedef detail::int64 int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:detail::int64
int_type	include/glm/detail/type_float.hpp	/^		typedef int int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:int
intermediate	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> intermediate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
interpolate	include/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> interpolate(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
intersectLineSphere	include/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineSphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectLineTriangle	include/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayPlane	include/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayPlane$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRaySphere	include/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRaySphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayTriangle	include/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
inverse	include/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> inverse(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
inverse	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> inverse(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
inverse	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> inverse(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
inverseTranspose	include/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> inverseTranspose(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
inverseTranspose	include/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> inverseTranspose(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
inverseTranspose	include/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> inverseTranspose(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
inversesqrt	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType inversesqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
inversesqrt	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> inversesqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
invert	include/imgui/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
io	include/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
io	include/glm/gtx/io.inl	/^namespace io$/;"	n	namespace:glm	file:
iround	include/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER int iround(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
iround	include/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> iround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
isCompNull	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isCompNull(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isCompNull	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isCompNull(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isCompNull	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isCompNull(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isCompNull	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isCompNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isIdentity	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isIdentity(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER bool isMultiple(genIUType Value, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isNormalized	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	include/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isOrthogonal	include/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isOrthogonal(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER bool isPowerOfTwo(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isPowerOfTwo(vec<L, T, Q> const& Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
is_aligned	include/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_highp>$/;"	s	namespace:glm::detail
is_aligned	include/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_lowp>$/;"	s	namespace:glm::detail
is_aligned	include/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_mediump>$/;"	s	namespace:glm::detail
is_aligned	include/glm/detail/qualifier.hpp	/^	struct is_aligned$/;"	s	namespace:glm::detail
is_int	include/glm/detail/setup.hpp	/^	struct is_int$/;"	s	namespace:glm::detail
is_int	include/glm/detail/setup.hpp	/^	struct is_int<signed int>$/;"	s	namespace:glm::detail
is_int	include/glm/detail/setup.hpp	/^	struct is_int<unsigned int>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int16>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int64>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int8>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint16>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint64>$/;"	s	namespace:glm::detail
is_int	include/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint8>$/;"	s	namespace:glm::detail
is_mat	include/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.hpp	/^		static bool const is_mat = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.inl	/^	bool const type<T>::is_mat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_mat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_mat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_mat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_mat	include/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_mat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.hpp	/^		static bool const is_quat = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.inl	/^	bool const type<T>::is_quat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_quat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_quat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_quat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_quat	include/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_quat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_separator	imgui/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)$/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_vec	include/glm/gtx/type_trait.hpp	/^		static bool const is_vec = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.hpp	/^		static bool const is_vec = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.inl	/^	bool const type<T>::is_vec;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_vec;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_vec;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_vec;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_vec	include/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_vec;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_word_boundary	include/imgui/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	imgui/imgui_widgets.cpp	/^static int is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	imgui/imgui_widgets.cpp	/^static int is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
isdenormal	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER bool isdenormal(T const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isdenormal	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<1, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<1,T,Q>::bool_type
isdenormal	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<2, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<2,T,Q>::bool_type
isdenormal	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<3, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<3,T,Q>::bool_type
isdenormal	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<4, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<4,T,Q>::bool_type
isfinite	include/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER bool isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isfinite	include/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<1, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,bool,Q>
isfinite	include/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isfinite	include/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isfinite	include/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isinf	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isinf(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isinf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isinf(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isinf	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isinf(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isnan	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isnan(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isnan	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isnan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isnan	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isnan(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
iterator	include/imgui/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
ivec1	include/glm/ext/vector_int1.hpp	/^	typedef vec<1, int, defaultp>			ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,defaultp>
ivec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, defaultp>	ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
ivec2	include/glm/ext/vector_int2.hpp	/^	typedef vec<2, int, defaultp>		ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,defaultp>
ivec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, defaultp>	ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
ivec3	include/glm/ext/vector_int3.hpp	/^	typedef vec<3, int, defaultp>		ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,defaultp>
ivec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, defaultp>	ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
ivec4	include/glm/ext/vector_int4.hpp	/^	typedef vec<4, int, defaultp>		ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,defaultp>
ivec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, defaultp>	ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
kern	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	include/imgui/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
khronos_float_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef          float         khronos_float_t;$/;"	t	typeref:typename:float
khronos_int16_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   short int     khronos_int16_t;$/;"	t	typeref:typename:signed short int
khronos_int64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef          int64_t       khronos_int64_t;$/;"	t	typeref:typename:int64_t
khronos_int64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   __int64       khronos_int64_t;$/;"	t	typeref:typename:signed __int64
khronos_int64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   long long     khronos_int64_t;$/;"	t	typeref:typename:signed long long
khronos_int8_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   char          khronos_int8_t;$/;"	t	typeref:typename:signed char
khronos_intptr_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t	typeref:typename:signed long int
khronos_intptr_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t	typeref:typename:signed long long int
khronos_ssize_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t	typeref:typename:signed long int
khronos_ssize_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t	typeref:typename:signed long long int
khronos_uint16_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t	typeref:typename:unsigned short int
khronos_uint64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef          uint64_t      khronos_uint64_t;$/;"	t	typeref:typename:uint64_t
khronos_uint64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned __int64       khronos_uint64_t;$/;"	t	typeref:typename:unsigned __int64
khronos_uint64_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned long long     khronos_uint64_t;$/;"	t	typeref:typename:unsigned long long
khronos_uint8_t	include/imgui/imgui_impl_opengl3_loader.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t	typeref:typename:unsigned char
l1Norm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l1Norm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lMaxNorm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lMaxNorm(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lMaxNorm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lMaxNorm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ldexp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType ldexp(genType const& x, int const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ldexp	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
leftHanded	include/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool leftHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
length	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType length(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length	include/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_quat.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::qua	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 1;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 3;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	include/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::tdualquat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	include/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anonda15fd810508	typeref:typename:int
length2	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T length2(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length2	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER genType length2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length2	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T length2(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
length_t	include/glm/detail/setup.hpp	/^		typedef int length_t;$/;"	t	namespace:glm	typeref:typename:int
length_t	include/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm	typeref:typename:size_t
length_type	include/glm/detail/type_mat2x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat2x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat2x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat3x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat3x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat3x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat4x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat4x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_mat4x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	include/glm/detail/type_quat.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::qua	typeref:typename:length_t
length_type	include/glm/detail/type_vec1.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	include/glm/detail/type_vec2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	include/glm/detail/type_vec3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	include/glm/detail/type_vec4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	include/glm/gtx/dual_quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tdualquat	typeref:typename:length_t
lerp	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> lerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
lerp	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> lerp(const vec<2, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
lerp	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> lerp(const vec<3, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
lerp	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> lerp(const vec<4, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
lerp	include/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}												/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lerp	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> lerp(tdualquat<T, Q> const& x, tdualquat<T, Q> const& y, T c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
lessThan	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThan	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> lessThan(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
lessThan	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
lessThanEqual	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThanEqual	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> lessThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
lessThanEqual	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
levels	include/glm/gtx/texture.inl	/^	inline T levels(T Extent)$/;"	f	namespace:glm	typeref:typename:T
levels	include/glm/gtx/texture.inl	/^	inline T levels(vec<L, T, Q> const& Extent)$/;"	f	namespace:glm	typeref:typename:T
libGL	glad.c	/^static HMODULE libGL;$/;"	v	typeref:typename:HMODULE	file:
libGL	glad.c	/^static void* libGL;$/;"	v	typeref:typename:void *	file:
libgl	include/imgui/imgui_impl_opengl3_loader.h	/^static HMODULE libgl;$/;"	v	typeref:typename:HMODULE
linearGradient	include/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T linearGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
linearInterpolation	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType linearInterpolation(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType linearRand(genType Min, genType Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> linearRand(vec<L, T, Q> const& Min, vec<L, T, Q> const& Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
literal	include/glm/gtx/string_cast.inl	/^	struct literal$/;"	s	namespace:glm::detail	file:
literal	include/glm/gtx/string_cast.inl	/^	struct literal<T, true>$/;"	s	namespace:glm::detail	file:
literal	include/glm/gtx/string_cast.inl	/^	struct literal<int64_t, false>$/;"	s	namespace:glm::detail	file:
literal	include/glm/gtx/string_cast.inl	/^	struct literal<uint64_t, false>$/;"	s	namespace:glm::detail	file:
ln_ln_two	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_ten	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ten()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_two	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
load_GL_VERSION_1_0	glad.c	/^static void load_GL_VERSION_1_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_1	glad.c	/^static void load_GL_VERSION_1_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_2	glad.c	/^static void load_GL_VERSION_1_2(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_3	glad.c	/^static void load_GL_VERSION_1_3(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_4	glad.c	/^static void load_GL_VERSION_1_4(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_5	glad.c	/^static void load_GL_VERSION_1_5(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_2_0	glad.c	/^static void load_GL_VERSION_2_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_2_1	glad.c	/^static void load_GL_VERSION_2_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_0	glad.c	/^static void load_GL_VERSION_3_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_1	glad.c	/^static void load_GL_VERSION_3_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_2	glad.c	/^static void load_GL_VERSION_3_2(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_3	glad.c	/^static void load_GL_VERSION_3_3(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_procs	include/imgui/imgui_impl_opengl3_loader.h	/^static void load_procs(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:void
loca	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
locale_	include/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:locale_type
locale_type	include/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::locale const
log	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log	include/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> log(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
log	include/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER genType log(genType const& x, genType const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log	include/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x, vec<L, T, Q> const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log2	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType log2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log2	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
lookAt	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtLH	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtLH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtRH	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lowestBitValue	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType lowestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
lowestBitValue	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> lowestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
lowp	include/glm/detail/qualifier.hpp	/^		lowp = packed_lowp, \/\/\/< By default lowp qualifier is also packed$/;"	e	enum:glm::qualifier
lowp_bvec1	include/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, lowp>			lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec1	include/glm/fwd.hpp	/^	typedef vec<1, bool, lowp>		lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec2	include/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec2	include/glm/fwd.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec3	include/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec3	include/glm/fwd.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec4	include/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_bvec4	include/glm/fwd.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,lowp>
lowp_dmat2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_dmat2x2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x3	include/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x4	include/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_dmat3x2	include/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x4	include/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_dmat4x2	include/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x3	include/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dquat	include/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, lowp>		lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dquat	include/glm/fwd.hpp	/^	typedef qua<double, lowp>			lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_dvec1	include/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, lowp>		lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,lowp>
lowp_dvec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_dvec2	include/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, lowp>		lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,lowp>
lowp_dvec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_dvec3	include/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, lowp>		lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,lowp>
lowp_dvec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_dvec4	include/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, lowp>		lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,lowp>
lowp_dvec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f32	include/glm/fwd.hpp	/^	typedef float					lowp_f32;$/;"	t	namespace:glm	typeref:typename:float
lowp_f32	include/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_f32mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
lowp_f32mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
lowp_f32mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
lowp_f32mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32quat	include/glm/fwd.hpp	/^	typedef qua<f32, lowp>				lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32vec1	include/glm/fwd.hpp	/^	typedef vec<1, f32, lowp>			lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec2	include/glm/fwd.hpp	/^	typedef vec<2, f32, lowp>			lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec3	include/glm/fwd.hpp	/^	typedef vec<3, f32, lowp>			lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec4	include/glm/fwd.hpp	/^	typedef vec<4, f32, lowp>			lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f64	include/glm/fwd.hpp	/^	typedef double					lowp_f64;$/;"	t	namespace:glm	typeref:typename:double
lowp_f64	include/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_f64mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x2
lowp_f64mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f64, lowp>		lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f64, lowp>		lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x3
lowp_f64mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f64, lowp>		lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f64, lowp>		lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4	include/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x4
lowp_f64mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f64, lowp>		lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f64, lowp>		lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64quat	include/glm/fwd.hpp	/^	typedef qua<f64, lowp>				lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64vec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_float32	include/glm/fwd.hpp	/^	typedef float					lowp_float32;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32	include/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float32_t	include/glm/fwd.hpp	/^	typedef float					lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32_t	include/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float64	include/glm/fwd.hpp	/^	typedef double					lowp_float64;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64	include/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_float64_t	include/glm/fwd.hpp	/^	typedef double					lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64_t	include/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
lowp_fmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2	include/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:lowp_fmat2x2
lowp_fmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3	include/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:lowp_fmat3x3
lowp_fmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4	include/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:lowp_fmat4x4
lowp_fmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fquat	include/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_fvec1	include/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, lowp> lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec2	include/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, lowp> lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec3	include/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, lowp> lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec4	include/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_fvec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, lowp> lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_i16	include/glm/fwd.hpp	/^	typedef int16					lowp_i16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_i16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_i16vec1	include/glm/fwd.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec2	include/glm/fwd.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec3	include/glm/fwd.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec4	include/glm/fwd.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i32	include/glm/fwd.hpp	/^	typedef int32					lowp_i32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_i32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_i32vec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i64	include/glm/fwd.hpp	/^	typedef int64					lowp_i64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_i64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_i64vec1	include/glm/fwd.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec2	include/glm/fwd.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec3	include/glm/fwd.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec4	include/glm/fwd.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i8	include/glm/fwd.hpp	/^	typedef int8					lowp_i8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_i8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_i8vec1	include/glm/fwd.hpp	/^	typedef vec<1, i8, lowp>		lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec2	include/glm/fwd.hpp	/^	typedef vec<2, i8, lowp>		lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec3	include/glm/fwd.hpp	/^	typedef vec<3, i8, lowp>		lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec4	include/glm/fwd.hpp	/^	typedef vec<4, i8, lowp>		lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_i8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,lowp>
lowp_imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,lowp>
lowp_imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,lowp>
lowp_imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,lowp>
lowp_imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,lowp>
lowp_imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,lowp>
lowp_imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_int16	include/glm/fwd.hpp	/^	typedef int16					lowp_int16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16_t	include/glm/fwd.hpp	/^	typedef int16					lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int32	include/glm/fwd.hpp	/^	typedef int32					lowp_int32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32_t	include/glm/fwd.hpp	/^	typedef int32					lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int64	include/glm/fwd.hpp	/^	typedef int64					lowp_int64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64_t	include/glm/fwd.hpp	/^	typedef int64					lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int8	include/glm/fwd.hpp	/^	typedef int8					lowp_int8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8_t	include/glm/fwd.hpp	/^	typedef int8					lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_ivec1	include/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, lowp>			lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,lowp>
lowp_ivec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_ivec2	include/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,lowp>
lowp_ivec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_ivec3	include/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,lowp>
lowp_ivec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_ivec4	include/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,lowp>
lowp_ivec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_mat2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x3	include/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,lowp>
lowp_mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_mat2x4	include/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,lowp>
lowp_mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_mat3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x2	include/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,lowp>
lowp_mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_mat3x3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x4	include/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,lowp>
lowp_mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_mat4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_mat4x2	include/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,lowp>
lowp_mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_mat4x3	include/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,lowp>
lowp_mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_mat4x4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_quat	include/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, lowp>		lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_quat	include/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_u16	include/glm/fwd.hpp	/^	typedef uint16					lowp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_u16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_u16vec1	include/glm/fwd.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec2	include/glm/fwd.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec3	include/glm/fwd.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec4	include/glm/fwd.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u32	include/glm/fwd.hpp	/^	typedef uint32					lowp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_u32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_u32vec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u64	include/glm/fwd.hpp	/^	typedef uint64					lowp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_u64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_u64vec1	include/glm/fwd.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec2	include/glm/fwd.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec3	include/glm/fwd.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec4	include/glm/fwd.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u8	include/glm/fwd.hpp	/^	typedef uint8					lowp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_u8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_u8vec1	include/glm/fwd.hpp	/^	typedef vec<1, u8, lowp>		lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec2	include/glm/fwd.hpp	/^	typedef vec<2, u8, lowp>		lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec3	include/glm/fwd.hpp	/^	typedef vec<3, u8, lowp>		lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec4	include/glm/fwd.hpp	/^	typedef vec<4, u8, lowp>		lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_u8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_uint16	include/glm/fwd.hpp	/^	typedef uint16					lowp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16_t	include/glm/fwd.hpp	/^	typedef uint16					lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint32	include/glm/fwd.hpp	/^	typedef uint32					lowp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32_t	include/glm/fwd.hpp	/^	typedef uint32					lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint64	include/glm/fwd.hpp	/^	typedef uint64					lowp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64_t	include/glm/fwd.hpp	/^	typedef uint64					lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint8	include/glm/fwd.hpp	/^	typedef uint8					lowp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8_t	include/glm/fwd.hpp	/^	typedef uint8					lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,lowp>
lowp_umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,lowp>
lowp_umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,lowp>
lowp_umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,lowp>
lowp_umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,lowp>
lowp_umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,lowp>
lowp_umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_uvec1	include/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, lowp>			lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,lowp>
lowp_uvec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_uvec2	include/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,lowp>
lowp_uvec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_uvec3	include/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,lowp>
lowp_uvec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_uvec4	include/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,lowp>
lowp_uvec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_vec1	include/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec1	include/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec2	include/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec2	include/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec3	include/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec3	include/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec4	include/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_vec4	include/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lsw	include/glm/ext/scalar_ulp.inl	/^		int lsw;$/;"	m	struct:__anon6c3ce53e020a::__anon6c3ce53e0308	typeref:typename:int	file:
luminosity	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER T luminosity(const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& v, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	include/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& x, vec<3, T, Q> const& y, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
madd_lane	include/glm/simd/neon.h	/^		static float32x4_t madd_lane(float32x4_t acc, float32x4_t v, float32x4_t vlane, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
main	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	Makefile	/^main: cmake_check_build_system$/;"	t
main	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	main.cpp	/^int main(){$/;"	f	typeref:typename:int
main.cpp.i	Makefile	/^main.cpp.i:$/;"	t
main.cpp.i	cmake-build/Makefile	/^main.cpp.i:$/;"	t
main.cpp.o	Makefile	/^main.cpp.o:$/;"	t
main.cpp.o	cmake-build/Makefile	/^main.cpp.o:$/;"	t
main.cpp.s	Makefile	/^main.cpp.s:$/;"	t
main.cpp.s	cmake-build/Makefile	/^main.cpp.s:$/;"	t
main.i	Makefile	/^main.i: main.cpp.i$/;"	t
main.i	cmake-build/Makefile	/^main.i: main.cpp.i$/;"	t
main.o	Makefile	/^main.o: main.cpp.o$/;"	t
main.o	cmake-build/Makefile	/^main.o: main.cpp.o$/;"	t
main.s	Makefile	/^main.s: main.cpp.s$/;"	t
main.s	cmake-build/Makefile	/^main.s: main.cpp.s$/;"	t
main/fast	Makefile	/^main\/fast:$/;"	t
main_clipboard	imgui/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
major	include/glad/glad.h	/^    int major;$/;"	m	struct:gladGLversionStruct	typeref:typename:int
major	include/imgui/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon91aaf4b10208	typeref:typename:int
make_mat2	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x2	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x3	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, defaultp> make_mat2x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,defaultp>
make_mat2x4	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, defaultp> make_mat2x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,defaultp>
make_mat3	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x2	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, defaultp> make_mat3x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,defaultp>
make_mat3x3	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x4	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, defaultp> make_mat3x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,defaultp>
make_mat4	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_mat4x2	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, defaultp> make_mat4x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,defaultp>
make_mat4x3	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, defaultp> make_mat4x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,defaultp>
make_mat4x4	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_quat	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER qua<T, defaultp> make_quat(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,defaultp>
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<char>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<int64>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<int>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<long>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<short>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<signed char>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<uint64>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned char>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned int>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned long>$/;"	s	namespace:glm::detail
make_unsigned	include/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned short>$/;"	s	namespace:glm::detail
make_vec1	include/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	include/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	include/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec1	include/glm/gtc/type_ptr.inl	/^	inline vec<1, T, Q> make_vec1(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<1,T,Q>
make_vec2	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> make_vec2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
make_vec2	include/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	include/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	include/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec2	include/glm/gtc/type_ptr.inl	/^	inline vec<2, T, Q> make_vec2(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<2,T,Q>
make_vec3	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> make_vec3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
make_vec3	include/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	include/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	include/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec3	include/glm/gtc/type_ptr.inl	/^	inline vec<3, T, Q> make_vec3(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<3,T,Q>
make_vec4	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, defaultp> make_vec4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,defaultp>
make_vec4	include/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	include/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	include/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
make_vec4	include/glm/gtc/type_ptr.inl	/^	inline vec<4, T, Q> make_vec4(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:vec<4,T,Q>
mantissa	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((1 << 23) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
mantissa	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((int_type(1) << 52) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
mask	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER T mask(T Bits)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
mask	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType mask(genIUType Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
mask	include/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mask(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	include/glm/detail/type_mat2x2.hpp	/^	struct mat<2, 2, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(vec<2, V1, Q> const& v1, vec<2, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.hpp	/^	struct mat<2, 3, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR  mat<2, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.hpp	/^	struct mat<2, 4, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.hpp	/^	struct mat<3, 2, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.hpp	/^	struct mat<3, 3, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.hpp	/^	struct mat<3, 4, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(vec<4, V1, Q> const& v0, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.hpp	/^	struct mat<4, 2, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.hpp	/^	struct mat<4, 3, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(T const& s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.hpp	/^	struct mat<4, 4, T, Q>$/;"	s	namespace:glm
mat	include/glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(T const& s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat2	include/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x2	include/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x3	include/glm/ext/matrix_float2x3.hpp	/^	typedef mat<2, 3, float, defaultp>		mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,defaultp>
mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
mat2x4	include/glm/ext/matrix_float2x4.hpp	/^	typedef mat<2, 4, float, defaultp>		mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,defaultp>
mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
mat2x4_cast	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat2x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
mat3	include/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3_cast	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat3_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
mat3x2	include/glm/ext/matrix_float3x2.hpp	/^	typedef mat<3, 2, float, defaultp>			mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,defaultp>
mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
mat3x3	include/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3x4	include/glm/ext/matrix_float3x4.hpp	/^	typedef mat<3, 4, float, defaultp>			mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,defaultp>
mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
mat3x4_cast	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat3x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
mat4	include/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
mat4_cast	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat4_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
mat4x2	include/glm/ext/matrix_float4x2.hpp	/^	typedef mat<4, 2, float, defaultp>			mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,defaultp>
mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
mat4x3	include/glm/ext/matrix_float4x3.hpp	/^	typedef mat<4, 3, float, defaultp>			mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,defaultp>
mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
mat4x4	include/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
matrixCompMult	include/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> matrixCompMult(mat<C, R, T, Q> const& x, mat<C, R, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
matrixCross3	include/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> matrixCross3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
matrixCross4	include/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> matrixCross4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
max	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType max(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
max	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
max	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max_loaded_major	glad.c	/^static int max_loaded_major;$/;"	v	typeref:typename:int	file:
max_loaded_minor	glad.c	/^static int max_loaded_minor;$/;"	v	typeref:typename:int	file:
max_size	include/imgui/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_x	include/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:stbtt_int32
max_y	include/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:stbtt_int32
mediump	include/glm/detail/qualifier.hpp	/^		mediump = packed_mediump, \/\/\/< By default mediump qualifier is also packed$/;"	e	enum:glm::qualifier
mediump_bvec1	include/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, mediump>		mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec1	include/glm/fwd.hpp	/^	typedef vec<1, bool, mediump>	mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec2	include/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec2	include/glm/fwd.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec3	include/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec3	include/glm/fwd.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec4	include/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_bvec4	include/glm/fwd.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_ddualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,mediump>
mediump_dmat2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_dmat2x2	include/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x3	include/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x4	include/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_dmat3x2	include/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x3	include/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x4	include/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_dmat4x2	include/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x3	include/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x4	include/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dquat	include/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, mediump>	mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dquat	include/glm/fwd.hpp	/^	typedef qua<double, mediump>		mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_dvec1	include/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,mediump>
mediump_dvec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_dvec2	include/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,mediump>
mediump_dvec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_dvec3	include/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,mediump>
mediump_dvec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_dvec4	include/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,mediump>
mediump_dvec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f32	include/glm/fwd.hpp	/^	typedef float					mediump_f32;$/;"	t	namespace:glm	typeref:typename:float
mediump_f32	include/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_f32mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
mediump_f32mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
mediump_f32mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
mediump_f32mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32quat	include/glm/fwd.hpp	/^	typedef qua<f32, mediump>			mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32vec1	include/glm/fwd.hpp	/^	typedef vec<1, f32, mediump>		mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec2	include/glm/fwd.hpp	/^	typedef vec<2, f32, mediump>		mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec3	include/glm/fwd.hpp	/^	typedef vec<3, f32, mediump>		mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec4	include/glm/fwd.hpp	/^	typedef vec<4, f32, mediump>		mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f64	include/glm/fwd.hpp	/^	typedef double					mediump_f64;$/;"	t	namespace:glm	typeref:typename:double
mediump_f64	include/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_f64mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x2
mediump_f64mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f64, mediump>		mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f64, mediump>		mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x3
mediump_f64mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f64, mediump>		mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f64, mediump>		mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4	include/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x4
mediump_f64mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f64, mediump>		mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f64, mediump>		mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64quat	include/glm/fwd.hpp	/^	typedef qua<f64, mediump>			mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64quat	include/glm/gtc/type_precision.hpp	/^	typedef qua<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64vec1	include/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec2	include/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec3	include/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec4	include/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_fdualquat	include/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_float32	include/glm/fwd.hpp	/^	typedef float					mediump_float32;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32	include/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float32_t	include/glm/fwd.hpp	/^	typedef float					mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32_t	include/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float64	include/glm/fwd.hpp	/^	typedef double					mediump_float64;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64	include/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_float64_t	include/glm/fwd.hpp	/^	typedef double					mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64_t	include/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
mediump_fmat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2	include/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mediump_fmat2x2
mediump_fmat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat2x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3	include/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mediump_fmat3x3
mediump_fmat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat3x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4	include/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mediump_fmat4x4
mediump_fmat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x2	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x3	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4x4	include/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fquat	include/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_fvec1	include/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, mediump> mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec2	include/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, mediump> mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec3	include/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, mediump> mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec4	include/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_fvec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, mediump> mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_i16	include/glm/fwd.hpp	/^	typedef int16					mediump_i16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_i16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_i16vec1	include/glm/fwd.hpp	/^	typedef vec<1, i16, mediump>	mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec2	include/glm/fwd.hpp	/^	typedef vec<2, i16, mediump>	mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec3	include/glm/fwd.hpp	/^	typedef vec<3, i16, mediump>	mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec4	include/glm/fwd.hpp	/^	typedef vec<4, i16, mediump>	mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i32	include/glm/fwd.hpp	/^	typedef int32					mediump_i32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_i32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_i32vec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>	mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>	mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>	mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>	mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i64	include/glm/fwd.hpp	/^	typedef int64					mediump_i64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_i64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_i64vec1	include/glm/fwd.hpp	/^	typedef vec<1, i64, mediump>	mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec2	include/glm/fwd.hpp	/^	typedef vec<2, i64, mediump>	mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec3	include/glm/fwd.hpp	/^	typedef vec<3, i64, mediump>	mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec4	include/glm/fwd.hpp	/^	typedef vec<4, i64, mediump>	mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i8	include/glm/fwd.hpp	/^	typedef int8					mediump_i8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_i8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_i8vec1	include/glm/fwd.hpp	/^	typedef vec<1, i8, mediump>		mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec2	include/glm/fwd.hpp	/^	typedef vec<2, i8, mediump>		mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec3	include/glm/fwd.hpp	/^	typedef vec<3, i8, mediump>		mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec4	include/glm/fwd.hpp	/^	typedef vec<4, i8, mediump>		mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_i8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_imat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,mediump>
mediump_imat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,mediump>
mediump_imat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,mediump>
mediump_imat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,mediump>
mediump_imat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_imat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,mediump>
mediump_imat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,mediump>
mediump_imat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_int16	include/glm/fwd.hpp	/^	typedef int16					mediump_int16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16_t	include/glm/fwd.hpp	/^	typedef int16					mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int32	include/glm/fwd.hpp	/^	typedef int32					mediump_int32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32_t	include/glm/fwd.hpp	/^	typedef int32					mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int64	include/glm/fwd.hpp	/^	typedef int64					mediump_int64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64_t	include/glm/fwd.hpp	/^	typedef int64					mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int8	include/glm/fwd.hpp	/^	typedef int8					mediump_int8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8_t	include/glm/fwd.hpp	/^	typedef int8					mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_ivec1	include/glm/ext/vector_int1_precision.hpp	/^	typedef vec<1, int, mediump>		mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,mediump>
mediump_ivec1	include/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>	mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_ivec2	include/glm/ext/vector_int2_precision.hpp	/^	typedef vec<2, int, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,mediump>
mediump_ivec2	include/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_ivec3	include/glm/ext/vector_int3_precision.hpp	/^	typedef vec<3, int, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,mediump>
mediump_ivec3	include/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_ivec4	include/glm/ext/vector_int4_precision.hpp	/^	typedef vec<4, int, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,mediump>
mediump_ivec4	include/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_mat2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x2	include/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2x2	include/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x3	include/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, mediump>	mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,mediump>
mediump_mat2x3	include/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_mat2x4	include/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, mediump>	mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,mediump>
mediump_mat2x4	include/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_mat3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x2	include/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, mediump>	mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,mediump>
mediump_mat3x2	include/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_mat3x3	include/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3x3	include/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x4	include/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, mediump>	mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,mediump>
mediump_mat3x4	include/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_mat4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_mat4x2	include/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, mediump>	mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,mediump>
mediump_mat4x2	include/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_mat4x3	include/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, mediump>	mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,mediump>
mediump_mat4x3	include/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_mat4x4	include/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4x4	include/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_quat	include/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, mediump>		mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_quat	include/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_u16	include/glm/fwd.hpp	/^	typedef uint16					mediump_u16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_u16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_u16vec1	include/glm/fwd.hpp	/^	typedef vec<1, u16, mediump>	mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec2	include/glm/fwd.hpp	/^	typedef vec<2, u16, mediump>	mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec3	include/glm/fwd.hpp	/^	typedef vec<3, u16, mediump>	mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec4	include/glm/fwd.hpp	/^	typedef vec<4, u16, mediump>	mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u32	include/glm/fwd.hpp	/^	typedef uint32					mediump_u32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_u32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_u32vec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>	mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>	mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>	mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>	mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u64	include/glm/fwd.hpp	/^	typedef uint64					mediump_u64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_u64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_u64vec1	include/glm/fwd.hpp	/^	typedef vec<1, u64, mediump>	mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec2	include/glm/fwd.hpp	/^	typedef vec<2, u64, mediump>	mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec3	include/glm/fwd.hpp	/^	typedef vec<3, u64, mediump>	mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec4	include/glm/fwd.hpp	/^	typedef vec<4, u64, mediump>	mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u8	include/glm/fwd.hpp	/^	typedef uint8					mediump_u8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_u8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_u8vec1	include/glm/fwd.hpp	/^	typedef vec<1, u8, mediump>		mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec2	include/glm/fwd.hpp	/^	typedef vec<2, u8, mediump>		mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec3	include/glm/fwd.hpp	/^	typedef vec<3, u8, mediump>		mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec4	include/glm/fwd.hpp	/^	typedef vec<4, u8, mediump>		mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_u8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_uint16	include/glm/fwd.hpp	/^	typedef uint16					mediump_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16_t	include/glm/fwd.hpp	/^	typedef uint16					mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint32	include/glm/fwd.hpp	/^	typedef uint32					mediump_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32_t	include/glm/fwd.hpp	/^	typedef uint32					mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint64	include/glm/fwd.hpp	/^	typedef uint64					mediump_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64_t	include/glm/fwd.hpp	/^	typedef uint64					mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint8	include/glm/fwd.hpp	/^	typedef uint8					mediump_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8_t	include/glm/fwd.hpp	/^	typedef uint8					mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,mediump>
mediump_umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,mediump>
mediump_umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,mediump>
mediump_umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,mediump>
mediump_umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,mediump>
mediump_umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,mediump>
mediump_umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_uvec1	include/glm/ext/vector_uint1_precision.hpp	/^	typedef vec<1, unsigned int, mediump>		mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,mediump>
mediump_uvec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>	mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_uvec2	include/glm/ext/vector_uint2_precision.hpp	/^	typedef vec<2, unsigned int, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,mediump>
mediump_uvec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_uvec3	include/glm/ext/vector_uint3_precision.hpp	/^	typedef vec<3, unsigned int, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,mediump>
mediump_uvec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_uvec4	include/glm/ext/vector_uint4_precision.hpp	/^	typedef vec<4, unsigned int, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,mediump>
mediump_uvec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_vec1	include/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec1	include/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec2	include/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec2	include/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec3	include/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec3	include/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec4	include/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_vec4	include/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
min	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType min(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
min	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	include/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	include/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
min	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	include/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min_x	include/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:stbtt_int32
min_y	include/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anona175a7780f08	typeref:typename:stbtt_int32
minor	include/glad/glad.h	/^    int minor;$/;"	m	struct:gladGLversionStruct	typeref:typename:int
minor	include/imgui/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon91aaf4b10208	typeref:typename:int
mirrorClamp	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorClamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorClamp	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorClamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mirrorRepeat	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorRepeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorRepeat	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorRepeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genTypeT mix(genTypeT x, genTypeT y, genTypeU a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genTypeT
mix	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	include/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, U a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	include/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, mat</;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> mix(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
mixedProduct	include/glm/gtx/mixed_product.inl	/^	GLM_FUNC_QUALIFIER T mixedProduct$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
mod	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType mod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mod	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int mod(int x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
mod	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint mod(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
mod289	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
modf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType modf(genType x, genType & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
modf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<1, T, Q> modf(vec<1, T, Q> const& x, vec<1, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
modf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> modf(vec<2, T, Q> const& x, vec<2, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
modf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> modf(vec<3, T, Q> const& x, vec<3, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
modf	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> modf(vec<4, T, Q> const& x, vec<4, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
msw	include/glm/ext/scalar_ulp.inl	/^		int msw;$/;"	m	struct:__anon6c3ce53e020a::__anon6c3ce53e0308	typeref:typename:int	file:
mul_lane	include/glm/simd/neon.h	/^		static float32x4_t mul_lane(float32x4_t v, float32x4_t vlane, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
negative	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR bool negative() const { return i < 0; }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR bool
neon	include/glm/simd/neon.h	/^	namespace neon {$/;"	n	namespace:glm
newline	include/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
next	include/imgui/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	include/imgui/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	include/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
nextFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T nextFloat(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
nextFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double nextFloat(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
nextFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float nextFloat(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
nextFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextMultiple	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType nextMultiple(genIUType Source, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
nextMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextMultiple(vec<L, T, Q> const& Source, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextPowerOfTwo	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType nextPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
nextPowerOfTwo	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_chunk	include/imgui/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T next_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double next_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float next_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextafter	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double nextafter(double x, double y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER double
nextafterf	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float nextafterf(float x, float y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
nlz	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int nlz(unsigned int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
nodes	include/imgui/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
normalize	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> normalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
normalize	include/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> normalize(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
normalize	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> normalize(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
normalizeDot	include/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T normalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
notEqual	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	include/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> notEqual(mat<C, R, T, Q> const& a, mat<C, R, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
notEqual	include/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> notEqual(mat<C, R, T, Q> const& x, mat<C, R, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
notEqual	include/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	include/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	include/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, genType cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	include/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	include/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool notEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
not_	include/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> not_(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
not_	include/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool not_$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
numGlyphs	include/imgui/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	include/imgui/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anonda15fd810408	typeref:typename:int
num_chars	include/imgui/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anona175a7780508	typeref:typename:int
num_exts_i	glad.c	/^static int num_exts_i = 0;$/;"	v	typeref:typename:int	file:
num_nodes	include/imgui/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	include/imgui/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	include/imgui/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anona175a7780f08	typeref:typename:int
numeric_limits	include/glm/detail/setup.hpp	/^	using numeric_limits = ::std::numeric_limits<T>;$/;"	t	namespace:glm::std	typeref:typename:::std::numeric_limits<T>
offset_from_ptr	include/imgui/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
one	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_root_two	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_two_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ones32	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int ones32(unsigned int x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
ooga_booga_solve	include/basic_solver.h	/^std::vector<Operation> BasicSolver::ooga_booga_solve(Cubic cube) {$/;"	f	class:BasicSolver	typeref:typename:std::vector<Operation>
op_B	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_B_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_D	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_D_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_F	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_F_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_L	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_L_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_R	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_R_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_U	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_U_inv	shared.h	/^    enum Operation {op_R,op_R_inv,op_L,op_L_inv,op_U,op_U_inv,op_D,op_D_inv,op_B,op_B_inv,op_F,o/;"	e	enum:Operation
op_div	include/glm/detail/_swizzle.hpp	/^		struct op_div$/;"	s	struct:glm::detail::_swizzle_base2
op_equal	include/glm/detail/_swizzle.hpp	/^		struct op_equal$/;"	s	struct:glm::detail::_swizzle_base2
op_minus	include/glm/detail/_swizzle.hpp	/^		struct op_minus$/;"	s	struct:glm::detail::_swizzle_base2
op_mul	include/glm/detail/_swizzle.hpp	/^		struct op_mul$/;"	s	struct:glm::detail::_swizzle_base2
op_plus	include/glm/detail/_swizzle.hpp	/^		struct op_plus$/;"	s	struct:glm::detail::_swizzle_base2
openBounded	include/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> openBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
open_gl	glad.c	/^int open_gl(void) {$/;"	f	typeref:typename:int	file:
open_libgl	include/imgui/imgui_impl_opengl3_loader.h	/^static int open_libgl(void)$/;"	f	typeref:typename:int
operation	include/cubic.h	/^    Operation operation;$/;"	m	class:Cubic	typeref:typename:Operation
operator !=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator %	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &&	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator &&	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator&&(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator &&	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator &&	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator &=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ()	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<2, T, Q> operator ()()  const { return vec<2, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
operator ()	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<3, T, Q> operator ()()  const { return vec<3, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator ()	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<4, T, Q> operator ()()  const { return vec<4, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator ()	include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, float, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
operator ()	include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, int, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
operator ()	include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, uint, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 2, T, Q>>::operator()(glm::mat<2, 2, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 3, T, Q>>::operator()(glm::mat<2, 3, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 4, T, Q>>::operator()(glm::mat<2, 4, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 2, T, Q>>::operator()(glm::mat<3, 2, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 3, T, Q>>::operator()(glm::mat<3, 3, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 4, T, Q>>::operator()(glm::mat<3, 4, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 2, T,Q>>::operator()(glm::mat<4, 2, T,Q> const& m) c/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 3, T,Q>>::operator()(glm::mat<4, 3, T,Q> const& m) c/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 4, T,Q>>::operator()(glm::mat<4, 4, T, Q> const& m) /;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::qua<T, Q>>::operator()(glm::qua<T,Q> const& q) const$/;"	f	class:std::hash::qua	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tdualquat<T, Q>>::operator()(glm::tdualquat<T, Q> const& q)/;"	f	class:std::hash::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<1, T, Q>>::operator()(glm::vec<1, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<2, T, Q>>::operator()(glm::vec<2, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<3, T, Q>>::operator()(glm::vec<3, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	include/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<4, T, Q>>::operator()(glm::vec<4, T, Q> const& v) const$/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator () 	include/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e *= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_mul	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	include/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e += t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_plus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	include/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e -= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_minus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	include/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e = t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_equal	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	include/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e \/= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_div	typeref:typename:GLM_FUNC_QUALIFIER void
operator *	include/glm/detail/func_matrix_simd.inl	/^	operator*(mat<4, 4, float, Q> const & m1, mat<4, 4, float, Q> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename std::enable_if<detail::is_aligned<Q>::value,mat<4,4,float,Q>>::type
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type
operator *	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::row_type
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::col_type
operator *	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::row_type
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::col_type operator*(mat<2, 4, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::col_type
operator *	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::row_type operator*(typename mat<2, 4, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::row_type
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::col_type operator*(mat<3, 2, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::col_type
operator *	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::row_type operator*(typename mat<3, 2, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::row_type
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type
operator *	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::row_type
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::col_type
operator *	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::row_type
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::col_type operator*(mat<4, 2, T, Q> const& m, typen/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::col_type
operator *	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::row_type operator*(typename mat<4, 2, T, Q>::col_t/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::row_type
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(T const& s, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::col_type
operator *	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::row_type
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T const  & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type
operator *	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::row_type
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(T const& s, qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(qua<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(qua<T, Q> const& q, vec<3, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, qua<T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(qua<T, Q> const& q, vec<4, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, qua<T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(T const& s, tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& p, tdualquat<T, Q> const& o/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(tdualquat<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(vec<3, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(tdualquat<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(vec<4, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	include/imgui/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x * /;"	f	typeref:typename:ImVec2
operator *	include/imgui/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x * /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	include/imgui/imgui.h	/^static inline ImVec4  operator*(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x * /;"	f	typeref:typename:ImVec4
operator *=	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator *=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator *=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator *=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator *=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator *=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator *=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator *=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator *=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator *=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator *=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator *=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator *=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator *=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator*=(U s)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator *=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator*=(qua<U, Q> const& r)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator *=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator*=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator *=	include/imgui/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x *= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator *=	include/imgui/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)          { lhs.x *= rhs; lhs.y *=/;"	f	typeref:typename:ImVec2 &
operator +	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator +	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator +	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator +	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator +	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator +	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator +	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator +	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator +	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator +	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator+(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator +	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator+(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator +	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q, tdualquat<T, Q> const& p/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	include/imgui/imgui.h	/^static inline ImVec2  operator+(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x + /;"	f	typeref:typename:ImVec2
operator +	include/imgui/imgui.h	/^static inline ImVec4  operator+(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x + /;"	f	typeref:typename:ImVec4
operator ++	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator ++	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator ++	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator ++	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> mat<2, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator ++	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat<2, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator ++	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator ++	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> mat<3, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator ++	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator ++	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator ++	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator ++	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat<3, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator ++	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator ++	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator ++	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> mat<4, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator ++	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator ++	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> mat<4, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator ++	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator ++	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator ++	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ++	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ++	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ++	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ++	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ++	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ++	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ++	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +=	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator +=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator +=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator +=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator +=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator+=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator +=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator +=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator +=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator +=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator +=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator +=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator +=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator +=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator +=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator +=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator +=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator +=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator +=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator +=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator +=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator+=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator +=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	include/imgui/imgui.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x += rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator -	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator -	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator -	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator -	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator -	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator -	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator -	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator -	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator -	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(T const& s, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator -	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator-(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator -	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator-(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator -	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v, T const & scalar/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator-(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator -	include/imgui/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x - /;"	f	typeref:typename:ImVec2
operator -	include/imgui/imgui.h	/^static inline ImVec4  operator-(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x - /;"	f	typeref:typename:ImVec4
operator --	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator --	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator --	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator --	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> mat<2, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator --	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat<2, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator --	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator --	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> mat<3, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator --	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator --	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator --	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator --	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat<3, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator --	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator --	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator --	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> mat<4, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator --	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator --	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> mat<4, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator --	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator --	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator --	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator --	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator --	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator --	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator --	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator --	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator --	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator --	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -=	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator -=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator -=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator -=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator -=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator -=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator -=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator -=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator -=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator -=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator -=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator -=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator -=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator -=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator -=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator -=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator -=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator -=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator -=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator -=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator-=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator -=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	include/imgui/imgui.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x -= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator /	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
operator /	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator\/(mat<2, 2, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type
operator /	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator\/(typename mat<2, 2, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::row_type
operator /	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator\/(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator /	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator\/(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
operator /	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator\/(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator /	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator\/(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
operator /	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator\/(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator /	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator\/(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
operator /	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
operator /	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator\/(mat<3, 3, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type
operator /	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator\/(typename mat<3, 3, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::row_type
operator /	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator\/(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator /	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator\/(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
operator /	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator\/(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator /	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator\/(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
operator /	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator\/(T const& s, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator /	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator\/(mat<4, 3, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
operator /	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(T const& s,	mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
operator /	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator\/(mat<4, 4, T, Q> const& m, type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type
operator /	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator\/(typename mat<4, 4, T, Q>::col_/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::row_type
operator /	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator\/(qua<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator /	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v, T const & scala/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator\/(tdualquat<T, Q> const& q,	T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator /	include/imgui/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	include/imgui/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /=	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator /=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator /=	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator /=	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator /=	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> & mat<2, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator /=	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> & mat<3, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator /=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator /=	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator /=	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> & mat<3, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator /=	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator /=	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator /=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator /=	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator /=	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator\/=(U s)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator /=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(U v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator\/=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator /=	include/imgui/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x \/= rhs.x; lhs./;"	f	typeref:typename:ImVec2 &
operator /=	include/imgui/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)          { lhs.x \/= rhs; lhs.y /;"	f	typeref:typename:ImVec2 &
operator <<	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER  std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, /;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, o/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, p/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, w/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> & operator<<(std::basic_ostream<CTy,CTr>& os, ma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, mat/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const&) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const T& t)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	include/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t& operator=(float_t const& x)$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR float_t &
operator =	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator=(mat<2, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q> &
operator =	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator=(mat<2, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q> &
operator =	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator=(mat<2, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q> &
operator =	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator=(mat<3, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q> &
operator =	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator=(mat<3, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q> &
operator =	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator=(mat<3, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q> &
operator =	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q>& mat<4, 2, T, Q>::operator=(mat<4, 2, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q> &
operator =	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q>& mat<4, 3, T, Q>::operator=(mat<4, 3, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q> &
operator =	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator=(mat<4, 4, U, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q> &
operator =	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator=(qua<T, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator =	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator =	include/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	include/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	include/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	include/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<T, Q> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<U, Q> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	include/imgui/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator >>	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ImU32	include/imgui/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	include/imgui/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[](size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator []	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& operator[](size_t i)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type const& mat<2, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type const &
operator []	include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type& mat<2, 2, T, Q>::operator[](typename mat/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,2,T,Q>::col_type &
operator []	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::col_type const& mat<2, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::col_type const &
operator []	include/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 3, T, Q>::col_type & mat<2, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,3,T,Q>::col_type &
operator []	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::col_type const& mat<2, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::col_type const &
operator []	include/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<2, 4, T, Q>::col_type & mat<2, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<2,4,T,Q>::col_type &
operator []	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::col_type const& mat<3, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::col_type const &
operator []	include/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 2, T, Q>::col_type & mat<3, 2, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,2,T,Q>::col_type &
operator []	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type const& mat<3, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type const &
operator []	include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type & mat<3, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,3,T,Q>::col_type &
operator []	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::col_type const& mat<3, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::col_type const &
operator []	include/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<3, 4, T, Q>::col_type & mat<3, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<3,4,T,Q>::col_type &
operator []	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::col_type const& mat<4, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::col_type const &
operator []	include/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 2, T, Q>::col_type & mat<4, 2, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,2,T,Q>::col_type &
operator []	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::col_type const& mat<4, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::col_type const &
operator []	include/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 3, T, Q>::col_type & mat<4, 3, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,3,T,Q>::col_type &
operator []	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type const &
operator []	include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator[](typename ma/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER typename mat<4,4,T,Q>::col_type &
operator []	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & qua<T, Q>::operator[](typename qua<T, Q>::length_type i)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& qua<T, Q>::operator[](typename qua<T, Q>::length_type/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<1, T, Q>::operator[](typename vec<1, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<2, T, Q>::operator[](typename vec<2, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<2, T, Q>::operator[](typename vec<2, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<3, T, Q>::operator[](typename vec<3, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<4, T, Q>::operator[](typename vec<4, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type & tdualquat<T, Q>::operator[](typename t/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type &
operator []	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type const& tdualquat<T, Q>::operator[](typen/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type const &
operator []	include/imgui/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	include/imgui/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	include/imgui/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator []	include/imgui/imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
operator []	include/imgui/imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	include/imgui/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator [] 	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator [] 	include/imgui/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx == 0 || idx == 1); return ((const fl/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	include/imgui/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx == 0 || idx == 1); return ((float*)(/;"	f	struct:ImVec2	typeref:typename:float &
operator ^	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator bool	include/imgui/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	f	struct:ImGuiOnceUponAFrame
operator delete	include/imgui/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator mat<3,3,T,Q>	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::operator mat<3, 3, T, Q>() const$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
operator mat<4,4,T,Q>	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::operator mat<4, 4, T, Q>() const$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
operator new	include/imgui/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
operator vec<N,T,Q>	include/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator vec<N, T, Q> () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle	typeref:typename:GLM_FUNC_QUALIFIER
operator |	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ||	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator ||	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator||(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator ||	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator ||	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator ~	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator~(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ~	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator~(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ~	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator~(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ~	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator~(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
opsAsString	shared.h	/^    std::vector<std::string> opsAsString = {"op_R","op_R_inv","op_L","op_L_inv","op_U","op_U_inv/;"	v	typeref:typename:std::vector<std::string>
opsInProgress	include/cubic.h	/^    std::vector<Operation> opsInProgress;$/;"	m	class:Cubic	typeref:typename:std::vector<Operation>
order	include/cubic.h	/^    std::vector<int> order = {0,1,2,3,4,5,6,7};$/;"	m	class:Cubic	typeref:typename:std::vector<int>
order	include/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	typeref:typename:order_type
order	include/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER order::order(order_type a)$/;"	f	class:glm::io::order	typeref:typename:GLM_FUNC_QUALIFIER
order_type	include/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
orientate2	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> orientate2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
orientate3	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orientate3	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
orientate4	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientate4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientation	include/cubic.h	/^    std::vector<std::array<int,4>> orientation = {$/;"	m	class:Cubic	typeref:typename:std::vector<std::array<int,4>>
orientation	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientedAngle	include/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
orientedAngle	include/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<3, T, Q> const& x, vec<3, T, Q> const& y, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ortho	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
ortho	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top, T zNear, T zF/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoNO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoNO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoZO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthonormalize	include/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orthonormalize(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orthonormalize	include/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> orthonormalize(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
out	include/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::intBitsToFloat::__anon8c7f770e030a	typeref:typename:float	file:
out	include/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::uintBitsToFloat::__anon8c7f770e040a	typeref:typename:float	file:
out	include/glm/detail/func_common.inl	/^			int out;$/;"	m	union:glm::floatBitsToInt::__anon8c7f770e010a	typeref:typename:int	file:
out	include/glm/detail/func_common.inl	/^			uint out;$/;"	m	union:glm::floatBitsToUint::__anon8c7f770e020a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			double out;$/;"	m	union:glm::packDouble2x32::__anon7a3922c2090a	typeref:typename:double	file:
out	include/glm/detail/func_packing.inl	/^			signed char out[4];$/;"	m	union:glm::unpackSnorm4x8::__anon7a3922c2080a	typeref:typename:signed char[4]	file:
out	include/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackHalf2x16::__anon7a3922c20c0a	typeref:typename:signed short[2]	file:
out	include/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackSnorm2x16::__anon7a3922c2040a	typeref:typename:signed short[2]	file:
out	include/glm/detail/func_packing.inl	/^			uint   out[2];$/;"	m	union:glm::unpackDouble2x32::__anon7a3922c20a0a	typeref:typename:uint[2]	file:
out	include/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packHalf2x16::__anon7a3922c20b0a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm2x16::__anon7a3922c2030a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm4x8::__anon7a3922c2070a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm2x16::__anon7a3922c2010a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm4x8::__anon7a3922c2050a	typeref:typename:uint	file:
out	include/glm/detail/func_packing.inl	/^			unsigned char out[4];$/;"	m	union:glm::unpackUnorm4x8::__anon7a3922c2060a	typeref:typename:unsigned char[4]	file:
out	include/glm/detail/func_packing.inl	/^			unsigned short out[2];$/;"	m	union:glm::unpackUnorm2x16::__anon7a3922c2020a	typeref:typename:unsigned short[2]	file:
outerProduct	include/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA, DB, T, Q>::type outerProduct(vec<DA,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type
outerProduct	include/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_highp> outerProduct<4, 4, float, aligned_highp>(vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_highp>
outerProduct	include/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_lowp> outerProduct<4, 4, float, aligned_lowp>(vec<4/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_lowp>
outerProduct	include/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_mediump> outerProduct<4, 4, float, aligned_mediump>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_mediump>
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<2, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<2, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<2, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<3, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<3, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<3, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<4, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<4, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait<4, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	include/glm/matrix.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/glad.c.o"$/;"	s	object:1
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui.cpp.o"$/;"	s	object:8
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_demo.cpp.o"$/;"	s	object:2
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_draw.cpp.o"$/;"	s	object:3
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_impl_glfw.cpp.o"$/;"	s	object:4
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_impl_opengl3.cpp.o"$/;"	s	object:5
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_tables.cpp.o"$/;"	s	object:6
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_widgets.cpp.o"$/;"	s	object:7
output	cmake-build/compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/main.cpp.o"$/;"	s	object:0
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/glad.c.o"$/;"	s	object:1
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui.cpp.o"$/;"	s	object:8
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_demo.cpp.o"$/;"	s	object:2
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_draw.cpp.o"$/;"	s	object:3
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_impl_glfw.cpp.o"$/;"	s	object:4
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_impl_opengl3.cpp.o"$/;"	s	object:5
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_tables.cpp.o"$/;"	s	object:6
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/imgui\/imgui_widgets.cpp.o"$/;"	s	object:7
output	compile_commands.json	/^  "output": "CMakeFiles\/cubic.dir\/main.cpp.o"$/;"	s	object:0
output	include/basic_solver.h	/^    std::pair<std::vector<int>,std::vector<Cube>> output;$/;"	m	class:BasicSolver	typeref:typename:std::pair<std::vector<int>,std::vector<Cube>>
overflow	include/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float overflow()$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
p	include/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10408	typeref:typename:T
p	include/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon623cd6d1070a	typeref:typename:T
p	include/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520408	typeref:typename:T
p	include/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon624eef52070a	typeref:typename:T
pack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint16, Q> pack(vec<1, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint16,Q>	file:
pack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint16, Q> pack(vec<2, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint16,Q>	file:
pack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint16, Q> pack(vec<3, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint16,Q>	file:
pack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint16, Q> pack(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint16,Q>	file:
pack	include/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u4u4u4u4	typeref:typename:uint16	file:
pack	include/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u5u5u1	typeref:typename:uint16	file:
pack	include/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u6u5	typeref:typename:uint16	file:
pack	include/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::i10i10i10i2	typeref:typename:uint32	file:
pack	include/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u10u10u10u2	typeref:typename:uint32	file:
pack	include/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u9u9u9e5	typeref:typename:uint32	file:
pack	include/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u3u3u2	typeref:typename:uint8	file:
pack	include/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u4u4	typeref:typename:uint8	file:
packDouble2x32	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER double packDouble2x32(uvec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
packF2x11_1x10	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF2x11_1x10(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packF3x9_E1x5	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF3x9_E1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packHalf	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint16, Q> packHalf(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>
packHalf1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packHalf1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packHalf2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packHalf2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packHalf4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packHalf4x16(glm::vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packI3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packI3x10_1x2(ivec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packInt2x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int packInt2x16(i16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
packInt2x32	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt2x32(i32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int16 packInt2x8(i8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
packInt4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt4x16(i16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt4x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int32 packInt4x8(i8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
packRGBM	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> packRGBM(vec<3, T, Q> const& rgb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
packSnorm	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, intType, Q> packSnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,intType,Q>
packSnorm1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm1x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packSnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packSnorm2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packSnorm2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packSnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packSnorm4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packSnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packSnorm4x8	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packU3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packU3x10_1x2(uvec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUint2x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint packUint2x16(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUint2x32	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint2x32(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUint2x8(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUint4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint4x16(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint4x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUint4x8(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uintType, Q> packUnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uintType,Q>
packUnorm1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x16(float s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x5_1x6_1x5	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x5_1x6_1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUnorm2x3_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x3_1x2(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x4	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x4(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm3x5_1x1	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm3x5_1x1(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUnorm4x4	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm4x4(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x8	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pack_info	include/imgui/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
packed	include/glm/detail/qualifier.hpp	/^		packed = packed_highp, \/\/\/< By default packed qualifier is also high precision$/;"	e	enum:glm::qualifier
packed10ToFloat	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed10ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed10bitToFloat	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed10bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed11ToFloat	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed11ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed11bitToFloat	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed11bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec1			packed_bvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec1
packed_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec2			packed_bvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec2
packed_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec3			packed_bvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec3
packed_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec4			packed_bvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec4
packed_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2
packed_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2
packed_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2		packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2
packed_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x2
packed_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x2			packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x2
packed_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x2
packed_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x3
packed_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x3			packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x3
packed_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x3
packed_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x4
packed_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x4			packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x4
packed_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x4
packed_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3
packed_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3
packed_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3		packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3
packed_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x2
packed_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x2			packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x2
packed_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x2
packed_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x3
packed_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x3			packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x3
packed_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x3
packed_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x4
packed_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x4			packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x4
packed_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x4
packed_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4
packed_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4
packed_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4		packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4
packed_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x2
packed_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x2			packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x2
packed_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x2
packed_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x3
packed_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x3			packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x3
packed_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x3
packed_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x4
packed_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x4			packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x4
packed_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x4
packed_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec1
packed_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec1
packed_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec1		packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec1
packed_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec2
packed_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec2
packed_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec2		packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec2
packed_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec3
packed_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec3
packed_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec3		packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec3
packed_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec4
packed_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec4
packed_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec4		packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec4
packed_highp	include/glm/detail/qualifier.hpp	/^		packed_highp, \/\/\/< Typed data is tightly packed in memory and operations are executed with /;"	e	enum:glm::qualifier
packed_highp_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_highp>		packed_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_highp>
packed_highp_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_highp>		packed_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_highp>
packed_highp_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_highp>		packed_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_highp>
packed_highp_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_highp>		packed_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_highp>
packed_highp_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_highp>		packed_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_highp>
packed_highp_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_highp>		packed_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_highp>
packed_highp_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_highp>		packed_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_highp>
packed_highp_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_highp>		packed_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_highp>
packed_highp_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_highp>		packed_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_highp>
packed_highp_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_highp>		packed_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_highp>
packed_highp_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_highp>	packed_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_highp>
packed_highp_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_highp>	packed_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_highp>
packed_highp_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_highp>	packed_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_highp>
packed_highp_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_highp>	packed_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_highp>
packed_highp_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_highp>		packed_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_highp>
packed_highp_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_highp>		packed_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_highp>
packed_highp_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_highp>		packed_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_highp>
packed_highp_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_highp>		packed_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_highp>
packed_highp_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_highp>		packed_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_highp>
packed_highp_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_highp>		packed_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_highp>
packed_highp_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_highp>		packed_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_highp>
packed_highp_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_highp>		packed_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_highp>
packed_highp_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_highp>		packed_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_highp>
packed_highp_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_highp>		packed_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_highp>
packed_highp_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_highp>		packed_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_highp>
packed_highp_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_highp>		packed_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_highp>
packed_highp_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_highp>		packed_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_highp>
packed_highp_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_highp>		packed_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_highp>
packed_highp_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_highp>		packed_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_highp>
packed_highp_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_highp>		packed_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_highp>
packed_highp_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_highp>		packed_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_highp>
packed_highp_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_highp>		packed_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_highp>
packed_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec1			packed_ivec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec1
packed_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec2			packed_ivec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec2
packed_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec3			packed_ivec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec3
packed_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec4			packed_ivec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec4
packed_lowp	include/glm/detail/qualifier.hpp	/^		packed_lowp, \/\/\/< Typed data is tightly packed in memory  and operations are executed with /;"	e	enum:glm::qualifier
packed_lowp_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_lowp>		packed_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_lowp>
packed_lowp_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_lowp>		packed_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_lowp>
packed_lowp_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_lowp>		packed_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_lowp>
packed_lowp_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_lowp>		packed_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_lowp>
packed_lowp_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_lowp>		packed_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_lowp>
packed_lowp_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_lowp>		packed_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_lowp>
packed_lowp_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_lowp>		packed_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_lowp>
packed_lowp_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_lowp>		packed_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_lowp>
packed_lowp_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_lowp>		packed_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_lowp>
packed_lowp_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_lowp>		packed_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_lowp>
packed_lowp_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_lowp>		packed_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_lowp>
packed_lowp_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_lowp>		packed_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_lowp>
packed_lowp_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_lowp>		packed_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_lowp>
packed_lowp_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_lowp>		packed_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_lowp>
packed_lowp_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_lowp>		packed_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_lowp>
packed_lowp_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_lowp>		packed_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_lowp>
packed_lowp_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_lowp>		packed_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_lowp>
packed_lowp_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_lowp>		packed_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_lowp>
packed_lowp_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_lowp>		packed_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_lowp>
packed_lowp_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_lowp>		packed_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_lowp>
packed_lowp_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_lowp>		packed_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_lowp>
packed_lowp_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_lowp>		packed_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_lowp>
packed_lowp_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_lowp>		packed_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_lowp>
packed_lowp_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_lowp>		packed_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_lowp>
packed_lowp_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_lowp>		packed_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_lowp>
packed_lowp_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_lowp>		packed_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_lowp>
packed_lowp_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_lowp>		packed_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_lowp>
packed_lowp_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_lowp>		packed_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_lowp>
packed_lowp_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_lowp>		packed_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_lowp>
packed_lowp_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_lowp>		packed_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_lowp>
packed_lowp_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_lowp>		packed_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_lowp>
packed_lowp_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_lowp>		packed_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_lowp>
packed_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2
packed_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2
packed_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2
packed_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x2
packed_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x2
packed_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x2		packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x2
packed_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x3
packed_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x3
packed_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x3		packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x3
packed_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x4
packed_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x4
packed_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x4		packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x4
packed_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3
packed_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3
packed_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3
packed_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x2
packed_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x2
packed_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x2		packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x2
packed_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x3
packed_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x3
packed_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x3		packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x3
packed_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x4
packed_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x4
packed_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x4		packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x4
packed_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4
packed_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4
packed_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4
packed_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x2
packed_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x2
packed_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x2		packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x2
packed_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x3
packed_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x3
packed_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x3		packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x3
packed_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x4
packed_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x4
packed_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x4		packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x4
packed_mediump	include/glm/detail/qualifier.hpp	/^		packed_mediump, \/\/\/< Typed data is tightly packed in memory  and operations are executed wi/;"	e	enum:glm::qualifier
packed_mediump_bvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_mediump>	packed_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_mediump>
packed_mediump_bvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_mediump>	packed_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_mediump>
packed_mediump_bvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_mediump>	packed_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_mediump>
packed_mediump_bvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_mediump>	packed_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_mediump>
packed_mediump_dmat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_mediump>	packed_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_mediump>
packed_mediump_dmat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_mediump>	packed_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_mediump>
packed_mediump_dmat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_mediump>	packed_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_mediump>
packed_mediump_dmat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_mediump>	packed_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_mediump>
packed_mediump_dmat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dmat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_mediump>	packed_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_mediump>
packed_mediump_dmat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_mediump>	packed_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_mediump>
packed_mediump_dmat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_mediump>	packed_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_mediump>
packed_mediump_dvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_mediump>	packed_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_mediump>
packed_mediump_dvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_mediump>	packed_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_mediump>
packed_mediump_dvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_mediump>	packed_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_mediump>
packed_mediump_ivec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_mediump>		packed_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_mediump>
packed_mediump_ivec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_mediump>		packed_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_mediump>
packed_mediump_ivec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_mediump>		packed_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_mediump>
packed_mediump_ivec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_mediump>		packed_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_mediump>
packed_mediump_mat2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_mediump>	packed_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_mediump>
packed_mediump_mat2x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_mediump>	packed_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_mediump>
packed_mediump_mat3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_mediump>	packed_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_mediump>
packed_mediump_mat3x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_mediump>	packed_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_mediump>
packed_mediump_mat4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_mat4x2	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_mediump>	packed_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_mediump>
packed_mediump_mat4x3	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_mediump>	packed_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_mediump>
packed_mediump_mat4x4	include/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_mediump>	packed_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_mediump>
packed_mediump_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_mediump>	packed_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_mediump>
packed_mediump_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_mediump>	packed_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_mediump>
packed_mediump_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_mediump>	packed_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_mediump>
packed_mediump_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_mediump>	packed_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_mediump>
packed_mediump_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_mediump>	packed_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_mediump>
packed_mediump_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_mediump>	packed_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_mediump>
packed_mediump_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_mediump>	packed_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_mediump>
packed_uvec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec1			packed_uvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec1
packed_uvec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec2			packed_uvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec2
packed_uvec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec3			packed_uvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec3
packed_uvec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec4			packed_uvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec4
packed_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec1
packed_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec1
packed_vec1	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec1
packed_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec2
packed_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec2
packed_vec2	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec2
packed_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec3
packed_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec3
packed_vec3	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec3
packed_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec4
packed_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec4
packed_vec4	include/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec4
padding	include/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anona175a7780708	typeref:typename:unsigned char
padding	include/imgui/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	include/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
padding2	include/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
padding3	include/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
parse_version	include/imgui/imgui_impl_opengl3_loader.h	/^static int parse_version(void)$/;"	f	typeref:typename:int
part_type	include/glm/gtx/dual_quaternion.hpp	/^		typedef qua<T, Q> part_type;$/;"	t	struct:glm::tdualquat	typeref:typename:qua<T,Q>
parts	include/cubic.h	/^    std::set<int> parts;$/;"	m	class:Cubic	typeref:typename:std::set<int>
parts	include/glm/ext/scalar_ulp.inl	/^	} parts;$/;"	m	union:__anon6c3ce53e020a	typeref:struct:__anon6c3ce53e020a::__anon6c3ce53e0308	file:
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position, vec<2, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position, vec<3, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position, vec<4, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
permute	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
permute	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> permute(vec<2, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
permute	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> permute(vec<3, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
permute	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> permute(vec<4, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
perp	include/glm/gtx/perpendicular.inl	/^	GLM_FUNC_QUALIFIER genType perp(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
perspective	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFov	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFov(T fov, T width, T height, T zNear, T z/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovNO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovNO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovZO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveNO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveNO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_NO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_ZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveZO	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
pi	include/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
pickMatrix	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> pickMatrix(vec<2, T, Q> const& center, vec<2, T, Q> const& d/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
pitch	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T pitch(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
pixels	include/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anona175a7780808	typeref:typename:unsigned char *
pixels	include/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
polar	include/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> polar$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
pop_back	include/imgui/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	include/imgui/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
poses	include/cubic.h	/^    std::vector<std::vector<float>> poses;$/;"	m	class:Cubic	typeref:typename:std::vector<std::vector<float>>
pow	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> pow(vec<L, T, Q> const& base, vec<L, T, Q> const& exponent)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
pow	include/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> pow(qua<T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
pow	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int pow(int x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
pow	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint pow(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pow2	include/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow2(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow3	include/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow3(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow4	include/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow4(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoAbove(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoAbove(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoBelow	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoBelow(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoBelow	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoBelow(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoNearest	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoNearest(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoNearest	include/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoNearest(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
precision	include/glm/detail/qualifier.hpp	/^	typedef qualifier precision;$/;"	t	namespace:glm	typeref:typename:qualifier
precision	include/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
precision	include/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER precision::precision(unsigned a)$/;"	f	class:glm::io::precision	typeref:typename:GLM_FUNC_QUALIFIER
precision_	include/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
preferred_x	include/imgui/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anonda15fd810308	typeref:typename:float
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<bool>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<double>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<float>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<int16_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<int32_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<int64_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<int8_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<uint16_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<uint32_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<uint64_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix<uint8_t>$/;"	s	namespace:glm::detail	file:
prefix	include/glm/gtx/string_cast.inl	/^	struct prefix{};$/;"	s	namespace:glm::detail	file:
preinstall	Makefile	/^preinstall: all$/;"	t
preinstall	cmake-build/Makefile	/^preinstall: all$/;"	t
preinstall/fast	Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	cmake-build/Makefile	/^preinstall\/fast:$/;"	t
prevFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T prevFloat(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prevFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double prevFloat(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prevFloat	include/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float prevFloat(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prevFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevFloat	include/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevMultiple	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType prevMultiple(genIUType Source, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
prevMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevMultiple(vec<L, T, Q> const& Source, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevMultiple	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevPowerOfTwo	include/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType prevPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
prevPowerOfTwo	include/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_first	include/imgui/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anonda15fd810508	typeref:typename:int
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T prev_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double prev_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float prev_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	include/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_link	include/imgui/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon8a0969a30308	typeref:typename:stbrp_node **
print_matrix_on	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_on(std::basic_ostream<CTy, CTr>& /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_matrix_pair_on	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_pair_on(std::basic_ostream<CTy, C/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_vector_on	include/glm/gtx/io.inl	/^	print_vector_on(std::basic_ostream<CTy, CTr>& os, V const& a)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
proc_names	include/imgui/imgui_impl_opengl3_loader.h	/^static const char *proc_names[] = {$/;"	v	typeref:typename:const char * []
proggy_clean_ttf_compressed_data_base85	imgui/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
proj	include/glm/gtx/projection.inl	/^	GLM_FUNC_QUALIFIER genType proj(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
proj2D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> proj2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
proj3D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> proj3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
project	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> project(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectNO	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectNO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectZO	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectZO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
ptr	include/imgui/imgui_impl_opengl3_loader.h	/^    GL3WglProc ptr[59];$/;"	m	union:GL3WProcs	typeref:typename:GL3WglProc[59]
ptr_from_offset	include/imgui/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	include/imgui/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	include/imgui/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	include/imgui/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anona175a7780f08	typeref:typename:stbtt_vertex *
q	include/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520408	typeref:typename:T
q	include/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon624eef52080a	typeref:typename:T
qnxnto	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	cmake-build/CMakeFiles/3.26.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qr_decompose	include/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void qr_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
qua	include/glm/detail/glm.cpp	/^template struct qua<float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/glm.cpp	/^template struct qua<float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/glm.cpp	/^template struct qua<float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/glm.cpp	/^template struct qua<float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/glm.cpp	/^template struct qua<float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/glm.cpp	/^template struct qua<float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
qua	include/glm/detail/type_quat.hpp	/^	struct qua$/;"	s	namespace:glm
qua	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua()$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<T, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(T _w, T _x, T _y, T _z)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(T s, vec<3, T, Q> const& v)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<T, P> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<U, P> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(vec<3, T, Q> const& eulerAngle)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::qua(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::qua(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
qua	include/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::qua(vec<3, T, Q> const& u, vec<3, T, Q> const& v)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
quadraticEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qualifier	include/glm/detail/qualifier.hpp	/^	enum qualifier$/;"	g	namespace:glm
quarter_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType quarter_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
quarticEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quat	include/glm/ext/quaternion_float.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quat	include/glm/fwd.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quatLookAt	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAt(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtLH	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtLH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtRH	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtRH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<4, 4, T, Q> const& m4)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_identity	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
quinticEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qword	include/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm	typeref:typename:detail::uint64
r	include/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::vec::__anon6218a5cf010a	typeref:typename:T
r	include/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon6218a5cf020a	typeref:typename:T
r	include/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500308	typeref:typename:T
r	include/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon622abe50050a	typeref:typename:T
r	include/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10308	typeref:typename:T
r	include/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon623cd6d1050a	typeref:typename:T
r	include/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520308	typeref:typename:T
r	include/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon624eef52050a	typeref:typename:T
radialGradient	include/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T radialGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
radians	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType radians(genType degrees)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
radians	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> radians(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
randomShuffelMode	include/cubic.h	/^    bool randomShuffelMode = false;$/;"	m	class:Cubic	typeref:typename:bool
readFile	include/utils.h	/^char* readFile(char* file_path ) {$/;"	f	typeref:typename:char *
readShaderFromFile	include/shader.h	/^        ShaderSource readShaderFromFile(char* file_path) {$/;"	f	class:Shader	typeref:typename:ShaderSource
real	include/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
rebuild_cache	Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	cmake-build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	cmake-build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rect_height_compare	include/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	include/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rects	include/cubic.h	/^    std::vector<Rectangle> rects;$/;"	m	class:Cubic	typeref:typename:std::vector<Rectangle>
redo_char_point	include/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anonda15fd810208	typeref:typename:int
redo_point	include/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anonda15fd810208	typeref:typename:short
reflect	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType reflect(genType const& I, genType const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
reflect	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> reflect(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
reflect2D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> reflect2D(mat<3, 3, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
reflect3D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> reflect3D(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
refract	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType refract(genType const& I, genType const& N, genType eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
refract	include/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> refract(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
render	include/cube.h	/^void Cube::render() {$/;"	f	class:Cube	typeref:typename:void
render	include/cubic.h	/^void Cubic::render(Shader shader,GLFWwindow* window){$/;"	f	class:Cubic	typeref:typename:void
render	include/rectangle.h	/^void Rectangle::render(Shader shader) {$/;"	f	class:Rectangle	typeref:typename:void
render2D	include/cubic.h	/^void Cubic::render2D(Shader shader,GLFWwindow* window){$/;"	f	class:Cubic	typeref:typename:void
render_imGUI	main.cpp	/^void render_imGUI() {$/;"	f	typeref:typename:void
repeat	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType repeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
repeat	include/glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> repeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
reserve	include/imgui/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	include/imgui/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
reserve_discard	include/imgui/imgui.h	/^    inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
resize	include/imgui/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	include/imgui/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	imgui/imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	imgui/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
return_type_scalar_multiplication	include/glm/gtx/scalar_multiplication.hpp	/^	using return_type_scalar_multiplication = typename std::enable_if<$/;"	t	namespace:glm	typeref:typename:std::enable_if<!std::is_same<T,float>::value && std::is_arithmetic<T>::value,Vec>::type
rgb2YCoCg	include/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCg$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgb2YCoCgR	include/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
rgb2YCoCgR	include/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgbColor	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgbColor(const vec<3, T, Q>& hsvColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rightHanded	include/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool rightHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
roll	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T roll(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
root_five	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_five()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_half_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_ln_four	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_ln_four()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_three	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_three()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
rotAxis	include/cubic.h	/^    float rotAxis[3] = {0.f,0.f,0.f}; $/;"	m	class:Cubic	typeref:typename:float[3]
rotEnd	include/cubic.h	/^    float rotEnd = 0.f;$/;"	m	class:Cubic	typeref:typename:float
rotSpeed	shared.h	/^    float rotSpeed = 2;$/;"	v	typeref:typename:float
rotate	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotate	include/glm/ext/quaternion_transform.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotate	include/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rotate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rotate	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate(qua<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
rotate	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	include/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(T angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateL	shared.h	/^    float rotateL = 0.f;$/;"	v	typeref:typename:float
rotateNormalizedAxis	include/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateNormalizedAxis	include/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotateR	shared.h	/^    float rotateR = 0.f;$/;"	v	typeref:typename:float
rotateU	shared.h	/^    float rotateU = 0.f;$/;"	v	typeref:typename:float
rotateX	include/cubic.h	/^    float rotateX = 0;$/;"	m	class:Cubic	typeref:typename:float
rotateX	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateX	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateY	include/cubic.h	/^    float rotateY = 0;$/;"	m	class:Cubic	typeref:typename:float
rotateY	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateY	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateZ	include/cubic.h	/^    float rotateZ = 0;$/;"	m	class:Cubic	typeref:typename:float
rotateZ	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateZ	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate_slow	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate_slow(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotation	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotation(vec<3, T, Q> const& orig, vec<3, T, Q> const& dest)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotationsX	shared.h	/^    const float rotationsX[8] = {0.f,90.f,0.f,90.f,270.f,180.f,270.f,180.f}; $/;"	v	typeref:typename:const float[8]
rotationsY	shared.h	/^    const float rotationsY[8] = {90.f,90.f,0.f,0.f,90.f,90.f,0.f,0.f}; $/;"	v	typeref:typename:const float[8]
round	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType round(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
round	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> round(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundEven	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType roundEven(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundEven	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundEven(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType roundMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundMultiple	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genIUType roundPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
roundPowerOfTwo	include/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
row	include/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
row	include/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::row_type row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::row_type
rowMajor2	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor2	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor3	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rowMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rowMajor4	include/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rowMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
row_count_per_page	include/imgui/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anonda15fd810308	typeref:typename:int
row_major	include/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_type	include/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	include/glm/detail/type_mat2x3.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	include/glm/detail/type_mat2x4.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	include/glm/detail/type_mat3x2.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	include/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	include/glm/detail/type_mat3x4.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	include/glm/detail/type_mat4x2.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	include/glm/detail/type_mat4x3.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	include/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
rows	include/glm/gtx/type_trait.hpp	/^		static length_t const rows = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
rows	include/glm/gtx/type_trait.hpp	/^		static length_t const rows = R;$/;"	m	struct:glm::type	typeref:typename:length_t const
rows	include/glm/gtx/type_trait.inl	/^	length_t const type<T>::rows;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
rows	include/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::rows;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
rq_decompose	include/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void rq_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
s	include/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::vec::__anon6218a5cf010a	typeref:typename:T
s	include/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon6218a5cf020a	typeref:typename:T
s	include/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500408	typeref:typename:T
s	include/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon622abe50050a	typeref:typename:T
s	include/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10408	typeref:typename:T
s	include/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon623cd6d1050a	typeref:typename:T
s	include/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520408	typeref:typename:T
s	include/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon624eef52050a	typeref:typename:T
s0	include/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anona175a7780308	typeref:typename:float
s1	include/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anona175a7780308	typeref:typename:float
s_current_sort_specs	imgui/imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anone28545ff0111::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	imgui/imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anone28545ff0111::MyItem	typeref:typename:const ImGuiTableSortSpecs *
same_colors	cubic_utils.h	/^bool same_colors(std::vector<std::vector<float>> arr1,std::vector<std::vector<float>> arr2) {$/;"	f	typeref:typename:bool
saturate	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1)/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
saturate	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> saturate(const vec<2, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
saturate	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> saturate(const vec<3, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturate	include/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> saturate(const vec<4, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
saturation	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> saturation(T const s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
saturation	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> saturation(const T s, const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturation	include/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> saturation(const T s, const vec<4, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
scale	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scale	include/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> scale(vec<3, T, Q> const& v, T desiredLength)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
scale	include/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> scale($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
scale	include/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(mat<4, 4, T, Q> const& m, T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scale_slow	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale_slow(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
sec	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sec(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sec	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sech	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sech(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sech	include/glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
select_end	include/imgui/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anonda15fd810308	typeref:typename:int
select_start	include/imgui/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anonda15fd810308	typeref:typename:int
separator	include/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
set	include/imgui/imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	include/imgui/imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
setColor	include/cube.h	/^void Cube::setColor(std::vector<std::vector<float>> _colors) {$/;"	f	class:Cube	typeref:typename:void
setColor	include/rectangle.h	/^void Rectangle::setColor(float r, float g , float b) {$/;"	f	class:Rectangle	typeref:typename:void
shearX	include/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX2D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX3D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearX3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearY	include/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY2D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY3D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearY3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearZ3D	include/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearZ3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shortMix	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> shortMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
shrink	include/imgui/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
shuffelCounter	include/cubic.h	/^    int shuffelCounter = 20;$/;"	m	class:Cubic	typeref:typename:int
sign	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genFIType sign(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genFIType
sign	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sign(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sign16	include/glm/gtc/bitfield.inl	/^		union sign16$/;"	u	function:glm::bitfieldInterleave	file:
sign32	include/glm/gtc/bitfield.inl	/^		union sign32$/;"	u	function:glm::bitfieldInterleave	file:
sign64	include/glm/gtc/bitfield.inl	/^		union sign64$/;"	u	function:glm::bitfieldInterleave	file:
sign8	include/glm/gtc/bitfield.inl	/^		union sign8$/;"	u	function:glm::bitfieldInterleave	file:
simplex	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(glm::vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	include/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
sin	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sineEaseIn	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseInOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseOut	include/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
single_line	include/imgui/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anonda15fd810308	typeref:typename:unsigned char
sinh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sint	include/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm	typeref:typename:signed int
size	include/imgui/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	include/imgui/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	include/imgui/imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	include/imgui/imgui_internal.h	/^    int             size()                                  { return LineOffsets.Size; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:int
size	include/imgui/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	include/imgui/imstb_truetype.h	/^   int size;$/;"	m	struct:__anona175a7780108	typeref:typename:int
size1	include/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size1_t	include/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size2	include/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size2_t	include/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size3	include/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size3_t	include/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size4	include/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size4_t	include/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size_in_bytes	include/imgui/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
size_in_bytes	include/imgui/imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip_missing	include/imgui/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
slerp	include/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
slerp	include/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> slerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
smoothstep	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType smoothstep(genType edge0, genType edge1, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
smoothstep	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
smoothstep	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
snprintf	imgui/imgui_demo.cpp	/^#define snprintf    _snprintf$/;"	d	file:
source	include/shader.h	/^		ShaderSource source;$/;"	m	class:Shader	typeref:typename:ShaderSource
space	include/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
sphericalRand	include/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> sphericalRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
split	imgui/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
sqrt	include/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sqrt	include/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> sqrt(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
sqrt	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int sqrt(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
sqrt	include/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint sqrt(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
squad	include/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> squad$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
start	include/cubic.h	/^    float start , curr;$/;"	m	class:Cubic	typeref:typename:float
started	include/imgui/imstb_truetype.h	/^   int started;$/;"	m	struct:__anona175a7780f08	typeref:typename:int
state_	include/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:state_type &
state_saver	include/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<char>
state_type	include/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::basic_ios<CTy,CTr>
stb__barrier_in_b	imgui/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	imgui/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	imgui/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	imgui/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	imgui/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	imgui/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	imgui/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	imgui/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	imgui/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	imgui/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	imgui/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	include/imgui/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	include/imgui/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, /;"	f	typeref:typename:STB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	include/imgui/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	include/imgui/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int whe/;"	f	typeref:typename:void
stb_text_makeundo_insert	include/imgui/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	include/imgui/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int wh/;"	f	typeref:typename:void
stb_text_redo	include/imgui/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	include/imgui/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	include/imgui/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	include/imgui/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	include/imgui/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, floa/;"	f	typeref:typename:void
stb_textedit_cut	include/imgui/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	include/imgui/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, i/;"	f	typeref:typename:void
stb_textedit_delete_selection	include/imgui/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	include/imgui/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	include/imgui/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	include/imgui/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float/;"	f	typeref:typename:void
stb_textedit_find_charpos	include/imgui/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int s/;"	f	typeref:typename:void
stb_textedit_flush_redo	include/imgui/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	include/imgui/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	include/imgui/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KE/;"	f	typeref:typename:void
stb_textedit_move_to_first	include/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	include/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	include/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	include/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	include/imgui/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_C/;"	f	typeref:typename:int
stb_textedit_paste_internal	include/imgui/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_T/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	include/imgui/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	imgui/imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const STB_T/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	include/imgui/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stbrp__findresult	include/imgui/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon8a0969a30308
stbrp__skyline_find_best_pos	include/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	include/imgui/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	include/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	include/imgui/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	include/imgui/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	include/imgui/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anona175a7781108
stbrp_coord	include/imgui/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	include/imgui/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	include/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	include/imgui/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	include/imgui/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	include/imgui/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	include/imgui/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anona175a7781208
stbrp_pack_rects	include/imgui/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	include/imgui/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	include/imgui/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	include/imgui/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	include/imgui/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	include/imgui/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	include/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	include/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	include/imgui/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	include/imgui/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	include/imgui/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	include/imgui/imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	include/imgui/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	include/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	include/imgui/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	include/imgui/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	include/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	include/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	include/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	include/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	include/imgui/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	include/imgui/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	include/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	include/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	include/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	include/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	include/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	include/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	include/imgui/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	include/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	include/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	include/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	include/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	include/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	include/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	include/imgui/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	include/imgui/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	include/imgui/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	include/imgui/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anona175a7780808
stbtt__buf	include/imgui/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anona175a7780108
stbtt__buf_get	include/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	include/imgui/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	include/imgui/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	include/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	include/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	include/imgui/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	include/imgui/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	include/imgui/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	include/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	include/imgui/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	include/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	include/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	include/imgui/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	include/imgui/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	include/imgui/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anona175a7780f08
stbtt__csctx_close_shape	include/imgui/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	include/imgui/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	include/imgui/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	include/imgui/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	include/imgui/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	include/imgui/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	include/imgui/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	include/imgui/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	include/imgui/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	include/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	include/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	include/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	include/imgui/imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	include/imgui/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	include/imgui/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	include/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	include/imgui/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	include/imgui/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	include/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	include/imgui/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	include/imgui/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	include/imgui/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	include/imgui/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	include/imgui/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	include/imgui/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	include/imgui/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	include/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	include/imgui/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	include/imgui/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anona175a7781008
stbtt__position_trapezoid_area	include/imgui/imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	include/imgui/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	include/imgui/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	include/imgui/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	include/imgui/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	include/imgui/imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	include/imgui/imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	include/imgui/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	include/imgui/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	include/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	include/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	include/imgui/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	include/imgui/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	include/imgui/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	include/imgui/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	include/imgui/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	include/imgui/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anona175a7780308
stbtt_bakedchar	include/imgui/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anona175a7780208
stbtt_fontinfo	include/imgui/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	include/imgui/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	include/imgui/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	include/imgui/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	include/imgui/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	include/imgui/imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	include/imgui/imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	include/imgui/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	include/imgui/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	include/imgui/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anona175a7780508
stbtt_packedchar	include/imgui/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anona175a7780408
stbtt_setvertex	include/imgui/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	include/imgui/imstb_truetype.h	/^#define stbtt_tag(p,str)           stbtt_tag4/;"	d
stbtt_tag4	include/imgui/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	include/imgui/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	include/imgui/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	include/imgui/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	include/imgui/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anona175a7780708
stbtt_vertex_type	include/imgui/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
std	include/glm/detail/setup.hpp	/^namespace std {$/;"	n	namespace:glm
std	include/glm/gtx/hash.hpp	/^namespace std$/;"	n
std	include/glm/gtx/hash.inl	/^namespace std$/;"	n	file:
step	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType step(genType edge, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
step	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(T edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
step	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
storage	include/glm/detail/qualifier.hpp	/^		struct storage<3, T, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^		struct storage<L, T, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<2, detail::int64, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<2, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<2, double, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, detail::int64, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, double, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, float, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, int, true>$/;"	s	namespace:glm::detail
storage	include/glm/detail/qualifier.hpp	/^	struct storage<4, unsigned int, true>$/;"	s	namespace:glm::detail
streamsize_type	include/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::streamsize
stride	include/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anona175a7780808	typeref:typename:int
stride_in_bytes	include/imgui/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	include/imgui/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
svg	include/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
swap	include/imgui/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
swap	include/imgui/imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	include/imgui/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t	include/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500408	typeref:typename:T
t	include/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon622abe50060a	typeref:typename:T
t	include/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10408	typeref:typename:T
t	include/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon623cd6d1060a	typeref:typename:T
t	include/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520408	typeref:typename:T
t	include/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon624eef52060a	typeref:typename:T
t0	include/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anona175a7780308	typeref:typename:float
t1	include/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anona175a7780308	typeref:typename:float
tan	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
tanh	include/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
taylorCos	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> taylorCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
taylorInvSqrt	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
taylorInvSqrt	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> taylorInvSqrt(vec<2, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
taylorInvSqrt	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> taylorInvSqrt(vec<3, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
taylorInvSqrt	include/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> taylorInvSqrt(vec<4, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/detail/glm.cpp	/^template struct tdualquat<float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	include/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
tdualquat	include/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat()$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, Q> const& d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& q, vec<3, T, Q> co/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r, qua<T, Q> const/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, P> const& d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	include/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<U, P> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
test	include/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	g	struct:glm::detail::is_int
test	include/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	include/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	include/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
third	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType third()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
three_over_two_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType three_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
tmat2x2	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x2 = mat<2, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,2,T,Q>
tmat2x3	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x3 = mat<2, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,3,T,Q>
tmat2x4	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x4 = mat<2, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,4,T,Q>
tmat3x2	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x2 = mat<3, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,2,T,Q>
tmat3x3	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x3 = mat<3, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,3,T,Q>
tmat3x4	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x4 = mat<3, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,4,T,Q>
tmat4x2	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x2 = mat<4, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,2,T,Q>
tmat4x3	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x3 = mat<4, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,3,T,Q>
tmat4x4	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x4 = mat<4, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,4,T,Q>
toFloat16	include/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER hdata toFloat16(float const& f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER hdata
toFloat32	include/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float toFloat32(hdata value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
toMat3	include/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<3, 3, T, Q> toMat3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL mat<3,3,T,Q>
toMat4	include/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<4, 4, T, Q> toMat4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL mat<4,4,T,Q>
toQuat	include/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL qua<T, Q> toQuat($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL qua<T,Q>
to_string	include/glm/gtx/string_cast.inl	/^GLM_FUNC_QUALIFIER std::string to_string(matType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::string
tquat	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tquat = qua<T, Q>;$/;"	t	namespace:glm	typeref:typename:qua<T,Q>
translate	include/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
translate	include/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> translate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
translate	include/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
transpose	include/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename mat<C, R, T, Q>::transpose_type transpose(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<C,R,T,Q>::transpose_type
transpose_type	include/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
transpose_type	include/glm/detail/type_mat2x3.hpp	/^		typedef mat<3, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
transpose_type	include/glm/detail/type_mat2x4.hpp	/^		typedef mat<4, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
transpose_type	include/glm/detail/type_mat3x2.hpp	/^		typedef mat<2, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
transpose_type	include/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
transpose_type	include/glm/detail/type_mat3x4.hpp	/^		typedef mat<4, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
transpose_type	include/glm/detail/type_mat4x2.hpp	/^		typedef mat<2, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
transpose_type	include/glm/detail/type_mat4x3.hpp	/^		typedef mat<3, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
transpose_type	include/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
triangleNormal	include/glm/gtx/normal.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> triangleNormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
trunc	include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType trunc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
trunc	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> trunc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ttBYTE	include/imgui/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	include/imgui/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	include/imgui/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	include/imgui/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	include/imgui/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	include/imgui/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	include/imgui/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
tvec1	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec1 = vec<1, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<1,T,Q>
tvec2	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec2 = vec<2, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<2,T,Q>
tvec3	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec3 = vec<3, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<3,T,Q>
tvec4	include/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec4 = vec<4, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<4,T,Q>
tweakedInfinitePerspective	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
tweakedInfinitePerspective	include/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
two_over_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_over_root_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_pi	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_thirds	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_thirds()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
type	include/glm/detail/qualifier.hpp	/^			typedef struct alignas(4 * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	include/glm/detail/qualifier.hpp	/^			typedef struct alignas(L * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	include/glm/detail/qualifier.hpp	/^			} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	include/glm/detail/qualifier.hpp	/^		typedef glm_f32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f32vec4
type	include/glm/detail/qualifier.hpp	/^		typedef glm_f64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec2
type	include/glm/detail/qualifier.hpp	/^		typedef glm_f64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec4
type	include/glm/detail/qualifier.hpp	/^		typedef glm_i32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i32vec4
type	include/glm/detail/qualifier.hpp	/^		typedef glm_i64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec2
type	include/glm/detail/qualifier.hpp	/^		typedef glm_i64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec4
type	include/glm/detail/qualifier.hpp	/^		typedef glm_u32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u32vec4
type	include/glm/detail/qualifier.hpp	/^		typedef glm_u64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec2
type	include/glm/detail/qualifier.hpp	/^		typedef glm_u64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec4
type	include/glm/detail/qualifier.hpp	/^		typedef struct type {$/;"	s	struct:glm::detail::storage
type	include/glm/detail/qualifier.hpp	/^		} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	include/glm/detail/setup.hpp	/^		typedef uint64 type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:uint64
type	include/glm/detail/setup.hpp	/^		typedef unsigned char type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned char
type	include/glm/detail/setup.hpp	/^		typedef unsigned int type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned int
type	include/glm/detail/setup.hpp	/^		typedef unsigned long type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned long
type	include/glm/detail/setup.hpp	/^		typedef unsigned short type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned short
type	include/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
type	include/glm/detail/type_mat2x3.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
type	include/glm/detail/type_mat2x4.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
type	include/glm/detail/type_mat3x2.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
type	include/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
type	include/glm/detail/type_mat3x4.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
type	include/glm/detail/type_mat4x2.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
type	include/glm/detail/type_mat4x3.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
type	include/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
type	include/glm/detail/type_quat.hpp	/^		typedef qua<T, Q> type;$/;"	t	struct:glm::qua	typeref:typename:qua<T,Q>
type	include/glm/detail/type_vec1.hpp	/^		typedef vec<1, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,T,Q>
type	include/glm/detail/type_vec2.hpp	/^		typedef vec<2, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,T,Q>
type	include/glm/detail/type_vec3.hpp	/^		typedef vec<3, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,T,Q>
type	include/glm/detail/type_vec4.hpp	/^		typedef vec<4, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,T,Q>
type	include/glm/gtx/type_trait.hpp	/^	struct type$/;"	s	namespace:glm
type	include/glm/gtx/type_trait.hpp	/^	struct type<mat<C, R, T, Q> >$/;"	s	namespace:glm
type	include/glm/gtx/type_trait.hpp	/^	struct type<qua<T, Q> >$/;"	s	namespace:glm
type	include/glm/gtx/type_trait.hpp	/^	struct type<tdualquat<T, Q> >$/;"	s	namespace:glm
type	include/glm/gtx/type_trait.hpp	/^	struct type<vec<L, T, Q> >$/;"	s	namespace:glm
type	include/glm/matrix.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,2,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,3,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,4,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,2,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,3,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,4,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,2,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,3,T,Q>
type	include/glm/matrix.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,4,T,Q>
type	include/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anona175a7780708	typeref:typename:unsigned char
u	include/glm/gtc/bitfield.inl	/^			uint16 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint16	file:
u	include/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint32	file:
u	include/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:uint32	file:
u	include/glm/gtc/bitfield.inl	/^			uint64 u;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:uint64	file:
u	include/glm/gtc/bitfield.inl	/^			uint8 u;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:uint8	file:
u10u10u10u2	include/glm/gtc/packing.inl	/^	union u10u10u10u2$/;"	u	namespace:glm::detail	file:
u16	include/glm/fwd.hpp	/^	typedef uint16					u16;$/;"	t	namespace:glm	typeref:typename:uint16
u16	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
u16vec1	include/glm/fwd.hpp	/^	typedef vec<1, u16, defaultp>	u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,defaultp>
u16vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, defaultp> u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,defaultp>
u16vec1	include/glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u16
u16vec2	include/glm/fwd.hpp	/^	typedef vec<2, u16, defaultp>	u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,defaultp>
u16vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, defaultp> u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,defaultp>
u16vec3	include/glm/fwd.hpp	/^	typedef vec<3, u16, defaultp>	u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,defaultp>
u16vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, defaultp> u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,defaultp>
u16vec4	include/glm/fwd.hpp	/^	typedef vec<4, u16, defaultp>	u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,defaultp>
u16vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, defaultp> u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,defaultp>
u32	include/glm/fwd.hpp	/^	typedef uint32					u32;$/;"	t	namespace:glm	typeref:typename:uint32
u32	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
u32vec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, defaultp>	u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
u32vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, defaultp> u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
u32vec1	include/glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u32
u32vec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, defaultp>	u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
u32vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, defaultp> u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
u32vec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, defaultp>	u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
u32vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, defaultp> u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
u32vec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, defaultp>	u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
u32vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, defaultp> u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
u3u3u2	include/glm/gtc/packing.inl	/^	union u3u3u2$/;"	u	namespace:glm::detail	file:
u4u4	include/glm/gtc/packing.inl	/^	union u4u4$/;"	u	namespace:glm::detail	file:
u4u4u4u4	include/glm/gtc/packing.inl	/^	union u4u4u4u4$/;"	u	namespace:glm::detail	file:
u5u5u5u1	include/glm/gtc/packing.inl	/^	union u5u5u5u1$/;"	u	namespace:glm::detail	file:
u5u6u5	include/glm/gtc/packing.inl	/^	union u5u6u5$/;"	u	namespace:glm::detail	file:
u64	include/glm/fwd.hpp	/^	typedef uint64					u64;$/;"	t	namespace:glm	typeref:typename:uint64
u64	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
u64vec1	include/glm/fwd.hpp	/^	typedef vec<1, u64, defaultp>	u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,defaultp>
u64vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, defaultp> u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,defaultp>
u64vec1	include/glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u64
u64vec2	include/glm/fwd.hpp	/^	typedef vec<2, u64, defaultp>	u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,defaultp>
u64vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, defaultp> u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,defaultp>
u64vec3	include/glm/fwd.hpp	/^	typedef vec<3, u64, defaultp>	u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,defaultp>
u64vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, defaultp> u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,defaultp>
u64vec4	include/glm/fwd.hpp	/^	typedef vec<4, u64, defaultp>	u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,defaultp>
u64vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, defaultp> u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,defaultp>
u8	include/glm/fwd.hpp	/^	typedef uint8					u8;$/;"	t	namespace:glm	typeref:typename:uint8
u8	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
u8vec1	include/glm/fwd.hpp	/^	typedef vec<1, u8, defaultp>	u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,defaultp>
u8vec1	include/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, defaultp> u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,defaultp>
u8vec1	include/glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precisi/;"	t	namespace:glm::gtx	typeref:typename:u8
u8vec2	include/glm/fwd.hpp	/^	typedef vec<2, u8, defaultp>	u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,defaultp>
u8vec2	include/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, defaultp> u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,defaultp>
u8vec3	include/glm/fwd.hpp	/^	typedef vec<3, u8, defaultp>	u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,defaultp>
u8vec3	include/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, defaultp> u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,defaultp>
u8vec4	include/glm/fwd.hpp	/^	typedef vec<4, u8, defaultp>	u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,defaultp>
u8vec4	include/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, defaultp> u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,defaultp>
u9u9u9e5	include/glm/gtc/packing.inl	/^	union u9u9u9e5$/;"	u	namespace:glm::detail	file:
uaddCarry	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint uaddCarry(uint const& x, uint const& y, uint & Carry)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uaddCarry	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uaddCarry(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uif32	include/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32() :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	include/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(float f_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	include/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(unsigned int i_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	include/glm/detail/type_half.inl	/^	union uif32$/;"	u	namespace:glm::detail	file:
uint	include/glm/detail/setup.hpp	/^	typedef unsigned int	uint;$/;"	t	namespace:glm	typeref:typename:unsigned int
uint16	include/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint16_t		uint16;$/;"	t	namespace:glm::detail	typeref:typename:std::uint16_t
uint16	include/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint16		uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16	include/glm/fwd.hpp	/^	typedef std::uint16_t			uint16;$/;"	t	namespace:glm	typeref:typename:std::uint16_t
uint16_t	include/glm/fwd.hpp	/^	typedef uint16					uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
uint16_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint32	include/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint32_t		uint32;$/;"	t	namespace:glm::detail	typeref:typename:std::uint32_t
uint32	include/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint32		uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32	include/glm/fwd.hpp	/^	typedef std::uint32_t			uint32;$/;"	t	namespace:glm	typeref:typename:std::uint32_t
uint32_t	include/glm/fwd.hpp	/^	typedef uint32					uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
uint32_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint64	include/glm/detail/setup.hpp	/^		typedef std::uint64_t						uint64;$/;"	t	namespace:glm::detail	typeref:typename:std::uint64_t
uint64	include/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint64		uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64	include/glm/fwd.hpp	/^	typedef std::uint64_t			uint64;$/;"	t	namespace:glm	typeref:typename:std::uint64_t
uint64_t	include/glm/fwd.hpp	/^	typedef uint64					uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
uint64_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint8	include/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint8_t		uint8;$/;"	t	namespace:glm::detail	typeref:typename:std::uint8_t
uint8	include/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint8		uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8	include/glm/fwd.hpp	/^	typedef std::uint8_t			uint8;$/;"	t	namespace:glm	typeref:typename:std::uint8_t
uint8_t	include/glm/fwd.hpp	/^	typedef uint8					uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
uint8_t	include/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uintBitsToFloat	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float uintBitsToFloat(uint const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
uintBitsToFloat	include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:highp_umat2
umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2
umat2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2
umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:highp_umat2x2
umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x2
umat2x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x2
umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:highp_umat2x3
umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x3
umat2x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x3
umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:highp_umat2x4
umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x4
umat2x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x4
umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:highp_umat3
umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3
umat3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3
umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:highp_umat3x2
umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x2
umat3x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x2
umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:highp_umat3x3
umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x3
umat3x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x3
umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:highp_umat3x4
umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x4
umat3x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x4
umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:highp_umat4
umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4
umat4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4
umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:highp_umat4x2
umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x2
umat4x2	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x2
umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:highp_umat4x3
umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x3
umat4x3	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x3
umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:highp_umat4x4
umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x4
umat4x4	include/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x4
umulExtended	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(uint const& x, uint const& y, uint & msb, uint & lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
umulExtended	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
unProject	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProject(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectNO	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectNO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectZO	include/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectZO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
undo_char	include/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anonda15fd810208	typeref:typename:STB_TEXTEDIT_CHARTYPE[]
undo_char_point	include/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anonda15fd810208	typeref:typename:int
undo_point	include/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anonda15fd810208	typeref:typename:short
undo_rec	include/imgui/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anonda15fd810208	typeref:typename:StbUndoRecord[]
undostate	include/imgui/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anonda15fd810308	typeref:typename:StbUndoState
unformatted	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& unformatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
unpack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, float, Q> unpack(vec<1, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,float,Q>	file:
unpack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, float, Q> unpack(vec<2, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,float,Q>	file:
unpack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> unpack(vec<3, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
unpack	include/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> unpack(vec<4, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
unpackDouble2x32	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uvec2 unpackDouble2x32(double v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec2
unpackF2x11_1x10	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF2x11_1x10(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackF3x9_E1x5	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF3x9_E1x5(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackHalf	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> unpackHalf(vec<L, uint16, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
unpackHalf1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackHalf1x16(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackHalf2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackHalf2x16(uint v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackHalf4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackHalf4x16(uint64 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackI3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER ivec4 unpackI3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER ivec4
unpackInt2x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec2 unpackInt2x16(int p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec2
unpackInt2x32	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i32vec2 unpackInt2x32(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i32vec2
unpackInt2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec2 unpackInt2x8(int16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec2
unpackInt4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec4 unpackInt4x16(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec4
unpackInt4x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec4 unpackInt4x8(int32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec4
unpackRGBM	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unpackRGBM(vec<4, T, Q> const& rgbm)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unpackSnorm	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackSnorm(vec<L, intType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackSnorm1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm1x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x8	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackSnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackU3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uvec4 unpackU3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec4
unpackUint2x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec2 unpackUint2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec2
unpackUint2x32	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u32vec2 unpackUint2x32(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u32vec2
unpackUint2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec2 unpackUint2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
unpackUint4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec4 unpackUint4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec4
unpackUint4x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec4 unpackUint4x8(uint32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec4
unpackUnorm	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackUnorm(vec<L, uintType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackUnorm1x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm1x5_1x6_1x5	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm1x5_1x6_1x5(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm1x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm2x16	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x3_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm2x3_1x2(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm2x4	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x4(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x8	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm3x10_1x2	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm3x5_1x1	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x5_1x1(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x16	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x4	include/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x4(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x8	include/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
updateRender2d	include/cubic.h	/^    bool updateRender2d = true;$/;"	m	class:Cubic	typeref:typename:bool
update_anim	include/cubic.h	/^void Cubic::update_anim() {$/;"	f	class:Cubic	typeref:typename:void
uround	include/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER uint uround(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uround	include/glm/gtc/integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
user_allocator_context	include/imgui/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	include/imgui/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
usubBorrow	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint usubBorrow(uint const& x, uint const& y, uint & Borrow)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
usubBorrow	include/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> usubBorrow(vec<L, uint, Q> const& x, vec<L, uint, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uv	include/imgui/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
uvec1	include/glm/ext/vector_uint1.hpp	/^	typedef vec<1, unsigned int, defaultp>			uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,defaultp>
uvec1	include/glm/fwd.hpp	/^	typedef vec<1, u32, defaultp>	uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
uvec2	include/glm/ext/vector_uint2.hpp	/^	typedef vec<2, unsigned int, defaultp>		uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,defaultp>
uvec2	include/glm/fwd.hpp	/^	typedef vec<2, u32, defaultp>	uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
uvec3	include/glm/ext/vector_uint3.hpp	/^	typedef vec<3, unsigned int, defaultp>		uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,defaultp>
uvec3	include/glm/fwd.hpp	/^	typedef vec<3, u32, defaultp>	uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
uvec4	include/glm/ext/vector_uint4.hpp	/^	typedef vec<4, unsigned int, defaultp>		uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,defaultp>
uvec4	include/glm/fwd.hpp	/^	typedef vec<4, u32, defaultp>	uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
v_oversample	include/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anona175a7780508	typeref:typename:unsigned char
v_oversample	include/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	imgui/imgui.cpp	/^#define va_copy(/;"	d	file:
va_copy	imgui/imgui.cpp	/^#define va_copy(dest, src) __builtin_va_copy(/;"	d	file:
val_f	include/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon010b98f3010a	typeref:typename:float
val_i	include/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon010b98f3010a	typeref:typename:int
val_p	include/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon010b98f3010a	typeref:typename:void *
value	include/glm/detail/qualifier.hpp	/^			static const bool value = true;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	include/glm/detail/qualifier.hpp	/^		static const bool value = false;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	include/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	e	enum:glm::detail::is_int::test
value	include/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	include/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	include/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	include/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	include/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	include/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	include/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	include/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	include/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	include/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	include/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	include/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	include/glm/ext/scalar_ulp.inl	/^	double value;$/;"	m	union:__anon6c3ce53e020a	typeref:typename:double	file:
value	include/glm/ext/scalar_ulp.inl	/^	float value;$/;"	m	union:__anon6c3ce53e010a	typeref:typename:float	file:
value	include/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	typeref:typename:CTy[3]
value	include/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	typeref:typename:order_type
value	include/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	typeref:typename:unsigned
value	include/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	typeref:typename:unsigned
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%d";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%f";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%lld";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "b";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "d";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	include/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T * value_ptr(mat<4, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(qua<T, Q>& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<2, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<3, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	include/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<4, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_type	include/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	include/glm/detail/type_quat.hpp	/^		typedef T value_type;$/;"	t	struct:glm::qua	typeref:typename:T
value_type	include/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	include/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	include/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	include/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	include/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	typeref:typename:T
value_type	include/glm/gtx/string_cast.inl	/^		typedef T value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:T	file:
value_type	include/glm/gtx/string_cast.inl	/^		typedef double value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:double	file:
value_type	include/imgui/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
vao	include/rectangle.h	/^    uint32_t vao, vbo , ebo;$/;"	m	class:Rectangle	typeref:typename:uint32_t
vaoID	include/cube.h	/^    uint32_t vaoID;$/;"	m	class:Cube	typeref:typename:uint32_t
vbo	include/rectangle.h	/^    uint32_t vao, vbo , ebo;$/;"	m	class:Rectangle	typeref:typename:uint32_t
vboID	include/cube.h	/^    uint32_t vboID;$/;"	m	class:Cube	typeref:typename:uint32_t
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<1, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<2, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<3, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/glm.cpp	/^template struct vec<4, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	include/glm/detail/type_vec1.hpp	/^	struct vec<1, T, Q>$/;"	s	namespace:glm
vec	include/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1,-1,-2> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.hpp	/^	struct vec<2, T, Q>$/;"	s	namespace:glm
vec	include/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, vec<1, B, Q> const& _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T _x, T _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, vec<1, B, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& scalar, detail::_swizzle<2, T, Q, E0, E1, -1, -2> co/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.hpp	/^	struct vec<3, T, Q>$/;"	s	namespace:glm
vec	include/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(A _x, vec<2, B, P> const& _yz)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T _x, T _y, T _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, B _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, T const& y, detail::_swizzle<2, T, Q, E0, E1, -1,/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(T const& x, detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, detail::_/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& v, T const& /;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL GLM_CONSTEXPR vec(detail::_swizzle<4, T, Q, E0, E1, E2, E3> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.hpp	/^	struct vec<4, T, Q>$/;"	s	namespace:glm
vec	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, B _y, vec<2, C, P> const& _zw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<3, B, P> const& _yzw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T _x, T _y, T _z, T _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<1, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<3, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<2, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, B _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, vec<1, B, P> const/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_highp>::vec(detail::int64 _s) :$/;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_lowp>::vec(detail::int64 _s) :$/;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_mediump>::vec(detail::int64 _s) /;"	f	class:glm::vec::int64	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_highp>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_lowp>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_mediump>::vec(double _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, float, aligned_/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, int, aligned_hi/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, uint, aligned_h/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _x, float _y, float _z/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(int _x, int _y, int _z, int /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(uint _x, uint _y, uint _z, u/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _x, float _y, float _z,/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(int _x, int _y, int _z, int _/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(uint _x, uint _y, uint _z, ui/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _x, float _y, float /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(int _x, int _y, int _z, in/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(uint _x, uint _y, uint _z,/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _x, int _y, int _z, int _w/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _x, int _y, int _z, int _w)/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _x, int _y, int _z, int /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_highp>::vec(uint _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_lowp>::vec(uint _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	include/glm/detail/type_vec4_simd.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_mediump>::vec(uint _s) :$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec1	include/glm/ext/vector_float1.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec1	include/glm/fwd.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec2	include/glm/ext/vector_float2.hpp	/^	typedef vec<2, float, defaultp>	vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec2	include/glm/fwd.hpp	/^	typedef vec<2, float, defaultp>		vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec3	include/glm/ext/vector_float3.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec3	include/glm/fwd.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec4	include/glm/ext/vector_float4.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vec4	include/glm/fwd.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vector	.vscode/settings.json	/^        "vector": "cpp"$/;"	s	object:files.associations
version	include/imgui/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	v	typeref:struct:__anon91aaf4b10208
vertex	include/shader.h	/^	char* vertex;$/;"	m	struct:__anon11768d450108	typeref:typename:char *
vertices	include/cube.h	/^    std::vector<float> vertices;$/;"	m	class:Cube	typeref:typename:std::vector<float>
vertices	include/rectangle.h	/^    std::vector<float> vertices; $/;"	m	class:Rectangle	typeref:typename:std::vector<float>
volatile	CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
volatile	cmake-build/CMakeFiles/3.26.3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vsnprintf	imgui/imgui.cpp	/^#define vsnprintf _vsnprintf$/;"	d	file:
vsnprintf	imgui/imgui_demo.cpp	/^#define vsnprintf   _vsnprintf$/;"	d	file:
w	include/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anon948561fb010a::__anon948561fb0208	typeref:typename:T
w	include/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
w	include/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
w	include/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520208	typeref:typename:T
w	include/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
w	include/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon624eef52080a	typeref:typename:T
w	include/glm/gtc/packing.inl	/^			int w : 2;$/;"	m	struct:glm::detail::i10i10i10i2::__anon0d6bcc420708	typeref:typename:int:2	file:
w	include/glm/gtc/packing.inl	/^			uint w : 1;$/;"	m	struct:glm::detail::u5u5u5u1::__anon0d6bcc420508	typeref:typename:uint:1	file:
w	include/glm/gtc/packing.inl	/^			uint w : 2;$/;"	m	struct:glm::detail::u10u10u10u2::__anon0d6bcc420608	typeref:typename:uint:2	file:
w	include/glm/gtc/packing.inl	/^			uint w : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon0d6bcc420308	typeref:typename:uint:4	file:
w	include/glm/gtc/packing.inl	/^			uint w : 5;$/;"	m	struct:glm::detail::u9u9u9e5::__anon0d6bcc420808	typeref:typename:uint:5	file:
w	include/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	include/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	include/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	include/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anona175a7780808	typeref:typename:int
w	include/rectangle.h	/^    float w , h, x , y;$/;"	m	class:Rectangle	typeref:typename:float
was_packed	include/imgui/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	include/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
wformat_saver	include/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<wchar_t>
wgl_get_proc_address	include/imgui/imgui_impl_opengl3_loader.h	/^static GL3WglGetProcAddr wgl_get_proc_address;$/;"	v	typeref:typename:GL3WglGetProcAddr
where	include/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anonda15fd810108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
white	shared.h	/^    float white[3] = WHITE;  $/;"	v	typeref:typename:float[3]
width	include/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
width	include/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER width::width(unsigned a)$/;"	f	class:glm::io::width	typeref:typename:GLM_FUNC_QUALIFIER
width	include/imgui/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	include/imgui/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	include/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anona175a7781108	typeref:typename:int
width_	include/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
word	include/glm/ext/scalar_ulp.inl	/^	unsigned int word;$/;"	m	union:__anon6c3ce53e010a	typeref:typename:unsigned int	file:
word	include/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm	typeref:typename:detail::uint16
wrapAngle	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T wrapAngle(T angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
wrapAngle	include/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> wrapAngle(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
wstate_saver	include/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<wchar_t>
ww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> ww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
www	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> www(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wwzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wwzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wxzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wywz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wyzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> wz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
wzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> wzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
wzzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
wzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> wzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
x	include/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anon948561fb010a::__anon948561fb0208	typeref:typename:T
x	include/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
x	include/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
x	include/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::vec::__anon6218a5cf010a	typeref:typename:T
x	include/glm/detail/type_vec1.hpp	/^			T x;$/;"	m	struct:glm::vec	typeref:typename:T
x	include/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon6218a5cf020a	typeref:typename:T
x	include/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500208	typeref:typename:T
x	include/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
x	include/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon622abe50050a	typeref:typename:T
x	include/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10208	typeref:typename:T
x	include/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
x	include/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon623cd6d1050a	typeref:typename:T
x	include/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520208	typeref:typename:T
x	include/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
x	include/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon624eef52050a	typeref:typename:T
x	include/glm/gtc/packing.inl	/^			int x : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon0d6bcc420708	typeref:typename:int:10	file:
x	include/glm/gtc/packing.inl	/^			uint x : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon0d6bcc420608	typeref:typename:uint:10	file:
x	include/glm/gtc/packing.inl	/^			uint x : 3;$/;"	m	struct:glm::detail::u3u3u2::__anon0d6bcc420108	typeref:typename:uint:3	file:
x	include/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4::__anon0d6bcc420208	typeref:typename:uint:4	file:
x	include/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon0d6bcc420308	typeref:typename:uint:4	file:
x	include/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon0d6bcc420508	typeref:typename:uint:5	file:
x	include/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u6u5::__anon0d6bcc420408	typeref:typename:uint:5	file:
x	include/glm/gtc/packing.inl	/^			uint x : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon0d6bcc420808	typeref:typename:uint:9	file:
x	include/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	include/imgui/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	include/imgui/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	include/imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	include/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon8a0969a30308	typeref:typename:int
x	include/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	include/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	include/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anonda15fd810508	typeref:typename:float
x	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
x	include/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anona175a7780f08	typeref:typename:float
x	include/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anona175a7781008	typeref:typename:float
x	include/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	include/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anona175a7781108	typeref:typename:int
x	include/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	include/imgui/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anona175a7781208	typeref:typename:unsigned char
x	include/rectangle.h	/^    float w , h, x , y;$/;"	m	class:Rectangle	typeref:typename:float
x0	include/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anonda15fd810408	typeref:typename:float
x0	include/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	include/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anona175a7780308	typeref:typename:float
x0	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780208	typeref:typename:unsigned short
x0	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780408	typeref:typename:unsigned short
x1	include/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anonda15fd810408	typeref:typename:float
x1	include/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	include/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anona175a7780308	typeref:typename:float
x1	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780208	typeref:typename:unsigned short
x1	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780408	typeref:typename:unsigned short
xadvance	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780208	typeref:typename:float
xadvance	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780408	typeref:typename:float
xoff	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780208	typeref:typename:float
xoff	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780408	typeref:typename:float
xoff2	include/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anona175a7780408	typeref:typename:float
xw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xwzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xwzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xxzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xywz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xyzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> xz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
xzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> xzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
xzzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
xzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> xzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
y	include/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anon948561fb010a::__anon948561fb0208	typeref:typename:T
y	include/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
y	include/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
y	include/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon622abe50010a::__anon622abe500208	typeref:typename:T
y	include/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
y	include/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon622abe50060a	typeref:typename:T
y	include/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10208	typeref:typename:T
y	include/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
y	include/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon623cd6d1060a	typeref:typename:T
y	include/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520208	typeref:typename:T
y	include/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
y	include/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon624eef52060a	typeref:typename:T
y	include/glm/gtc/packing.inl	/^			int y : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon0d6bcc420708	typeref:typename:int:10	file:
y	include/glm/gtc/packing.inl	/^			uint y : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon0d6bcc420608	typeref:typename:uint:10	file:
y	include/glm/gtc/packing.inl	/^			uint y : 3;$/;"	m	struct:glm::detail::u3u3u2::__anon0d6bcc420108	typeref:typename:uint:3	file:
y	include/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4::__anon0d6bcc420208	typeref:typename:uint:4	file:
y	include/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon0d6bcc420308	typeref:typename:uint:4	file:
y	include/glm/gtc/packing.inl	/^			uint y : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon0d6bcc420508	typeref:typename:uint:5	file:
y	include/glm/gtc/packing.inl	/^			uint y : 6;$/;"	m	struct:glm::detail::u5u6u5::__anon0d6bcc420408	typeref:typename:uint:6	file:
y	include/glm/gtc/packing.inl	/^			uint y : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon0d6bcc420808	typeref:typename:uint:9	file:
y	include/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	include/imgui/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	include/imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	include/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon8a0969a30308	typeref:typename:int
y	include/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	include/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	include/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anonda15fd810508	typeref:typename:float
y	include/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anona175a7780708	typeref:typename:stbtt_vertex_type
y	include/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anona175a7780f08	typeref:typename:float
y	include/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anona175a7781008	typeref:typename:float
y	include/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anona175a7781108	typeref:typename:int
y	include/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	include/rectangle.h	/^    float w , h, x , y;$/;"	m	class:Rectangle	typeref:typename:float
y0	include/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	include/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anona175a7780308	typeref:typename:float
y0	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780208	typeref:typename:unsigned short
y0	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780408	typeref:typename:unsigned short
y1	include/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	include/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anona175a7780308	typeref:typename:float
y1	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780208	typeref:typename:unsigned short
y1	include/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anona175a7780408	typeref:typename:unsigned short
yaw	include/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T yaw(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
yawPitchRoll	include/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> yawPitchRoll$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
yellow	shared.h	/^    float yellow[3] = YELLOW;$/;"	v	typeref:typename:float[3]
ymax	include/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anonda15fd810408	typeref:typename:float
ymin	include/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anonda15fd810408	typeref:typename:float
yoff	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780208	typeref:typename:float
yoff	include/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anona175a7780408	typeref:typename:float
yoff2	include/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anona175a7780408	typeref:typename:float
yw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> ywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
ywzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
ywzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> ywzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yxzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yywz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yyzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> yz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
yzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> yzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
yzzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
yzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> yzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
z	include/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anon948561fb010a::__anon948561fb0208	typeref:typename:T
z	include/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
z	include/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
z	include/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon623cd6d1010a::__anon623cd6d10208	typeref:typename:T
z	include/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
z	include/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon623cd6d1070a	typeref:typename:T
z	include/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w; };$/;"	m	struct:glm::vec::__anon624eef52010a::__anon624eef520208	typeref:typename:T
z	include/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
z	include/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon624eef52070a	typeref:typename:T
z	include/glm/gtc/packing.inl	/^			int z : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon0d6bcc420708	typeref:typename:int:10	file:
z	include/glm/gtc/packing.inl	/^			uint z : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon0d6bcc420608	typeref:typename:uint:10	file:
z	include/glm/gtc/packing.inl	/^			uint z : 2;$/;"	m	struct:glm::detail::u3u3u2::__anon0d6bcc420108	typeref:typename:uint:2	file:
z	include/glm/gtc/packing.inl	/^			uint z : 4;$/;"	m	struct:glm::detail::u4u4u4u4::__anon0d6bcc420308	typeref:typename:uint:4	file:
z	include/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u5u5u1::__anon0d6bcc420508	typeref:typename:uint:5	file:
z	include/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u6u5::__anon0d6bcc420408	typeref:typename:uint:5	file:
z	include/glm/gtc/packing.inl	/^			uint z : 9;$/;"	m	struct:glm::detail::u9u9u9e5::__anon0d6bcc420808	typeref:typename:uint:9	file:
z	include/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
zero	include/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType zero()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
zw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zwzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zwzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zxzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zxzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zywz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zyzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zyzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, Q> zz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<2,T,Q>
zzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzww	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzwz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzxw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzxz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzyw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzyz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, Q> zzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<3,T,Q>
zzzw	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzx	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzy	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
zzzz	include/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, Q> zzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_INLINE glm::vec<4,T,Q>
~BasicSolver	include/basic_solver.h	/^BasicSolver::~BasicSolver(){}$/;"	f	class:BasicSolver
~Cube	include/cube.h	/^Cube::~Cube() {$/;"	f	class:Cube
~ExampleAppConsole	imgui/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~ImDrawList	include/imgui/imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	include/imgui/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	imgui/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	imgui/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	imgui/imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	include/imgui/imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewportP	include/imgui/imgui_internal.h	/^    ~ImGuiViewportP()   { if (DrawLists[0]) IM_DELETE(DrawLists[0]); if (DrawLists[1]) IM_DELETE/;"	f	struct:ImGuiViewportP
~ImGuiWindow	imgui/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	include/imgui/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	include/imgui/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
~Rectangle	include/rectangle.h	/^Rectangle::~Rectangle(){}$/;"	f	class:Rectangle
~Solver	include/solver.h	/^    ~Solver(){}$/;"	f	class:Solver
~basic_format_saver	include/glm/gtx/io.inl	/^	basic_format_saver<CTy, CTr>::~basic_format_saver()$/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
~basic_state_saver	include/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::~basic_state_saver()$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
